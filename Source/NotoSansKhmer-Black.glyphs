{
.appVersion = "1286";
copyright = "Copyright 2012 Google Inc. All Rights Reserved.";
customParameters = (
{
name = vendorID;
value = GOOG;
},
{
name = panose;
value = (
2,
11,
6,
6,
3,
8,
4,
2,
2,
4
);
},
{
name = unicodeRanges;
value = (
80
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
space,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
braceleft,
bar,
braceright,
asciitilde,
uni200B,
guillemotleft,
uni00AD,
guillemotright,
uni1780,
uni1781,
uni1782,
uni1783,
uni1784,
uni1785,
uni1786,
uni1787,
uni1788,
uni1789,
uni178A,
uni178B,
uni178C,
uni178D,
uni178E,
uni178F,
uni1790,
uni1791,
uni1792,
uni1793,
uni1794,
uni1795,
uni1796,
uni1797,
uni1798,
uni1799,
uni179A,
uni179B,
uni179C,
uni179D,
uni179E,
uni179F,
uni17A0,
uni17A1,
uni17A2,
uni17A3,
uni17A4,
uni17A5,
uni17A6,
uni17A7,
uni17A8,
uni17A9,
uni17AA,
uni17AB,
uni17AC,
uni17AD,
uni17AE,
uni17AF,
uni17B0,
uni17B1,
uni17B2,
uni17B3,
uni17B6,
uni17B7,
uni17B8,
uni17B9,
uni17BA,
uni17BB,
uni17BC,
uni17BD,
uni17BE,
uni17BF,
uni17C0,
uni17C1,
uni17C2,
uni17C3,
uni17C4,
uni17C5,
uni17C6,
uni17C7,
uni17C8,
uni17C9,
uni17CA,
uni17CB,
uni17CC,
uni17CD,
uni17CE,
uni17CF,
uni17D0,
uni17D1,
uni17D2,
uni17D3,
uni17D4,
uni17D5,
uni17D6,
uni17D7,
uni17D8,
uni17D9,
uni17DA,
uni17DB,
uni17E0,
uni17E1,
uni17E2,
uni17E3,
uni17E4,
uni17E5,
uni17E6,
uni17E7,
uni17E8,
uni17E9,
uni17D21780,
uni17D21781,
uni17D21782,
uni17D21783,
uni17D21784,
uni17D21785,
uni17D21786,
uni17D21787,
uni17D21788,
uni17D21789,
uni17D21789.a,
uni17D2178A,
uni17D2178B,
uni17D2178C,
uni17D2178D,
uni17D2178E,
uni17D2178F,
uni17D21790,
uni17D21791,
uni17D21792,
uni17D21793,
uni17D21794,
uni17D21795,
uni17D21796,
uni17D21797,
uni17D21798,
uni17D21799,
uni17D2179A,
uni17D2179B,
uni17D2179C,
uni17D2179F,
uni17D217A0,
uni17D217A2,
uni17BB.b,
uni17BC.b,
uni17BD.b,
uni17B7.a,
uni17B8.a,
uni17B9.a,
uni17BA.a,
uni17C6.a,
uni17CE.a,
uni17D0.a,
uni1789.a,
uni1794.a,
uni17D2179A.b,
uni17B717CD,
uni17BF.b,
uni17C0.b,
uni17B7.r,
uni17B8.r,
uni17B9.r,
uni17BA.r,
uni17C6.r,
uni17C9.r,
uni17CD.r,
uni17B717CD.r,
uni17D2178A.n,
uni17D2178B.n,
uni17D2178C.n,
uni17D217A0.n,
uni17D2178A.r,
uni17D21797.r,
uni17D21798.r,
uni17BB.n,
uni17BC.n,
uni17BD.n,
uni17BB.n2,
uni17BC.n2,
uni17BD.n2,
uni17D21798.b,
uni17D217A0.b,
uni17B4,
uni17B5,
uni17DC,
uni17DD,
uni17F0,
uni17F1,
uni17F2,
uni17F3,
uni17F4,
uni17F5,
uni17F6,
uni17F7,
uni17F8,
uni17F9,
uni19E0,
uni19E1,
uni19E2,
uni19E3,
uni19E4,
uni19E5,
uni19E6,
uni19E7,
uni19E8,
uni19E9,
uni19EA,
uni19EB,
uni19EC,
uni19ED,
uni19EE,
uni19EF,
uni19F0,
uni19F1,
uni19F2,
uni19F3,
uni19F4,
uni19F5,
uni19F6,
uni19F7,
uni19F8,
uni19F9,
uni19FA,
uni19FB,
uni19FC,
uni19FD,
uni19FE,
uni19FF,
uni200C,
uni200D,
uni25CC
);
}
);
date = "2010-05-17 19:56:38 +0000";
designer = "Danh Hong";
designerURL = "http://www.nextspell.com";
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
familyName = "Noto Sans Khmer";
featurePrefixes = (
{
code = "lookup lookup_0 {\012sub uni17B7 by uni17B7.r;\012sub uni17B8 by uni17B8.r;\012sub uni17B9 by uni17B9.r;\012sub uni17BA by uni17BA.r;\012sub uni17C6 by uni17C6.r;\012sub uni17C9 by uni17C9.r;\012sub uni17CD by uni17CD.r;\012sub uni17B717CD by uni17B717CD.r;\012} lookup_0;\012";
name = lookup_0;
},
{
code = "lookup lookup_1 {\012sub uni17BB by uni17BB.b;\012sub uni17BC by uni17BC.b;\012sub uni17BD by uni17BD.b;\012} lookup_1;\012";
name = lookup_1;
},
{
code = "lookup lookup_10 {\012sub uni17D21798 by uni17D21798.b;\012sub uni17D217A0 by uni17D217A0.b;\012} lookup_10;\012";
name = lookup_10;
},
{
code = "lookup lookup_11 {\012sub uni1794 by uni1794.a;\012} lookup_11;\012";
name = lookup_11;
},
{
code = "lookup lookup_12 {\012sub uni17D2179A by uni17D2179A.b;\012} lookup_12;\012";
name = lookup_12;
},
{
code = "lookup lookup_13 {\012sub uni17B7 by uni17B7.a;\012sub uni17B8 by uni17B8.a;\012sub uni17B9 by uni17B9.a;\012sub uni17BA by uni17BA.a;\012sub uni17BE by uni17B8.a;\012sub uni17C6 by uni17C6.a;\012} lookup_13;\012";
name = lookup_13;
},
{
code = "lookup lookup_14 {\012sub uni1789 by uni1789.a;\012} lookup_14;\012";
name = lookup_14;
},
{
code = "lookup lookup_15 {\012sub uni17BF by uni17BF.b;\012sub uni17C0 by uni17C0.b;\012} lookup_15;\012";
name = lookup_15;
},
{
code = "lookup lookup_2 {\012sub uni17CA by uni17BB;\012} lookup_2;\012";
name = lookup_2;
},
{
code = "lookup lookup_3 {\012sub uni17C9 by uni17BB.b;\012sub uni17CA by uni17BB.b;\012} lookup_3;\012";
name = lookup_3;
},
{
code = "lookup lookup_4 {\012sub uni17C9 by uni17BB;\012sub uni17C9.r by uni17BB;\012} lookup_4;\012";
name = lookup_4;
},
{
code = "lookup lookup_5 {\012sub uni17D2178A by uni17D2178A.n;\012sub uni17D2178B by uni17D2178B.n;\012sub uni17D2178C by uni17D2178C.n;\012sub uni17D2178F by uni17D2178A.n;\012sub uni17D217A0 by uni17D217A0.n;\012} lookup_5;\012";
name = lookup_5;
},
{
code = "lookup lookup_6 {\012sub uni17BB by uni17BB.n;\012sub uni17BC by uni17BC.n;\012sub uni17BD by uni17BD.n;\012} lookup_6;\012";
name = lookup_6;
},
{
code = "lookup lookup_7 {\012sub uni17BB.b by uni17BB.n2;\012sub uni17BC.b by uni17BC.n2;\012sub uni17BD.b by uni17BD.n2;\012} lookup_7;\012";
name = lookup_7;
},
{
code = "lookup lookup_8 {\012sub uni17D2178A by uni17D2178A.r;\012sub uni17D2178F by uni17D2178A.r;\012sub uni17D21797 by uni17D21797.r;\012sub uni17D21798 by uni17D21798.r;\012} lookup_8;\012";
name = lookup_8;
},
{
code = "lookup lookup_9 {\012sub uni17D21789 by uni17D21789.a;\012} lookup_9;\012";
name = lookup_9;
}
);
features = (
{
code = "script khmr;\012sub uni17B7 uni17CD by uni17B717CD;\012sub uni179A [uni17B7 uni17B8 uni17B9 uni17BA uni17C6 uni17C9 uni17CD uni17B717CD]' lookup lookup_0 ;\012sub uni179C [uni17B7 uni17B8 uni17B9 uni17BA uni17C6 uni17C9 uni17CD uni17B717CD]' lookup lookup_0 ;\012sub uni17D2178A.r [uni17B7 uni17B8 uni17B9 uni17BA uni17C6 uni17C9 uni17CD uni17B717CD]' lookup lookup_0 ;\012sub uni17D21797.r [uni17B7 uni17B8 uni17B9 uni17BA uni17C6 uni17C9 uni17CD uni17B717CD]' lookup lookup_0 ;\012sub uni17D21798.r [uni17B7 uni17B8 uni17B9 uni17BA uni17C6 uni17C9 uni17CD uni17B717CD]' lookup lookup_0 ;\012";
name = abvs;
},
{
code = "script khmr;\012sub uni17D2 uni1780 by uni17D21780;\012sub uni17D2 uni1781 by uni17D21781;\012sub uni17D2 uni1782 by uni17D21782;\012sub uni17D2 uni1784 by uni17D21784;\012sub uni17D2 uni1785 by uni17D21785;\012sub uni17D2 uni1786 by uni17D21786;\012sub uni17D2 uni1787 by uni17D21787;\012sub uni17D2 uni1789 by uni17D21789;\012sub uni17D2 uni178A by uni17D2178A;\012sub uni17D2 uni178B by uni17D2178B;\012sub uni17D2 uni178C by uni17D2178C;\012sub uni17D2 uni178E by uni17D2178E;\012sub uni17D2 uni178F by uni17D2178F;\012sub uni17D2 uni1790 by uni17D21790;\012sub uni17D2 uni1791 by uni17D21791;\012sub uni17D2 uni1792 by uni17D21792;\012sub uni17D2 uni1793 by uni17D21793;\012sub uni17D2 uni1795 by uni17D21795;\012sub uni17D2 uni1796 by uni17D21796;\012sub uni17D2 uni1797 by uni17D21797;\012sub uni17D2 uni1798 by uni17D21798;\012sub uni17D2 uni179B by uni17D2179B;\012sub uni17D2 uni179C by uni17D2179C;\012sub uni17D2 uni17A0 by uni17D217A0;\012sub uni17D2 uni17A2 by uni17D217A2;\012sub [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 uni17C9 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni17A1 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni179F uni17CA' lookup lookup_2 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub uni17A0 uni17CA' lookup lookup_2 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub uni17CA' lookup lookup_2 uni17B6 uni17C6 ;\012sub uni179F uni17CA' lookup lookup_2 uni17BE ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17C9 uni17CA]' lookup lookup_3 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 [uni17B7.a uni17B8.a uni17B9.a uni17BA.a] ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17BE ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17C6 ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17D0 ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17B6 uni17C6 ;\012sub uni178E [uni17D2178A uni17D2178B uni17D2178C uni17D2178F uni17D217A0]' lookup lookup_5 ;\012sub uni178E [uni17BB uni17BC uni17BD]' lookup lookup_6 ;\012sub [uni17D2178A.n uni17D2178B.n uni17D2178C.n uni17D217A0.n] [uni17BB.b uni17BC.b uni17BD.b]' lookup lookup_7 ;\012sub uni179A [uni17D2178A uni17D2178F uni17D21797 uni17D21798]' lookup lookup_8 ;\012sub uni179C [uni17D2178A uni17D2178F uni17D21797 uni17D21798]' lookup lookup_8 ;\012sub uni1789.a uni17D21789' lookup lookup_9 ;\012sub uni17D2179F [uni17D21798 uni17D217A0]' lookup lookup_10 ;\012sub uni17A1 [uni17D21798 uni17D217A0]' lookup lookup_10 ;\012";
name = blwf;
},
{
code = "script khmr;\012sub [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 uni17C9 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni17A1 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1794' lookup lookup_11 uni17B6 ;\012sub uni1794' lookup lookup_11 uni17C4 ;\012sub uni1794' lookup lookup_11 uni17C5 ;\012sub uni1794' lookup lookup_11 uni17C9 uni17B6 ;\012sub uni1794' lookup lookup_11 uni17C9 uni17C4 ;\012sub uni1794' lookup lookup_11 uni17C9 uni17C5 ;\012sub uni1794' lookup lookup_11 uni17CA uni17B6 ;\012sub uni1794' lookup lookup_11 uni17CA uni17C4 ;\012sub uni1794' lookup lookup_11 uni17CA uni17C5 ;\012sub uni1794' lookup lookup_11 [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] uni17B6 ;\012sub uni1794' lookup lookup_11 [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] uni17C4 ;\012sub uni1794' lookup lookup_11 [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] uni17C5 ;\012sub uni1794' lookup lookup_11 uni17BB uni17B6 ;\012sub uni1794' lookup lookup_11 uni17BB uni17C4 ;\012sub uni1794' lookup lookup_11 uni17BB uni17C5 ;\012sub uni17D2179A' lookup lookup_12 [uni1780 uni1781 uni1782 uni1784 uni1785 uni1786 uni1787 uni178A uni178B uni178C uni178F uni1790 uni1791 uni1792 uni1793 uni1794 uni1795 uni1796 uni1797 uni1798 uni17A2] [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] ;\012sub uni17CA [uni17B7 uni17B8 uni17B9 uni17BA uni17BE uni17C6]' lookup lookup_13 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17C9 uni17CA]' lookup lookup_3 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub uni1789' lookup lookup_14 [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] ;\012sub uni1789' lookup lookup_14 [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] ;\012sub uni1789.a uni17D21789' lookup lookup_9 ;\012sub uni17D2179F [uni17D21798 uni17D217A0]' lookup lookup_10 ;\012sub uni17A1 [uni17D21798 uni17D217A0]' lookup lookup_10 ;\012";
name = clig;
},
{
code = "script khmr;\012sub uni17D2 uni179A by uni17D2179A;\012sub uni17D2179A' lookup lookup_12 [uni1780 uni1781 uni1782 uni1784 uni1785 uni1786 uni1787 uni178A uni178B uni178C uni178F uni1790 uni1791 uni1792 uni1793 uni1794 uni1795 uni1796 uni1797 uni1798 uni17A2] [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] ;\012";
name = pref;
},
{
code = "script khmr;\012sub uni17D2 uni1783 by uni17D21783;\012sub uni17D2 uni1788 by uni17D21788;\012sub uni17D2 uni178D by uni17D2178D;\012sub uni17D2 uni1794 by uni17D21794;\012sub uni17D2 uni1799 by uni17D21799;\012sub uni17D2 uni179F by uni17D2179F;\012sub [uni17D21780 uni17D21781 uni17D21782 uni17D21784 uni17D21785 uni17D21786 uni17D21787 uni17D21789 uni17D21789.a uni17D2178A uni17D2178B uni17D2178C uni17D2178E uni17D2178F uni17D21790 uni17D21791 uni17D21792 uni17D21793 uni17D21795 uni17D21796 uni17D21797 uni17D21798 uni17D2179B uni17D2179C uni17D217A0 uni17D217A2] [uni17BF uni17C0]' lookup lookup_15 ;\012sub uni1789 [uni17BF uni17C0]' lookup lookup_15 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17BF uni17C0]' lookup lookup_15 ;\012";
name = pstf;
}
);
fontMaster = (
{
ascender = 1907;
capHeight = 1462;
custom = Black;
customParameters = (
{
name = typoAscender;
value = 1907;
},
{
name = typoDescender;
value = -800;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1907;
},
{
name = winDescent;
value = 800;
},
{
name = hheaAscender;
value = 1907;
},
{
name = hheaDescender;
value = -800;
},
{
name = strikeoutPosition;
value = 658;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01236 22 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01229 7 15 7 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01236 2 22 5 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0121920 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\012256 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01234 2 17 5 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
308,
308,
198,
198,
1130,
-50,
0,
-460,
-800,
1130,
-50,
0,
-460,
-800,
296,
296,
197,
197,
215,
44,
1200,
2111,
-590,
2111,
-590
);
}
);
descender = -800;
iconName = Bold;
id = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
weightValue = 900;
widthValue = 5;
xHeight = 1098;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
width = 2048;
}
);
note = .notdef;
},
{
glyphname = .null;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
width = 0;
}
);
note = .null;
},
{
glyphname = CR;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
width = 2048;
}
);
note = CR;
},
{
glyphname = space;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
width = 532;
}
);
note = space;
unicode = 0020;
},
{
glyphname = exclam;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"513 1462 LINE",
"81 1462 LINE",
"132 516 LINE",
"462 516 LINE",
"462 516 LINE"
);
},
{
closed = 1;
nodes = (
"85 66 OFFCURVE",
"210 -25 OFFCURVE",
"296 -25 QCURVE SMOOTH",
"380 -25 OFFCURVE",
"503 66 OFFCURVE",
"503 166 QCURVE SMOOTH",
"503 272 OFFCURVE",
"380 358 OFFCURVE",
"296 358 QCURVE SMOOTH",
"210 358 OFFCURVE",
"85 272 OFFCURVE",
"85 166 QCURVE",
"85 166 LINE"
);
}
);
width = 593;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"120 1462 LINE",
"161 934 LINE",
"435 934 LINE",
"476 1462 LINE",
"476 1462 LINE"
);
},
{
closed = 1;
nodes = (
"595 1462 LINE",
"636 934 LINE",
"911 934 LINE",
"951 1462 LINE",
"951 1462 LINE"
);
}
);
width = 1073;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = numbersign;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1318 813 LINE",
"1318 1073 LINE",
"1089 1073 LINE",
"1162 1462 LINE",
"894 1462 LINE",
"822 1073 LINE",
"657 1073 LINE",
"730 1462 LINE",
"462 1462 LINE",
"390 1073 LINE",
"104 1073 LINE",
"104 813 LINE",
"341 813 LINE",
"310 645 LINE",
"36 645 LINE",
"36 391 LINE",
"261 391 LINE",
"190 0 LINE",
"456 0 LINE",
"528 391 LINE",
"695 391 LINE",
"622 0 LINE",
"890 0 LINE",
"964 391 LINE",
"1255 391 LINE",
"1255 645 LINE",
"1011 645 LINE",
"1042 813 LINE",
"1042 813 LINE"
);
},
{
closed = 1;
nodes = (
"607 813 LINE",
"773 813 LINE",
"743 645 LINE",
"577 645 LINE",
"577 645 LINE"
);
}
);
width = 1355;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = dollar;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"684 -119 LINE",
"684 49 LINE",
"917 74 OFFCURVE",
"1134 305 OFFCURVE",
"1134 471 QCURVE SMOOTH",
"1134 592 OFFCURVE",
"1028 741 OFFCURVE",
"827 838 OFFCURVE",
"684 881 QCURVE",
"684 1128 LINE",
"766 1120 OFFCURVE",
"932 1081 OFFCURVE",
"1007 1049 QCURVE",
"1095 1323 LINE",
"1011 1356 OFFCURVE",
"809 1411 OFFCURVE",
"684 1417 QCURVE",
"684 1556 LINE",
"495 1556 LINE",
"495 1415 LINE",
"295 1401 OFFCURVE",
"53 1214 OFFCURVE",
"53 1028 QCURVE SMOOTH",
"53 897 OFFCURVE",
"168 731 OFFCURVE",
"368 629 OFFCURVE",
"495 592 QCURVE",
"495 340 LINE",
"401 348 OFFCURVE",
"182 399 OFFCURVE",
"86 442 QCURVE",
"86 129 LINE",
"172 92 OFFCURVE",
"364 49 OFFCURVE",
"495 45 QCURVE",
"495 -119 LINE",
"495 -119 LINE"
);
},
{
closed = 1;
nodes = (
"434 956 OFFCURVE",
"383 1004 OFFCURVE",
"383 1042 QCURVE SMOOTH",
"383 1116 OFFCURVE",
"495 1126 QCURVE",
"495 936 LINE",
"495 936 LINE"
);
},
{
closed = 1;
nodes = (
"684 545 LINE",
"751 524 OFFCURVE",
"801 477 OFFCURVE",
"801 438 QCURVE SMOOTH",
"801 362 OFFCURVE",
"684 344 QCURVE",
"684 344 LINE"
);
}
);
width = 1181;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = percent;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"229 1483 OFFCURVE",
"36 1243 OFFCURVE",
"36 1026 QCURVE SMOOTH",
"36 809 OFFCURVE",
"241 565 OFFCURVE",
"409 565 QCURVE SMOOTH",
"595 565 OFFCURVE",
"790 809 OFFCURVE",
"790 1026 QCURVE SMOOTH",
"790 1243 OFFCURVE",
"581 1483 OFFCURVE",
"409 1483 QCURVE",
"409 1483 LINE"
);
},
{
closed = 1;
nodes = (
"1222 1462 LINE",
"411 0 LINE",
"708 0 LINE",
"1519 1462 LINE",
"1519 1462 LINE"
);
},
{
closed = 1;
nodes = (
"456 1239 OFFCURVE",
"489 1122 OFFCURVE",
"489 1022 QCURVE SMOOTH",
"489 922 OFFCURVE",
"456 805 OFFCURVE",
"413 805 QCURVE SMOOTH",
"370 805 OFFCURVE",
"337 924 OFFCURVE",
"337 1022 QCURVE SMOOTH",
"337 1122 OFFCURVE",
"370 1239 OFFCURVE",
"413 1239 QCURVE",
"413 1239 LINE"
);
},
{
closed = 1;
nodes = (
"1341 901 OFFCURVE",
"1148 662 OFFCURVE",
"1148 444 QCURVE SMOOTH",
"1148 227 OFFCURVE",
"1353 -16 OFFCURVE",
"1521 -16 QCURVE SMOOTH",
"1707 -16 OFFCURVE",
"1902 227 OFFCURVE",
"1902 444 QCURVE SMOOTH",
"1902 662 OFFCURVE",
"1693 901 OFFCURVE",
"1521 901 QCURVE",
"1521 901 LINE"
);
},
{
closed = 1;
nodes = (
"1568 657 OFFCURVE",
"1601 543 OFFCURVE",
"1601 440 QCURVE SMOOTH",
"1601 340 OFFCURVE",
"1568 223 OFFCURVE",
"1525 223 QCURVE SMOOTH",
"1482 223 OFFCURVE",
"1449 342 OFFCURVE",
"1449 440 QCURVE SMOOTH",
"1449 541 OFFCURVE",
"1482 657 OFFCURVE",
"1525 657 QCURVE",
"1525 657 LINE"
);
}
);
width = 1941;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = ampersand;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"448 1481 OFFCURVE",
"212 1284 OFFCURVE",
"212 1133 QCURVE SMOOTH",
"212 1034 OFFCURVE",
"282 877 OFFCURVE",
"343 807 QCURVE",
"212 739 OFFCURVE",
"71 537 OFFCURVE",
"71 406 QCURVE SMOOTH",
"71 287 OFFCURVE",
"194 94 OFFCURVE",
"429 -20 OFFCURVE",
"601 -20 QCURVE SMOOTH",
"724 -20 OFFCURVE",
"878 12 OFFCURVE",
"986 68 OFFCURVE",
"1042 102 QCURVE",
"1140 0 LINE",
"1646 0 LINE",
"1326 307 LINE",
"1402 397 OFFCURVE",
"1533 672 OFFCURVE",
"1566 821 QCURVE",
"1161 821 LINE",
"1130 674 OFFCURVE",
"1056 561 QCURVE",
"857 750 LINE",
"974 819 OFFCURVE",
"1122 1006 OFFCURVE",
"1122 1133 QCURVE SMOOTH",
"1122 1296 OFFCURVE",
"882 1481 OFFCURVE",
"675 1481 QCURVE",
"675 1481 LINE"
);
},
{
closed = 1;
nodes = (
"712 1225 OFFCURVE",
"769 1182 OFFCURVE",
"769 1133 QCURVE SMOOTH",
"769 1085 OFFCURVE",
"710 997 OFFCURVE",
"653 965 QCURVE",
"618 997 OFFCURVE",
"565 1075 OFFCURVE",
"565 1120 QCURVE SMOOTH",
"565 1176 OFFCURVE",
"628 1225 OFFCURVE",
"669 1225 QCURVE",
"669 1225 LINE"
);
},
{
closed = 1;
nodes = (
"804 340 LINE",
"782 322 OFFCURVE",
"696 291 OFFCURVE",
"638 291 QCURVE SMOOTH",
"565 291 OFFCURVE",
"474 371 OFFCURVE",
"474 434 QCURVE SMOOTH",
"474 479 OFFCURVE",
"513 559 OFFCURVE",
"556 592 QCURVE",
"556 592 LINE"
);
}
);
width = 1636;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"120 1462 LINE",
"161 934 LINE",
"435 934 LINE",
"476 1462 LINE",
"476 1462 LINE"
);
}
);
width = 598;
}
);
note = quotesingle;
unicode = 0027;
},
{
glyphname = parenleft;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"73 418 OFFCURVE",
"126 92 OFFCURVE",
"251 -205 OFFCURVE",
"354 -324 QCURVE",
"677 -324 LINE",
"585 -199 OFFCURVE",
"470 102 OFFCURVE",
"417 426 OFFCURVE",
"417 584 QCURVE SMOOTH",
"417 827 OFFCURVE",
"540 1311 OFFCURVE",
"679 1503 QCURVE",
"354 1503 LINE",
"251 1380 OFFCURVE",
"126 1077 OFFCURVE",
"73 750 OFFCURVE",
"73 582 QCURVE",
"73 582 LINE"
);
}
);
width = 735;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"661 750 OFFCURVE",
"608 1077 OFFCURVE",
"483 1380 OFFCURVE",
"381 1503 QCURVE",
"55 1503 LINE",
"192 1311 OFFCURVE",
"317 827 OFFCURVE",
"317 584 QCURVE SMOOTH",
"317 426 OFFCURVE",
"264 102 OFFCURVE",
"147 -199 OFFCURVE",
"57 -324 QCURVE",
"381 -324 LINE",
"483 -205 OFFCURVE",
"608 92 OFFCURVE",
"661 418 OFFCURVE",
"661 582 QCURVE",
"661 582 LINE"
);
}
);
width = 735;
}
);
note = parenright;
unicode = 0029;
},
{
glyphname = asterisk;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"399 1556 LINE",
"438 1204 LINE",
"90 1305 LINE",
"45 1014 LINE",
"358 989 LINE",
"151 711 LINE",
"424 575 LINE",
"547 856 LINE",
"690 573 LINE",
"950 711 LINE",
"743 989 LINE",
"1057 1010 LINE",
"1020 1305 LINE",
"663 1204 LINE",
"702 1556 LINE",
"702 1556 LINE"
);
}
);
width = 1099;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = plus;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"733 1223 LINE",
"465 1223 LINE",
"465 856 LINE",
"92 856 LINE",
"92 588 LINE",
"465 588 LINE",
"465 227 LINE",
"733 227 LINE",
"733 588 LINE",
"1106 588 LINE",
"1106 856 LINE",
"733 856 LINE",
"733 856 LINE"
);
}
);
width = 1200;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = comma;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"155 299 LINE",
"147 217 OFFCURVE",
"114 16 OFFCURVE",
"77 -193 OFFCURVE",
"57 -285 QCURVE",
"336 -285 LINE",
"368 -209 OFFCURVE",
"436 -2 OFFCURVE",
"493 203 OFFCURVE",
"512 276 QCURVE",
"497 299 LINE",
"497 299 LINE"
);
}
);
width = 632;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = hyphen;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"608 393 LINE",
"608 705 LINE",
"43 705 LINE",
"43 393 LINE",
"43 393 LINE"
);
}
);
width = 651;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = period;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"86 66 OFFCURVE",
"211 -25 OFFCURVE",
"299 -25 QCURVE SMOOTH",
"381 -25 OFFCURVE",
"504 66 OFFCURVE",
"504 166 QCURVE SMOOTH",
"504 272 OFFCURVE",
"381 358 OFFCURVE",
"299 358 QCURVE SMOOTH",
"211 358 OFFCURVE",
"86 272 OFFCURVE",
"86 166 QCURVE",
"86 166 LINE"
);
}
);
width = 591;
}
);
note = period;
unicode = 002E;
},
{
glyphname = slash;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"555 1483 LINE",
"10 -20 LINE",
"356 -20 LINE",
"901 1483 LINE",
"901 1483 LINE"
);
}
);
width = 905;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = zero;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1128 1085 OFFCURVE",
"872 1483 OFFCURVE",
"599 1483 QCURVE SMOOTH",
"405 1483 OFFCURVE",
"171 1303 OFFCURVE",
"71 967 OFFCURVE",
"71 729 QCURVE SMOOTH",
"71 377 OFFCURVE",
"325 -20 OFFCURVE",
"599 -20 QCURVE SMOOTH",
"794 -20 OFFCURVE",
"1027 160 OFFCURVE",
"1128 496 OFFCURVE",
"1128 729 QCURVE",
"1128 729 LINE"
);
},
{
closed = 1;
nodes = (
"464 946 OFFCURVE",
"515 1167 OFFCURVE",
"599 1167 QCURVE SMOOTH",
"681 1167 OFFCURVE",
"735 946 OFFCURVE",
"735 729 QCURVE SMOOTH",
"735 512 OFFCURVE",
"681 295 OFFCURVE",
"599 295 QCURVE SMOOTH",
"515 295 OFFCURVE",
"464 514 OFFCURVE",
"464 729 QCURVE",
"464 729 LINE"
);
}
);
width = 1200;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"941 1462 LINE",
"585 1462 LINE",
"83 1053 LINE",
"288 801 LINE",
"454 938 LINE SMOOTH",
"474 956 OFFCURVE",
"519 1001 OFFCURVE",
"546 1032 QCURVE",
"544 979 OFFCURVE",
"540 850 OFFCURVE",
"540 741 OFFCURVE",
"540 723 QCURVE SMOOTH",
"540 0 LINE",
"941 0 LINE",
"941 0 LINE"
);
}
);
width = 1200;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1122 326 LINE",
"569 326 LINE",
"569 336 LINE",
"676 432 LINE SMOOTH",
"815 557 OFFCURVE",
"1001 758 OFFCURVE",
"1094 956 OFFCURVE",
"1094 1083 QCURVE SMOOTH",
"1094 1198 OFFCURVE",
"973 1378 OFFCURVE",
"754 1483 OFFCURVE",
"606 1483 QCURVE SMOOTH",
"461 1483 OFFCURVE",
"258 1415 OFFCURVE",
"111 1307 OFFCURVE",
"45 1249 QCURVE",
"262 995 LINE",
"352 1073 OFFCURVE",
"491 1151 OFFCURVE",
"561 1151 QCURVE SMOOTH",
"618 1151 OFFCURVE",
"702 1094 OFFCURVE",
"702 1028 QCURVE SMOOTH",
"702 975 OFFCURVE",
"651 877 OFFCURVE",
"528 737 OFFCURVE",
"418 621 QCURVE SMOOTH",
"61 260 LINE",
"61 0 LINE",
"1122 0 LINE",
"1122 0 LINE"
);
}
);
width = 1200;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1073 1303 OFFCURVE",
"812 1483 OFFCURVE",
"587 1483 QCURVE SMOOTH",
"397 1483 OFFCURVE",
"161 1397 OFFCURVE",
"71 1335 QCURVE",
"235 1071 LINE",
"257 1085 OFFCURVE",
"343 1128 OFFCURVE",
"458 1165 OFFCURVE",
"526 1165 QCURVE SMOOTH",
"599 1165 OFFCURVE",
"690 1110 OFFCURVE",
"690 1051 QCURVE SMOOTH",
"690 983 OFFCURVE",
"556 897 OFFCURVE",
"388 897 QCURVE SMOOTH",
"296 897 LINE",
"296 600 LINE",
"386 600 LINE SMOOTH",
"511 600 OFFCURVE",
"647 561 OFFCURVE",
"698 492 OFFCURVE",
"698 442 QCURVE SMOOTH",
"698 373 OFFCURVE",
"593 291 OFFCURVE",
"448 291 QCURVE SMOOTH",
"364 291 OFFCURVE",
"163 338 OFFCURVE",
"69 387 QCURVE",
"69 59 LINE",
"163 23 OFFCURVE",
"364 -20 OFFCURVE",
"505 -20 QCURVE SMOOTH",
"716 -20 OFFCURVE",
"987 98 OFFCURVE",
"1116 299 OFFCURVE",
"1116 418 QCURVE SMOOTH",
"1116 573 OFFCURVE",
"925 741 OFFCURVE",
"749 764 QCURVE",
"749 770 LINE",
"835 795 OFFCURVE",
"982 891 OFFCURVE",
"1073 1040 OFFCURVE",
"1073 1145 QCURVE",
"1073 1145 LINE"
);
}
);
width = 1200;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1169 578 LINE",
"1007 578 LINE",
"1007 1462 LINE",
"642 1462 LINE",
"34 573 LINE",
"34 283 LINE",
"618 283 LINE",
"618 0 LINE",
"1007 0 LINE",
"1007 283 LINE",
"1169 283 LINE",
"1169 283 LINE"
);
},
{
closed = 1;
nodes = (
"376 578 LINE",
"538 819 LINE SMOOTH",
"564 860 OFFCURVE",
"595 918 OFFCURVE",
"616 963 QCURVE",
"626 963 LINE",
"626 961 OFFCURVE",
"622 879 OFFCURVE",
"618 778 OFFCURVE",
"618 748 QCURVE SMOOTH",
"618 578 LINE",
"618 578 LINE"
);
}
);
width = 1200;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"592 958 OFFCURVE",
"524 946 OFFCURVE",
"491 940 QCURVE",
"510 1133 LINE",
"1007 1133 LINE",
"1007 1462 LINE",
"174 1462 LINE",
"119 690 LINE",
"264 618 LINE",
"303 631 OFFCURVE",
"409 653 OFFCURVE",
"465 653 QCURVE SMOOTH",
"586 653 OFFCURVE",
"706 557 OFFCURVE",
"706 475 QCURVE SMOOTH",
"706 385 OFFCURVE",
"588 291 OFFCURVE",
"479 291 QCURVE SMOOTH",
"389 291 OFFCURVE",
"172 348 OFFCURVE",
"94 383 QCURVE",
"94 59 LINE",
"258 -20 OFFCURVE",
"512 -20 QCURVE SMOOTH",
"811 -20 OFFCURVE",
"1106 242 OFFCURVE",
"1106 487 QCURVE SMOOTH",
"1106 639 OFFCURVE",
"987 848 OFFCURVE",
"786 958 OFFCURVE",
"663 958 QCURVE",
"663 958 LINE"
);
}
);
width = 1200;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"69 399 OFFCURVE",
"214 117 OFFCURVE",
"462 -20 OFFCURVE",
"620 -20 QCURVE SMOOTH",
"860 -20 OFFCURVE",
"1136 254 OFFCURVE",
"1136 500 QCURVE SMOOTH",
"1136 727 OFFCURVE",
"919 975 OFFCURVE",
"726 975 QCURVE SMOOTH",
"610 975 OFFCURVE",
"477 877 OFFCURVE",
"438 805 QCURVE",
"425 805 LINE",
"431 922 OFFCURVE",
"507 1087 OFFCURVE",
"679 1176 OFFCURVE",
"827 1176 QCURVE SMOOTH",
"900 1176 OFFCURVE",
"1003 1165 OFFCURVE",
"1044 1157 QCURVE",
"1044 1466 LINE",
"1003 1473 OFFCURVE",
"878 1483 OFFCURVE",
"835 1483 QCURVE SMOOTH",
"640 1483 OFFCURVE",
"372 1384 OFFCURVE",
"200 1214 OFFCURVE",
"106 993 OFFCURVE",
"69 743 OFFCURVE",
"69 618 QCURVE",
"69 618 LINE"
);
},
{
closed = 1;
nodes = (
"561 293 OFFCURVE",
"493 358 OFFCURVE",
"462 459 OFFCURVE",
"462 512 QCURVE SMOOTH",
"462 569 OFFCURVE",
"542 670 OFFCURVE",
"616 670 QCURVE SMOOTH",
"687 670 OFFCURVE",
"753 573 OFFCURVE",
"753 492 QCURVE SMOOTH",
"753 389 OFFCURVE",
"675 293 OFFCURVE",
"612 293 QCURVE",
"612 293 LINE"
);
}
);
width = 1200;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"618 0 LINE",
"1132 1229 LINE",
"1132 1462 LINE",
"77 1462 LINE",
"77 1135 LINE",
"710 1135 LINE",
"208 0 LINE",
"208 0 LINE"
);
}
);
width = 1200;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"458 1483 OFFCURVE",
"237 1403 OFFCURVE",
"110 1245 OFFCURVE",
"110 1128 QCURVE SMOOTH",
"110 1001 OFFCURVE",
"241 825 OFFCURVE",
"333 764 QCURVE",
"219 705 OFFCURVE",
"67 537 OFFCURVE",
"67 385 QCURVE SMOOTH",
"67 205 OFFCURVE",
"321 -20 OFFCURVE",
"599 -20 QCURVE SMOOTH",
"784 -20 OFFCURVE",
"1019 86 OFFCURVE",
"1134 270 OFFCURVE",
"1134 389 QCURVE SMOOTH",
"1134 485 OFFCURVE",
"1044 627 OFFCURVE",
"909 731 OFFCURVE",
"839 770 QCURVE",
"950 823 OFFCURVE",
"1091 995 OFFCURVE",
"1091 1126 QCURVE SMOOTH",
"1091 1307 OFFCURVE",
"821 1483 OFFCURVE",
"604 1483 QCURVE",
"604 1483 LINE"
);
},
{
closed = 1;
nodes = (
"649 1198 OFFCURVE",
"720 1141 OFFCURVE",
"720 1092 QCURVE SMOOTH",
"720 1032 OFFCURVE",
"640 965 OFFCURVE",
"597 940 QCURVE",
"548 967 OFFCURVE",
"481 1044 OFFCURVE",
"481 1092 QCURVE SMOOTH",
"481 1141 OFFCURVE",
"552 1198 OFFCURVE",
"602 1198 QCURVE",
"602 1198 LINE"
);
},
{
closed = 1;
nodes = (
"429 467 OFFCURVE",
"528 561 OFFCURVE",
"595 596 QCURVE",
"622 580 LINE SMOOTH",
"647 565 OFFCURVE",
"718 512 OFFCURVE",
"772 438 OFFCURVE",
"772 393 QCURVE SMOOTH",
"772 334 OFFCURVE",
"685 264 OFFCURVE",
"595 264 QCURVE SMOOTH",
"518 264 OFFCURVE",
"429 340 OFFCURVE",
"429 401 QCURVE",
"429 401 LINE"
);
}
);
width = 1200;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1130 1053 OFFCURVE",
"983 1343 OFFCURVE",
"733 1483 OFFCURVE",
"581 1483 QCURVE SMOOTH",
"339 1483 OFFCURVE",
"63 1208 OFFCURVE",
"63 965 QCURVE SMOOTH",
"63 735 OFFCURVE",
"282 487 OFFCURVE",
"466 487 QCURVE SMOOTH",
"591 487 OFFCURVE",
"720 584 OFFCURVE",
"761 657 QCURVE",
"774 657 LINE",
"768 549 OFFCURVE",
"694 381 OFFCURVE",
"512 287 OFFCURVE",
"348 287 QCURVE SMOOTH",
"290 287 OFFCURVE",
"204 295 OFFCURVE",
"161 303 QCURVE",
"161 -10 LINE",
"202 -16 OFFCURVE",
"321 -20 OFFCURVE",
"366 -20 QCURVE SMOOTH",
"638 -20 OFFCURVE",
"974 182 OFFCURVE",
"1130 561 OFFCURVE",
"1130 821 QCURVE",
"1130 821 LINE"
);
},
{
closed = 1;
nodes = (
"643 1167 OFFCURVE",
"706 1102 OFFCURVE",
"737 1004 OFFCURVE",
"737 950 QCURVE SMOOTH",
"737 893 OFFCURVE",
"653 791 OFFCURVE",
"587 791 QCURVE SMOOTH",
"516 791 OFFCURVE",
"446 887 OFFCURVE",
"446 969 QCURVE SMOOTH",
"446 1073 OFFCURVE",
"522 1167 OFFCURVE",
"591 1167 QCURVE",
"591 1167 LINE"
);
}
);
width = 1200;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = colon;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"86 854 OFFCURVE",
"211 764 OFFCURVE",
"299 764 QCURVE SMOOTH",
"381 764 OFFCURVE",
"504 854 OFFCURVE",
"504 956 QCURVE SMOOTH",
"504 1061 OFFCURVE",
"381 1147 OFFCURVE",
"299 1147 QCURVE SMOOTH",
"211 1147 OFFCURVE",
"86 1061 OFFCURVE",
"86 956 QCURVE",
"86 956 LINE"
);
},
{
closed = 1;
nodes = (
"86 66 OFFCURVE",
"211 -25 OFFCURVE",
"299 -25 QCURVE SMOOTH",
"381 -25 OFFCURVE",
"504 66 OFFCURVE",
"504 166 QCURVE SMOOTH",
"504 272 OFFCURVE",
"381 358 OFFCURVE",
"299 358 QCURVE SMOOTH",
"211 358 OFFCURVE",
"86 272 OFFCURVE",
"86 166 QCURVE",
"86 166 LINE"
);
}
);
width = 591;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"92 854 OFFCURVE",
"215 764 OFFCURVE",
"303 764 QCURVE SMOOTH",
"385 764 OFFCURVE",
"510 854 OFFCURVE",
"510 956 QCURVE SMOOTH",
"510 1061 OFFCURVE",
"385 1147 OFFCURVE",
"303 1147 QCURVE SMOOTH",
"215 1147 OFFCURVE",
"92 1061 OFFCURVE",
"92 956 QCURVE",
"92 956 LINE"
);
},
{
closed = 1;
nodes = (
"155 299 LINE",
"147 217 OFFCURVE",
"114 16 OFFCURVE",
"77 -193 OFFCURVE",
"57 -285 QCURVE",
"336 -285 LINE",
"368 -209 OFFCURVE",
"436 -2 OFFCURVE",
"493 203 OFFCURVE",
"512 276 QCURVE",
"497 299 LINE",
"497 299 LINE"
);
}
);
width = 608;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = less;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1104 473 LINE",
"483 725 LINE",
"1104 1008 LINE",
"1104 1305 LINE",
"92 799 LINE",
"92 627 LINE",
"1104 178 LINE",
"1104 178 LINE"
);
}
);
width = 1200;
}
);
note = less;
unicode = 003C;
},
{
glyphname = equal;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1108 815 LINE",
"1108 1083 LINE",
"92 1083 LINE",
"92 815 LINE",
"92 815 LINE"
);
},
{
closed = 1;
nodes = (
"1108 358 LINE",
"1108 629 LINE",
"92 629 LINE",
"92 358 LINE",
"92 358 LINE"
);
}
);
width = 1200;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = greater;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"92 178 LINE",
"1104 627 LINE",
"1104 799 LINE",
"92 1305 LINE",
"92 1008 LINE",
"713 725 LINE",
"92 473 LINE",
"92 473 LINE"
);
}
);
width = 1200;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = question;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"602 516 LINE",
"602 567 LINE SMOOTH",
"602 614 OFFCURVE",
"670 684 OFFCURVE",
"760 741 QCURVE SMOOTH",
"887 823 OFFCURVE",
"997 999 OFFCURVE",
"997 1118 QCURVE SMOOTH",
"997 1282 OFFCURVE",
"748 1483 OFFCURVE",
"520 1483 QCURVE SMOOTH",
"369 1483 OFFCURVE",
"113 1405 OFFCURVE",
"0 1341 QCURVE",
"139 1069 LINE",
"342 1176 OFFCURVE",
"492 1176 QCURVE SMOOTH",
"553 1176 OFFCURVE",
"629 1126 OFFCURVE",
"629 1085 QCURVE SMOOTH",
"629 1057 OFFCURVE",
"610 1006 OFFCURVE",
"545 942 OFFCURVE",
"477 899 QCURVE SMOOTH",
"369 831 OFFCURVE",
"295 694 OFFCURVE",
"295 602 QCURVE SMOOTH",
"295 516 LINE",
"295 516 LINE"
);
},
{
closed = 1;
nodes = (
"252 66 OFFCURVE",
"375 -25 OFFCURVE",
"463 -25 QCURVE SMOOTH",
"547 -25 OFFCURVE",
"670 66 OFFCURVE",
"670 166 QCURVE SMOOTH",
"670 272 OFFCURVE",
"547 358 OFFCURVE",
"463 358 QCURVE SMOOTH",
"375 358 OFFCURVE",
"252 272 OFFCURVE",
"252 166 QCURVE",
"252 166 LINE"
);
}
);
width = 1034;
}
);
note = question;
unicode = 003F;
},
{
glyphname = at;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1754 979 OFFCURVE",
"1558 1305 OFFCURVE",
"1203 1481 OFFCURVE",
"968 1481 QCURVE SMOOTH",
"765 1481 OFFCURVE",
"437 1348 OFFCURVE",
"206 1112 OFFCURVE",
"81 795 OFFCURVE",
"81 610 QCURVE SMOOTH",
"81 373 OFFCURVE",
"278 31 OFFCURVE",
"650 -154 OFFCURVE",
"912 -154 QCURVE SMOOTH",
"1050 -154 OFFCURVE",
"1306 -104 OFFCURVE",
"1412 -59 QCURVE",
"1412 170 LINE",
"1289 125 OFFCURVE",
"1011 74 OFFCURVE",
"898 74 QCURVE SMOOTH",
"626 74 OFFCURVE",
"353 365 OFFCURVE",
"353 606 QCURVE SMOOTH",
"353 795 OFFCURVE",
"493 1090 OFFCURVE",
"769 1257 OFFCURVE",
"972 1257 QCURVE SMOOTH",
"1230 1257 OFFCURVE",
"1490 987 OFFCURVE",
"1490 758 QCURVE SMOOTH",
"1490 676 OFFCURVE",
"1461 535 OFFCURVE",
"1410 451 OFFCURVE",
"1373 451 QCURVE SMOOTH",
"1351 451 OFFCURVE",
"1324 489 OFFCURVE",
"1324 537 QCURVE SMOOTH",
"1324 565 OFFCURVE",
"1326 621 OFFCURVE",
"1326 631 QCURVE SMOOTH",
"1347 1053 LINE",
"1281 1075 OFFCURVE",
"1091 1114 OFFCURVE",
"990 1114 QCURVE SMOOTH",
"822 1114 OFFCURVE",
"595 989 OFFCURVE",
"478 774 OFFCURVE",
"478 639 QCURVE SMOOTH",
"478 457 OFFCURVE",
"667 233 OFFCURVE",
"857 233 QCURVE SMOOTH",
"941 233 OFFCURVE",
"1072 301 OFFCURVE",
"1117 352 QCURVE",
"1132 352 LINE",
"1171 295 OFFCURVE",
"1302 233 OFFCURVE",
"1375 233 QCURVE SMOOTH",
"1467 233 OFFCURVE",
"1609 324 OFFCURVE",
"1705 473 OFFCURVE",
"1754 659 OFFCURVE",
"1754 756 QCURVE",
"1754 756 LINE"
);
},
{
closed = 1;
nodes = (
"759 743 OFFCURVE",
"872 895 OFFCURVE",
"994 895 QCURVE SMOOTH",
"1013 895 OFFCURVE",
"1042 893 OFFCURVE",
"1062 889 QCURVE",
"1052 733 LINE SMOOTH",
"1044 582 OFFCURVE",
"974 451 OFFCURVE",
"892 451 QCURVE SMOOTH",
"833 451 OFFCURVE",
"759 541 OFFCURVE",
"759 641 QCURVE",
"759 641 LINE"
);
}
);
width = 1837;
}
);
note = at;
unicode = 0040;
},
{
glyphname = braceleft;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"821 -66 LINE",
"782 -66 OFFCURVE",
"692 -53 OFFCURVE",
"630 -8 OFFCURVE",
"630 41 QCURVE SMOOTH",
"630 317 LINE SMOOTH",
"630 434 OFFCURVE",
"507 545 OFFCURVE",
"391 563 QCURVE",
"391 575 LINE",
"503 590 OFFCURVE",
"630 702 OFFCURVE",
"630 827 QCURVE SMOOTH",
"630 1098 LINE SMOOTH",
"630 1149 OFFCURVE",
"692 1192 OFFCURVE",
"780 1204 OFFCURVE",
"821 1204 QCURVE",
"821 1483 LINE",
"608 1483 OFFCURVE",
"387 1409 OFFCURVE",
"307 1260 OFFCURVE",
"307 1143 QCURVE SMOOTH",
"307 889 LINE SMOOTH",
"307 827 OFFCURVE",
"237 752 OFFCURVE",
"124 719 OFFCURVE",
"61 719 QCURVE",
"61 418 LINE",
"122 418 OFFCURVE",
"235 385 OFFCURVE",
"307 309 OFFCURVE",
"307 248 QCURVE SMOOTH",
"307 0 LINE SMOOTH",
"307 -119 OFFCURVE",
"389 -272 OFFCURVE",
"610 -344 OFFCURVE",
"821 -344 QCURVE",
"821 -344 LINE"
);
}
);
width = 886;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = bar;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"387 -446 LINE",
"655 -446 LINE",
"655 1556 LINE",
"387 1556 LINE",
"387 1556 LINE"
);
}
);
width = 1042;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = braceright;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"274 -344 OFFCURVE",
"497 -272 OFFCURVE",
"579 -119 OFFCURVE",
"579 0 QCURVE SMOOTH",
"579 248 LINE SMOOTH",
"579 309 OFFCURVE",
"651 385 OFFCURVE",
"763 418 OFFCURVE",
"825 418 QCURVE",
"825 719 LINE",
"761 719 OFFCURVE",
"649 752 OFFCURVE",
"579 827 OFFCURVE",
"579 889 QCURVE SMOOTH",
"579 1143 LINE SMOOTH",
"579 1260 OFFCURVE",
"499 1409 OFFCURVE",
"278 1483 OFFCURVE",
"65 1483 QCURVE",
"65 1204 LINE",
"106 1204 OFFCURVE",
"194 1192 OFFCURVE",
"255 1149 OFFCURVE",
"255 1098 QCURVE SMOOTH",
"255 827 LINE SMOOTH",
"255 702 OFFCURVE",
"380 590 OFFCURVE",
"495 575 QCURVE",
"495 563 LINE",
"378 545 OFFCURVE",
"255 434 OFFCURVE",
"255 317 QCURVE SMOOTH",
"255 41 LINE SMOOTH",
"255 -8 OFFCURVE",
"194 -53 OFFCURVE",
"106 -66 OFFCURVE",
"65 -66 QCURVE",
"65 -344 LINE",
"65 -344 LINE"
);
}
);
width = 886;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"661 553 OFFCURVE",
"782 528 OFFCURVE",
"842 528 QCURVE SMOOTH",
"1001 528 OFFCURVE",
"1106 637 QCURVE",
"1106 918 LINE",
"1053 866 OFFCURVE",
"932 797 OFFCURVE",
"874 797 QCURVE SMOOTH",
"827 797 OFFCURVE",
"713 819 OFFCURVE",
"637 852 QCURVE SMOOTH",
"536 893 OFFCURVE",
"416 915 OFFCURVE",
"356 915 QCURVE SMOOTH",
"274 915 OFFCURVE",
"143 860 OFFCURVE",
"92 807 QCURVE",
"92 526 LINE",
"143 578 OFFCURVE",
"266 647 OFFCURVE",
"325 647 QCURVE SMOOTH",
"373 647 OFFCURVE",
"485 625 OFFCURVE",
"561 592 QCURVE",
"561 592 LINE"
);
}
);
width = 1200;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = uni200B;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
width = 0;
}
);
note = uni200B;
unicode = 200B;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"73 561 LINE",
"462 80 LINE",
"743 227 LINE",
"470 575 LINE",
"743 922 LINE",
"462 1071 LINE",
"73 588 LINE",
"73 588 LINE"
);
},
{
closed = 1;
nodes = (
"648 561 LINE",
"1036 80 LINE",
"1318 227 LINE",
"1044 575 LINE",
"1318 922 LINE",
"1036 1071 LINE",
"648 588 LINE",
"648 588 LINE"
);
}
);
width = 1394;
}
);
note = guillemotleft;
unicode = 00AB;
},
{
glyphname = uni00AD;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"608 393 LINE",
"608 705 LINE",
"43 705 LINE",
"43 393 LINE",
"43 393 LINE"
);
}
);
width = 651;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = guillemotright;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1320 588 LINE",
"933 1071 LINE",
"648 922 LINE",
"923 575 LINE",
"648 227 LINE",
"933 80 LINE",
"1320 561 LINE",
"1320 561 LINE"
);
},
{
closed = 1;
nodes = (
"745 588 LINE",
"358 1071 LINE",
"75 922 LINE",
"347 575 LINE",
"75 227 LINE",
"358 80 LINE",
"745 561 LINE",
"745 561 LINE"
);
}
);
width = 1394;
}
);
note = guillemotright;
unicode = 00BB;
},
{
glyphname = uni1780;
lastChange = "2020-01-28 08:13:35 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1160 LINE",
"110 1160 LINE",
"110 932 LINE",
"1190 932 LINE"
);
},
{
closed = 1;
nodes = (
"110 0 LINE",
"478 0 LINE",
"478 487 LINE SMOOTH",
"478 557 OFFCURVE",
"535 592 OFFCURVE",
"650 592 CURVE SMOOTH",
"765 592 OFFCURVE",
"822 557 OFFCURVE",
"822 487 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 487 LINE SMOOTH",
"1190 702 OFFCURVE",
"1010 810 OFFCURVE",
"650 810 CURVE SMOOTH",
"290 810 OFFCURVE",
"110 702 OFFCURVE",
"110 487 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 2 0 4 3 2 4 105 0 0 0 1 95 0 1 1 17 77 5 1 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 0 0 2 1 0 103 0 2 0 4 3 2 4 105 5 1 3 3 19 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01218 34 18 33 17 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1780;
unicode = 1780;
},
{
glyphname = uni1781;
lastChange = "2020-01-29 15:13:55 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 726 OFFCURVE",
"233 672 OFFCURVE",
"478 672 CURVE SMOOTH",
"564 672 LINE",
"564 835 LINE",
"478 835 LINE",
"478 916 OFFCURVE",
"535 957 OFFCURVE",
"650 957 CURVE SMOOTH",
"765 957 OFFCURVE",
"822 916 OFFCURVE",
"822 835 CURVE SMOOTH",
"822 658 OFFCURVE",
"728 589 OFFCURVE",
"540 589 CURVE SMOOTH",
"253 589 OFFCURVE",
"110 488 OFFCURVE",
"110 325 CURVE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 115 OFFCURVE",
"1190 356 CURVE",
"822 356 LINE",
"822 251 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 244 OFFCURVE",
"478 325 CURVE SMOOTH",
"478 366 OFFCURVE",
"499 406 OFFCURVE",
"540 406 CURVE SMOOTH",
"973 406 OFFCURVE",
"1190 536 OFFCURVE",
"1190 835 CURVE SMOOTH",
"1190 1052 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1052 OFFCURVE",
"110 835 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 3 1 2 2 3 114 0 7 0 8 5 7 8 105 0 5 0 1 3 5 1 105 0 6 6 0 97 0 0 0 17 77 0 2 2 4 98 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 3 1 2 1 3 2 128 0 7 0 8 5 7 8 105 0 5 0 1 3 5 1 105 0 6 6 0 97 0 0 0 17 77 0 2 2 4 98 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 3 1 2 1 3 2 128 0 0 0 6 7 0 6 105 0 7 0 8 5 7 8 105 0 5 0 1 3 5 1 105 0 2 2 4 98 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01233 17 34 34 33 17 34 34 32 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1781;
unicode = 1781;
},
{
glyphname = uni1782;
lastChange = "2020-01-28 08:18:25 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 1160 LINE",
"110 932 LINE",
"1190 932 LINE",
"1190 1160 LINE"
);
},
{
closed = 1;
nodes = (
"290 810 OFFCURVE",
"110 702 OFFCURVE",
"110 487 CURVE SMOOTH",
"110 0 LINE",
"478 0 LINE",
"478 80 LINE",
"483 87 OFFCURVE",
"489 94 OFFCURVE",
"493 102 CURVE",
"532 158 OFFCURVE",
"550 183 OFFCURVE",
"590 200 CURVE SMOOTH",
"609 208 OFFCURVE",
"635 212 OFFCURVE",
"666 212 CURVE SMOOTH",
"700 212 LINE",
"700 400 LINE",
"662 400 LINE SMOOTH",
"576 400 OFFCURVE",
"515 374 OFFCURVE",
"478 321 CURVE",
"478 487 LINE SMOOTH",
"478 557 OFFCURVE",
"535 592 OFFCURVE",
"650 592 CURVE SMOOTH",
"765 592 OFFCURVE",
"822 557 OFFCURVE",
"822 487 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 487 LINE SMOOTH",
"1190 702 OFFCURVE",
"1010 810 OFFCURVE",
"650 810 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01213 1 5 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0129 1 7 0 3 4 7 3 105 0 4 0 5 2 4 5 105 0 0 0 1 95 8 1 1 1 17 77 6 1 2 2 19 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0128 1 1 0 0 7 1 0 103 9 1 7 0 3 4 7 3 105 0 4 0 5 2 4 5 105 6 1 2 2 19 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\0124 4 0 0 4 30 4 29 27 26 19 17 16 14 11 9 7 6 0 3 0 3 17 10 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1782;
unicode = 1782;
},
{
glyphname = uni1783;
lastChange = "2020-01-28 08:13:25 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"682 827 LINE",
"772 704 LINE",
"772 323 LINE SMOOTH",
"772 260 OFFCURVE",
"723 228 OFFCURVE",
"625 228 CURVE SMOOTH",
"527 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 495 LINE",
"546 616 OFFCURVE",
"580 748 OFFCURVE",
"580 890 CURVE SMOOTH",
"580 1160 LINE",
"110 1160 LINE",
"110 932 LINE",
"262 932 LINE",
"262 890 LINE SMOOTH",
"262 762 OFFCURVE",
"211 646 OFFCURVE",
"110 543 CURVE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"282 0 OFFCURVE",
"625 0 CURVE SMOOTH",
"775 0 OFFCURVE",
"885 30 OFFCURVE",
"956 91 CURVE",
"1027 30 OFFCURVE",
"1137 0 OFFCURVE",
"1287 0 CURVE SMOOTH",
"1630 0 OFFCURVE",
"1802 108 OFFCURVE",
"1802 323 CURVE SMOOTH",
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE",
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1360 1160 OFFCURVE",
"1284 1084 OFFCURVE",
"1284 932 CURVE SMOOTH",
"1284 827 LINE",
"1434 704 LINE",
"1434 323 LINE SMOOTH",
"1434 260 OFFCURVE",
"1385 228 OFFCURVE",
"1287 228 CURVE SMOOTH",
"1189 228 OFFCURVE",
"1140 260 OFFCURVE",
"1140 323 CURVE SMOOTH",
"1140 704 LINE SMOOTH",
"1140 749 OFFCURVE",
"1115 790 OFFCURVE",
"1065 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1160 932 LINE",
"1160 1160 LINE",
"900 1160 LINE SMOOTH",
"755 1160 OFFCURVE",
"682 1094 OFFCURVE",
"682 962 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01251 50 44 35 22 15 14 5 8 2 1 30 1 5 2 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0127 4 2 1 1 0 95 8 3 2 0 0 17 77 9 1 2 2 5 97 6 1 5 5 19 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0128 3 2 0 7 4 2 1 2 0 1 103 9 1 2 2 5 97 6 1 5 5 19 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01248 46 17 21 34 38 17 37 38 17 32 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni1783;
unicode = 1783;
},
{
glyphname = uni1784;
lastChange = "2020-01-28 08:13:18 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"50 610 LINE",
"50 466 LINE",
"110 466 LINE",
"110 0 LINE",
"509 0 LINE",
"651 160 LINE",
"792 0 LINE",
"1190 0 LINE",
"1190 630 LINE",
"1057 791 LINE",
"1112 836 OFFCURVE",
"1140 892 OFFCURVE",
"1140 958 CURVE SMOOTH",
"1140 1093 OFFCURVE",
"1047 1160 OFFCURVE",
"861 1160 CURVE SMOOTH",
"700 1160 OFFCURVE",
"619 1101 OFFCURVE",
"619 983 CURVE SMOOTH",
"619 964 OFFCURVE",
"631 934 OFFCURVE",
"655 894 CURVE",
"650 893 OFFCURVE",
"639 893 OFFCURVE",
"620 893 CURVE SMOOTH",
"525 893 OFFCURVE",
"478 926 OFFCURVE",
"478 992 CURVE SMOOTH",
"478 1340 LINE",
"110 1340 LINE",
"110 992 LINE SMOOTH",
"110 781 OFFCURVE",
"280 675 OFFCURVE",
"620 675 CURVE SMOOTH",
"651 675 OFFCURVE",
"700 678 OFFCURVE",
"766 685 CURVE",
"822 560 LINE",
"822 295 LINE",
"651 455 LINE",
"478 294 LINE",
"478 610 LINE"
);
},
{
closed = 1;
nodes = (
"902 961 OFFCURVE",
"889 941 OFFCURVE",
"864 918 CURVE",
"834 947 OFFCURVE",
"819 969 OFFCURVE",
"819 982 CURVE SMOOTH",
"819 1002 OFFCURVE",
"833 1012 OFFCURVE",
"861 1012 CURVE SMOOTH",
"888 1012 OFFCURVE",
"902 1001 OFFCURVE",
"902 978 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01239 1 2 8 24 5 2 0 2 25 1 7 0 4 1 6 7 28 3 2 1 4 4 6 5 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 3 1 133 0 2 0 0 7 2 0 106 9 1 7 0 6 4 7 6 103 0 8 8 3 97 0 3 3 17 77 5 1 4 4 19 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 1 3 1 133 0 3 0 8 2 3 8 105 0 2 0 0 7 2 0 106 9 1 7 0 6 4 7 6 103 5 1 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\0120 0 36 34 0 33 0 33 17 18 21 36 34 18 38 10 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1784;
unicode = 1784;
},
{
glyphname = uni1785;
lastChange = "2020-01-28 08:13:14 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"700 582 LINE",
"822 582 LINE",
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 714 LINE SMOOTH",
"478 747 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH",
"40 847 LINE",
"110 714 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 820 LINE",
"700 820 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01215 8 2 0 3 7 1 5 0 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 0 0 5 4 0 5 103 0 3 3 2 95 0 2 2 17 77 0 4 4 1 97 0 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 2 0 3 0 2 3 103 0 0 0 5 4 0 5 103 0 4 4 1 97 0 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01218 37 17 37 34 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1785;
unicode = 1785;
},
{
glyphname = uni1786;
lastChange = "2020-01-28 08:13:10 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"40 847 LINE",
"110 714 LINE",
"110 430 LINE",
"40 430 LINE",
"40 172 LINE",
"110 172 LINE",
"110 0 LINE",
"478 0 LINE",
"478 179 LINE",
"579 60 OFFCURVE",
"677 0 OFFCURVE",
"770 0 CURVE SMOOTH",
"1050 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 820 LINE",
"700 820 LINE",
"700 582 LINE",
"822 582 LINE",
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"805 228 OFFCURVE",
"770 228 CURVE SMOOTH",
"729 228 OFFCURVE",
"655 295 OFFCURVE",
"548 430 CURVE",
"478 430 LINE",
"478 714 LINE SMOOTH",
"478 747 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01230 5 2 5 1 29 1 4 5 22 1 8 3 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 5 0 4 2 5 4 103 9 1 2 0 8 6 2 8 103 0 1 1 0 95 0 0 0 17 77 0 3 3 6 97 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 0 0 1 5 0 1 103 0 5 0 4 2 5 4 103 9 1 2 0 8 6 2 8 103 0 3 3 6 97 7 1 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01228 27 17 18 34 17 18 33 20 17 32 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1786;
unicode = 1786;
},
{
glyphname = uni1787;
lastChange = "2020-01-28 08:13:02 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"792 0 LINE",
"1190 0 LINE",
"1190 780 LINE",
"822 780 LINE",
"822 295 LINE",
"651 455 LINE",
"478 294 LINE",
"478 714 LINE SMOOTH",
"478 747 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"385 932 LINE SMOOTH",
"405 932 OFFCURVE",
"458 922 OFFCURVE",
"543 902 CURVE SMOOTH",
"615 882 OFFCURVE",
"684 872 OFFCURVE",
"750 872 CURVE SMOOTH",
"1043 872 OFFCURVE",
"1190 983 OFFCURVE",
"1190 1205 CURVE SMOOTH",
"1190 1280 LINE",
"822 1280 LINE",
"822 1205 LINE SMOOTH",
"822 1135 OFFCURVE",
"795 1100 OFFCURVE",
"740 1100 CURVE SMOOTH",
"633 1100 OFFCURVE",
"554 1110 OFFCURVE",
"501 1130 CURVE",
"435 1150 OFFCURVE",
"386 1160 OFFCURVE",
"355 1160 CURVE SMOOTH",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH",
"40 847 LINE",
"110 714 LINE",
"110 0 LINE",
"509 0 LINE",
"651 160 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01225 1 4 5 4 1 6 4 30 29 28 3 4 0 6 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 1 2 3 112 0 5 5 1 97 0 1 1 17 77 0 4 4 2 97 0 2 2 17 77 0 6 6 0 95 7 1 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 1 3 133 0 5 5 1 97 0 1 1 17 77 0 4 4 2 97 0 2 2 17 77 0 6 6 0 95 7 1 0 0 19 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 1 3 133 0 1 0 5 4 1 5 105 0 2 0 4 6 2 4 106 0 6 6 0 95 7 1 0 0 19 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 23 34 34 18 34 52 17 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1787;
unicode = 1787;
},
{
glyphname = uni1788;
lastChange = "2020-01-28 08:18:31 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1946 827 LINE",
"2096 704 LINE",
"2096 323 LINE SMOOTH",
"2096 260 OFFCURVE",
"2047 228 OFFCURVE",
"1949 228 CURVE SMOOTH",
"1851 228 OFFCURVE",
"1802 260 OFFCURVE",
"1802 323 CURVE SMOOTH",
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE",
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1360 1160 OFFCURVE",
"1284 1084 OFFCURVE",
"1284 932 CURVE SMOOTH",
"1284 827 LINE",
"1434 704 LINE",
"1434 323 LINE SMOOTH",
"1434 260 OFFCURVE",
"1385 228 OFFCURVE",
"1287 228 CURVE SMOOTH",
"1189 228 OFFCURVE",
"1140 260 OFFCURVE",
"1140 323 CURVE SMOOTH",
"1140 807 LINE SMOOTH",
"1140 1042 OFFCURVE",
"968 1160 OFFCURVE",
"625 1160 CURVE SMOOTH",
"282 1160 OFFCURVE",
"110 1042 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 228 LINE",
"530 228 LINE SMOOTH",
"495 228 OFFCURVE",
"478 251 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 807 LINE SMOOTH",
"478 890 OFFCURVE",
"527 932 OFFCURVE",
"625 932 CURVE SMOOTH",
"723 932 OFFCURVE",
"772 890 OFFCURVE",
"772 807 CURVE SMOOTH",
"772 323 LINE SMOOTH",
"772 108 OFFCURVE",
"944 0 OFFCURVE",
"1287 0 CURVE SMOOTH",
"1437 0 OFFCURVE",
"1547 30 OFFCURVE",
"1618 91 CURVE",
"1689 30 OFFCURVE",
"1799 0 OFFCURVE",
"1949 0 CURVE SMOOTH",
"2292 0 OFFCURVE",
"2464 108 OFFCURVE",
"2464 323 CURVE SMOOTH",
"2464 704 LINE SMOOTH",
"2464 749 OFFCURVE",
"2431 790 OFFCURVE",
"2364 826 CURVE SMOOTH",
"2264 880 LINE",
"2264 932 LINE",
"2464 932 LINE",
"2464 1160 LINE",
"2174 1160 LINE SMOOTH",
"2022 1160 OFFCURVE",
"1946 1084 OFFCURVE",
"1946 932 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01259 58 49 42 41 5 6 5 1 13 1 2 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\01210 4 2 1 1 0 95 9 7 2 0 0 17 77 11 8 2 5 5 2 97 6 3 2 2 2 19 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0129 7 2 0 10 4 2 1 5 0 1 103 11 8 2 5 5 2 97 6 3 2 2 2 19 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01256 54 48 47 46 44 35 35 33 35 35 34 38 17 32 12 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 2574;
}
);
note = uni1788;
unicode = 1788;
},
{
glyphname = uni1789;
lastChange = "2020-01-28 08:18:35 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1058 1129 OFFCURVE",
"982 1160 OFFCURVE",
"877 1160 CURVE SMOOTH",
"800 1160 OFFCURVE",
"725 1119 OFFCURVE",
"650 1036 CURVE",
"576 1119 OFFCURVE",
"501 1160 OFFCURVE",
"425 1160 CURVE SMOOTH",
"215 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 228 LINE",
"530 228 LINE SMOOTH",
"495 228 OFFCURVE",
"478 251 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 807 LINE SMOOTH",
"1190 890 OFFCURVE",
"1254 932 OFFCURVE",
"1382 932 CURVE SMOOTH",
"1450 932 OFFCURVE",
"1484 890 OFFCURVE",
"1484 807 CURVE SMOOTH",
"1484 0 LINE",
"1852 0 LINE",
"1852 807 LINE SMOOTH",
"1852 1042 OFFCURVE",
"1705 1160 OFFCURVE",
"1412 1160 CURVE SMOOTH",
"1303 1160 OFFCURVE",
"1201 1129 OFFCURVE",
"1104 1068 CURVE"
);
},
{
closed = 1;
nodes = (
"1412 -50 LINE",
"1412 -230 LINE",
"1440 -230 LINE SMOOTH",
"1469 -230 OFFCURVE",
"1484 -245 OFFCURVE",
"1484 -275 CURVE SMOOTH",
"1484 -292 OFFCURVE",
"1467 -300 OFFCURVE",
"1434 -300 CURVE SMOOTH",
"1340 -300 OFFCURVE",
"1237 -265 OFFCURVE",
"1126 -195 CURVE SMOOTH",
"1015 -125 OFFCURVE",
"844 -90 OFFCURVE",
"612 -90 CURVE SMOOTH",
"110 -90 LINE",
"110 -330 LINE",
"612 -330 LINE SMOOTH",
"789 -330 OFFCURVE",
"930 -358 OFFCURVE",
"1037 -415 CURVE SMOOTH",
"1144 -472 OFFCURVE",
"1276 -500 OFFCURVE",
"1434 -500 CURVE SMOOTH",
"1713 -500 OFFCURVE",
"1852 -425 OFFCURVE",
"1852 -275 CURVE SMOOTH",
"1852 -125 OFFCURVE",
"1715 -50 OFFCURVE",
"1440 -50 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01237 1 2 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 62 values pushed */\0120 5 2 7 2 5 7 128 17 1 16 0 15 14 16 15 105 0 13 0 12 11 13 12 103 6 4 2 2 2 0 97 10 9 2 0 0 17 77 0 7 7 1 95 8 3 2 1 1 19 77 0 14 14 11 97 0 11 11 20 11 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 73 values pushed */\0120 5 4 7 4 5 7 128 17 1 16 0 15 14 16 15 105 0 13 0 12 11 13 12 103 0 2 2 0 97 10 9 2 0 0 17 77 6 1 4 4 0 97 10 9 2 0 0 17 77 0 7 7 1 95 8 3 2 1 1 19 77 0 14 14 11 97 0 11 11 20 11 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 77 values pushed */\0120 5 4 7 4 5 7 128 0 2 2 0 97 10 9 2 0 0 17 77 6 1 4 4 0 97 10 9 2 0 0 17 77 0 7 7 1 95 8 3 2 1 1 19 77 0 15 15 16 97 17 1 16 16 18 77 0 12 12 13 95 0 13 13 18 77 0 14 14 11 97 0 11 11 20 11 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 72 values pushed */\0120 5 4 7 4 5 7 128 0 13 0 12 11 13 12 103 0 14 0 11 14 11 101 0 2 2 0 97 10 9 2 0 0 17 77 6 1 4 4 0 97 10 9 2 0 0 17 77 0 7 7 1 95 8 3 2 1 1 19 77 0 15 15 16 97 17 1 16 16 18 15 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 64 values pushed */\0120 5 4 7 4 5 7 128 0 2 4 0 2 89 10 9 2 0 6 1 4 5 0 4 105 0 13 0 12 11 13 12 103 0 14 0 11 14 11 101 0 7 7 1 95 8 3 2 1 1 19 77 0 15 15 16 97 17 1 16 16 18 15 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01242 42 42 63 42 62 61 59 57 55 53 51 50 48 46 44 40 38 36 34 33 35 18 34 18 18 34 18 33 18 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1962;
}
);
note = uni1789;
unicode = 1789;
},
{
glyphname = uni178A;
lastChange = "2020-01-28 08:18:39 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1340 LINE",
"822 1340 LINE",
"822 982 LINE SMOOTH",
"822 916 OFFCURVE",
"765 883 OFFCURVE",
"650 883 CURVE SMOOTH",
"535 883 OFFCURVE",
"478 899 OFFCURVE",
"478 932 CURVE",
"530 932 LINE",
"530 1160 LINE",
"388 1160 LINE SMOOTH",
"203 1160 OFFCURVE",
"110 1084 OFFCURVE",
"110 932 CURVE SMOOTH",
"110 754 OFFCURVE",
"290 665 OFFCURVE",
"650 665 CURVE SMOOTH",
"1010 665 OFFCURVE",
"1190 771 OFFCURVE",
"1190 982 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"110 600 LINE",
"110 0 LINE",
"509 0 LINE",
"651 160 LINE",
"792 0 LINE",
"1190 0 LINE",
"1190 600 LINE",
"822 600 LINE",
"822 295 LINE",
"651 455 LINE",
"478 294 LINE",
"478 600 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01224 19 18 17 4 6 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 4 1 4 133 0 3 0 0 5 3 0 106 0 2 2 1 97 0 1 1 17 77 9 8 2 5 5 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 4 1 4 133 0 1 0 2 3 1 2 103 0 3 0 0 5 3 0 106 9 8 2 5 5 6 95 7 1 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01216 16 16 27 16 27 18 17 21 18 33 17 34 33 10 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni178A;
unicode = 178A;
},
{
glyphname = uni178B;
lastChange = "2020-01-28 08:18:43 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 495 LINE",
"539 616 OFFCURVE",
"570 748 OFFCURVE",
"570 890 CURVE SMOOTH",
"570 1130 LINE",
"110 1130 LINE",
"110 932 LINE",
"262 932 LINE",
"262 890 LINE SMOOTH",
"262 761 OFFCURVE",
"211 646 OFFCURVE",
"110 543 CURVE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 681 LINE SMOOTH",
"1190 722 OFFCURVE",
"1150 767 OFFCURVE",
"1069 816 CURVE SMOOTH",
"948 890 LINE",
"948 932 LINE",
"1190 932 LINE",
"1190 1340 LINE",
"822 1340 LINE",
"822 1130 LINE",
"808 1130 LINE SMOOTH",
"709 1130 OFFCURVE",
"660 1077 OFFCURVE",
"660 972 CURVE SMOOTH",
"660 837 LINE",
"822 674 LINE",
"822 323 LINE SMOOTH",
"822 240 OFFCURVE",
"765 198 OFFCURVE",
"650 198 CURVE SMOOTH",
"535 198 OFFCURVE",
"478 240 OFFCURVE",
"478 323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01232 23 14 5 4 5 0 3 1 76 0 2 1 3 2 87 5 1 3 3 1 97 6 1 1 1 17 77 0 0 0 4 98 0 4 4 19 4 78 17 21 38 17 18 21 32 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni178B;
unicode = 178B;
},
{
glyphname = uni178C;
lastChange = "2020-01-28 08:18:46 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"822 -50 LINE",
"1190 -50 LINE",
"1190 400 LINE",
"822 400 LINE",
"822 317 LINE",
"769 258 OFFCURVE",
"671 228 OFFCURVE",
"530 228 CURVE SMOOTH",
"475 228 OFFCURVE",
"448 248 OFFCURVE",
"448 287 CURVE SMOOTH",
"448 353 OFFCURVE",
"465 386 OFFCURVE",
"500 386 CURVE SMOOTH",
"960 386 OFFCURVE",
"1190 542 OFFCURVE",
"1190 853 CURVE SMOOTH",
"1190 1058 OFFCURVE",
"1086 1160 OFFCURVE",
"877 1160 CURVE SMOOTH",
"800 1160 OFFCURVE",
"725 1119 OFFCURVE",
"650 1036 CURVE",
"576 1119 OFFCURVE",
"501 1160 OFFCURVE",
"425 1160 CURVE SMOOTH",
"216 1160 OFFCURVE",
"111 1058 OFFCURVE",
"110 853 CURVE SMOOTH",
"110 714 OFFCURVE",
"215 645 OFFCURVE",
"424 645 CURVE SMOOTH",
"540 645 LINE",
"540 823 LINE",
"504 823 LINE SMOOTH",
"487 823 OFFCURVE",
"478 833 OFFCURVE",
"478 853 CURVE SMOOTH",
"478 898 OFFCURVE",
"483 920 OFFCURVE",
"494 920 CURVE SMOOTH",
"505 920 OFFCURVE",
"537 889 OFFCURVE",
"591 826 CURVE SMOOTH",
"609 805 OFFCURVE",
"629 795 OFFCURVE",
"650 795 CURVE SMOOTH",
"671 795 OFFCURVE",
"691 805 OFFCURVE",
"709 826 CURVE SMOOTH",
"764 889 OFFCURVE",
"796 920 OFFCURVE",
"807 920 CURVE SMOOTH",
"817 920 OFFCURVE",
"822 898 OFFCURVE",
"822 853 CURVE SMOOTH",
"822 674 OFFCURVE",
"715 584 OFFCURVE",
"500 584 CURVE SMOOTH",
"240 584 OFFCURVE",
"110 485 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"649 0 OFFCURVE",
"746 38 OFFCURVE",
"822 115 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01230 1 2 7 42 1 10 9 47 1 0 10 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 3 5 6 5 3 6 128 0 11 1 9 1 11 114 0 12 0 12 134 0 5 0 6 1 5 6 105 0 1 0 9 10 1 9 105 4 1 2 2 7 97 8 1 7 7 17 77 0 10 10 0 97 0 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 5 6 5 3 6 128 0 11 1 9 1 11 9 128 0 12 0 12 134 0 5 0 6 1 5 6 105 0 1 0 9 10 1 9 105 4 1 2 2 7 97 8 1 7 7 17 77 0 10 10 0 97 0 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 5 6 5 3 6 128 0 11 1 9 1 11 9 128 0 5 0 6 1 5 6 105 0 1 0 9 10 1 9 105 4 1 2 2 7 97 8 1 7 7 17 77 0 10 10 0 97 0 0 0 19 77 0 12 12 19 12 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 5 6 5 3 6 128 0 11 1 9 1 11 9 128 0 12 0 12 134 0 5 0 6 1 5 6 105 0 1 0 9 10 1 9 105 4 1 2 2 7 97 8 1 7 7 17 77 0 10 10 0 97 0 0 0 19 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 58 values pushed */\0120 3 5 6 5 3 6 128 0 11 1 9 1 11 9 128 0 12 0 12 134 8 1 7 4 1 2 5 7 2 105 0 5 0 6 1 5 6 105 0 1 0 9 10 1 9 105 0 10 10 0 97 0 0 0 19 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01246 45 44 43 41 39 37 35 34 34 33 34 34 34 34 34 32 13 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni178C;
unicode = 178C;
},
{
glyphname = uni178D;
lastChange = "2020-01-28 08:18:49 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE",
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1360 1160 OFFCURVE",
"1284 1084 OFFCURVE",
"1284 932 CURVE SMOOTH",
"1284 827 LINE",
"1434 704 LINE",
"1434 323 LINE SMOOTH",
"1434 260 OFFCURVE",
"1423 228 OFFCURVE",
"1402 228 CURVE SMOOTH",
"1380 228 OFFCURVE",
"1333 285 OFFCURVE",
"1260 400 CURVE",
"1190 400 LINE",
"1190 833 LINE SMOOTH",
"1190 1051 OFFCURVE",
"1086 1160 OFFCURVE",
"877 1160 CURVE SMOOTH",
"800 1160 OFFCURVE",
"725 1119 OFFCURVE",
"650 1036 CURVE",
"576 1119 OFFCURVE",
"501 1160 OFFCURVE",
"425 1160 CURVE SMOOTH",
"215 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 400 LINE",
"752 400 LINE",
"752 142 LINE",
"822 142 LINE",
"822 0 LINE",
"1190 0 LINE",
"1190 149 LINE",
"1258 50 OFFCURVE",
"1335 0 OFFCURVE",
"1422 0 CURVE SMOOTH",
"1675 0 OFFCURVE",
"1802 108 OFFCURVE",
"1802 323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\01235 1 4 9 54 47 2 5 4 46 1 3 5 3 1 2 7 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\01235 1 14 9 54 47 2 5 4 46 1 3 5 3 1 2 7 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\01235 1 14 9 54 47 2 5 4 46 1 3 5 3 1 2 12 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 4 3 4 5 3 128 11 1 3 0 2 0 3 2 103 14 6 2 4 4 9 97 13 10 2 9 9 17 77 12 1 7 7 0 97 8 1 2 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 5 4 3 4 5 3 128 11 1 3 0 2 0 3 2 103 0 14 14 9 97 13 10 2 9 9 17 77 6 1 4 4 9 97 13 10 2 9 9 17 77 12 1 7 7 0 97 8 1 2 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 67 values pushed */\0120 5 4 3 4 5 3 128 11 1 3 0 2 0 3 2 103 0 14 14 9 97 13 10 2 9 9 17 77 6 1 4 4 9 97 13 10 2 9 9 17 77 0 7 7 0 97 8 1 2 0 0 19 77 0 12 12 0 97 8 1 2 0 0 19 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 59 values pushed */\0120 5 4 3 4 5 3 128 0 14 4 9 14 87 13 10 2 9 6 1 4 5 9 4 105 11 1 3 0 2 0 3 2 103 0 7 7 0 97 8 1 2 0 0 19 77 0 12 12 0 97 8 1 2 0 0 19 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01253 52 51 49 44 42 41 40 38 36 34 32 33 35 34 34 34 17 17 18 32 15 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni178D;
unicode = 178D;
},
{
glyphname = uni178E;
lastChange = "2020-01-28 08:18:52 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1434 305 LINE",
"1288 445 LINE",
"1140 304 LINE",
"1140 807 LINE SMOOTH",
"1140 1042 OFFCURVE",
"968 1160 OFFCURVE",
"625 1160 CURVE SMOOTH",
"282 1160 OFFCURVE",
"110 1042 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 228 LINE",
"530 228 LINE SMOOTH",
"495 228 OFFCURVE",
"478 251 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 807 LINE SMOOTH",
"478 890 OFFCURVE",
"527 932 OFFCURVE",
"625 932 CURVE SMOOTH",
"723 932 OFFCURVE",
"772 890 OFFCURVE",
"772 807 CURVE SMOOTH",
"772 0 LINE",
"1171 0 LINE",
"1288 137 LINE",
"1404 0 LINE",
"1802 0 LINE",
"1802 807 LINE SMOOTH",
"1802 890 OFFCURVE",
"1851 932 OFFCURVE",
"1949 932 CURVE SMOOTH",
"2047 932 OFFCURVE",
"2096 890 OFFCURVE",
"2096 807 CURVE SMOOTH",
"2096 0 LINE",
"2464 0 LINE",
"2464 807 LINE SMOOTH",
"2464 1042 OFFCURVE",
"2292 1160 OFFCURVE",
"1949 1160 CURVE SMOOTH",
"1606 1160 OFFCURVE",
"1434 1042 OFFCURVE",
"1434 807 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01236 35 34 3 6 2 13 1 1 6 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0125 1 2 2 0 97 8 1 0 0 17 77 0 6 6 1 95 7 4 3 3 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0128 1 0 5 1 2 6 0 2 105 0 6 6 1 95 7 4 3 3 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01235 33 35 34 18 18 34 18 32 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 2574;
}
);
note = uni178E;
unicode = 178E;
},
{
glyphname = uni178F;
lastChange = "2020-01-28 08:18:54 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 1160 LINE",
"110 932 LINE",
"1190 932 LINE",
"1190 1160 LINE"
);
},
{
closed = 1;
nodes = (
"478 487 LINE SMOOTH",
"478 550 OFFCURVE",
"539 592 OFFCURVE",
"650 592 CURVE SMOOTH",
"761 592 OFFCURVE",
"822 550 OFFCURVE",
"822 487 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 487 LINE SMOOTH",
"1190 702 OFFCURVE",
"1010 810 OFFCURVE",
"650 810 CURVE SMOOTH",
"290 810 OFFCURVE",
"110 702 OFFCURVE",
"110 487 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 4 0 6 2 4 6 105 0 0 0 1 95 7 1 1 1 17 77 0 2 2 3 97 5 1 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0127 1 1 0 0 4 1 0 103 0 4 0 6 2 4 6 105 0 2 2 3 97 5 1 3 3 19 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 22 20 17 16 14 12 9 7 6 4 0 3 0 3 17 8 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni178F;
unicode = 178F;
},
{
glyphname = uni1790;
lastChange = "2020-01-28 08:18:57 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"405 932 OFFCURVE",
"458 922 OFFCURVE",
"543 902 CURVE SMOOTH",
"615 882 OFFCURVE",
"684 872 OFFCURVE",
"750 872 CURVE SMOOTH",
"1043 872 OFFCURVE",
"1190 983 OFFCURVE",
"1190 1205 CURVE SMOOTH",
"1190 1280 LINE",
"822 1280 LINE",
"822 1205 LINE SMOOTH",
"822 1135 OFFCURVE",
"795 1100 OFFCURVE",
"740 1100 CURVE SMOOTH",
"633 1100 OFFCURVE",
"554 1110 OFFCURVE",
"501 1130 CURVE",
"435 1150 OFFCURVE",
"386 1160 OFFCURVE",
"355 1160 CURVE SMOOTH",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH",
"40 847 LINE",
"110 713 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 780 LINE",
"700 780 LINE",
"700 542 LINE",
"822 542 LINE",
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 714 LINE SMOOTH",
"478 747 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"385 932 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01234 1 7 8 15 1 2 7 14 1 1 2 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 6 4 5 6 112 0 5 0 7 2 5 7 106 0 2 0 1 0 2 1 103 0 8 8 4 97 0 4 4 17 77 0 0 0 3 97 0 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 42 values pushed */\0120 6 4 6 133 0 5 0 7 2 5 7 106 0 2 0 1 0 2 1 103 0 8 8 4 97 0 4 4 17 77 0 0 0 3 97 0 3 3 19 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01233 34 18 33 53 34 17 18 33 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1790;
unicode = 1790;
},
{
glyphname = uni1791;
lastChange = "2020-01-28 08:19:00 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"730 317 LINE SMOOTH",
"730 238 OFFCURVE",
"701 198 OFFCURVE",
"644 198 CURVE SMOOTH",
"587 198 OFFCURVE",
"558 238 OFFCURVE",
"558 317 CURVE SMOOTH",
"558 357 LINE",
"190 357 LINE",
"190 317 LINE SMOOTH",
"190 106 OFFCURVE",
"341 0 OFFCURVE",
"644 0 CURVE SMOOTH",
"947 0 OFFCURVE",
"1098 106 OFFCURVE",
"1098 317 CURVE SMOOTH",
"1098 444 LINE",
"1159 471 OFFCURVE",
"1190 510 OFFCURVE",
"1190 561 CURVE SMOOTH",
"1190 598 LINE SMOOTH",
"1190 659 OFFCURVE",
"1127 690 OFFCURVE",
"1000 690 CURVE SMOOTH",
"863 690 OFFCURVE",
"788 672 OFFCURVE",
"774 636 CURVE",
"740 635 OFFCURVE",
"699 634 OFFCURVE",
"650 634 CURVE",
"535 647 OFFCURVE",
"478 704 OFFCURVE",
"478 803 CURVE SMOOTH",
"478 889 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE",
"1190 813 LINE",
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1041 OFFCURVE",
"110 803 CURVE SMOOTH",
"110 545 OFFCURVE",
"290 416 OFFCURVE",
"650 416 CURVE SMOOTH",
"683 416 OFFCURVE",
"709 417 OFFCURVE",
"730 419 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01237 24 2 0 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 3 5 3 2 114 0 5 4 3 5 4 126 0 7 0 8 8 7 114 0 4 0 0 7 4 0 105 0 3 3 1 97 0 1 1 17 77 0 8 8 6 98 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 2 3 5 3 2 114 0 5 4 3 5 4 126 0 7 0 8 0 7 8 128 0 4 0 0 7 4 0 105 0 3 3 1 97 0 1 1 17 77 0 8 8 6 98 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 0 8 0 7 8 128 0 4 0 0 7 4 0 105 0 3 3 1 97 0 1 1 17 77 0 8 8 6 98 0 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01234 18 38 33 50 33 17 34 33 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1791;
unicode = 1791;
},
{
glyphname = uni1792;
lastChange = "2020-01-28 08:19:03 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1160 LINE",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH",
"40 847 LINE",
"110 714 LINE",
"110 0 LINE",
"509 0 LINE",
"651 160 LINE",
"792 0 LINE",
"1190 0 LINE",
"1190 820 LINE",
"700 820 LINE",
"700 582 LINE",
"822 582 LINE",
"822 295 LINE",
"651 455 LINE",
"478 294 LINE",
"478 714 LINE SMOOTH",
"478 747 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"1190 932 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */\0128 1 2 3 1 23 1 2 3 20 13 12 11 4 4 2 3 76 0 3 0 2 4 3 2 103 0 1 1 0 95 0 0 0 17 77 5 1 4 4 19 4 78 18 17 17 23 17 35 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1792;
unicode = 1792;
},
{
glyphname = uni1793;
lastChange = "2020-01-28 08:19:06 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 448 LINE",
"110 0 LINE",
"478 0 LINE",
"478 156 LINE",
"517 156 OFFCURVE",
"568 130 OFFCURVE",
"629 78 CURVE SMOOTH",
"690 26 OFFCURVE",
"743 0 OFFCURVE",
"790 0 CURVE SMOOTH",
"1057 0 OFFCURVE",
"1190 100 OFFCURVE",
"1190 300 CURVE SMOOTH",
"1190 407 LINE SMOOTH",
"1190 585 OFFCURVE",
"1050 677 OFFCURVE",
"770 684 CURVE SMOOTH",
"575 689 OFFCURVE",
"478 732 OFFCURVE",
"478 813 CURVE SMOOTH",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 745 LINE",
"1190 745 LINE",
"1190 813 LINE SMOOTH",
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 582 OFFCURVE",
"330 466 OFFCURVE",
"770 466 CURVE SMOOTH",
"805 466 OFFCURVE",
"822 446 OFFCURVE",
"822 407 CURVE SMOOTH",
"822 300 LINE SMOOTH",
"822 252 OFFCURVE",
"811 228 OFFCURVE",
"790 228 CURVE",
"643 343 OFFCURVE",
"539 391 OFFCURVE",
"478 372 CURVE",
"478 448 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\0120 5 6 7 6 5 114 0 7 0 3 0 7 3 105 0 1 0 9 8 1 9 105 0 6 6 4 97 0 4 4 17 77 11 1 0 0 8 97 10 1 8 8 19 77 0 2 2 8 97 10 1 8 8 19 8 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 58 values pushed */\0120 5 6 7 6 5 7 128 0 7 0 3 0 7 3 105 0 1 0 9 8 1 9 105 0 6 6 4 97 0 4 4 17 77 11 1 0 0 8 97 10 1 8 8 19 77 0 2 2 8 97 10 1 8 8 19 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 29 values pushed */\0121 0 34 33 32 31 30 28 25 23 21 19 17 16 14 12 10 8 5 4 3 2 0 36 1 35 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1793;
unicode = 1793;
},
{
glyphname = uni1794;
lastChange = "2020-01-28 08:10:25 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"508 932 LINE",
"508 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"880 1160 LINE SMOOTH",
"741 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01234 25 18 17 8 1 6 5 1 1 76 4 1 1 1 0 95 3 1 0 0 17 77 0 5 5 2 97 0 2 2 19 2 78 38 17 37 38 17 35 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1794;
unicode = 1794;
},
{
glyphname = uni1795;
lastChange = "2020-01-28 08:12:51 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"405 932 OFFCURVE",
"458 922 OFFCURVE",
"543 902 CURVE SMOOTH",
"615 882 OFFCURVE",
"684 872 OFFCURVE",
"750 872 CURVE SMOOTH",
"1043 872 OFFCURVE",
"1190 983 OFFCURVE",
"1190 1205 CURVE SMOOTH",
"1190 1280 LINE",
"822 1280 LINE",
"822 1205 LINE SMOOTH",
"822 1135 OFFCURVE",
"795 1100 OFFCURVE",
"740 1100 CURVE SMOOTH",
"633 1100 OFFCURVE",
"554 1110 OFFCURVE",
"501 1130 CURVE",
"435 1150 OFFCURVE",
"386 1160 OFFCURVE",
"355 1160 CURVE SMOOTH",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH",
"40 847 LINE",
"110 714 LINE",
"110 0 LINE",
"509 0 LINE",
"651 160 LINE",
"792 0 LINE",
"1190 0 LINE",
"1190 820 LINE",
"700 820 LINE",
"700 582 LINE",
"822 582 LINE",
"822 295 LINE",
"651 455 LINE",
"478 294 LINE",
"478 714 LINE SMOOTH",
"478 747 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"385 932 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01229 1 7 8 10 1 1 7 9 1 0 1 34 33 32 6 4 2 0 4 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 6 4 5 6 112 0 5 0 7 1 5 7 106 0 1 9 1 0 2 1 0 103 0 8 8 4 97 0 4 4 17 77 3 1 2 2 19 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 6 4 6 133 0 5 0 7 1 5 7 106 0 1 9 1 0 2 1 0 103 0 8 8 4 97 0 4 4 17 77 3 1 2 2 19 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0121 0 28 26 25 23 21 20 18 16 15 12 8 7 5 4 3 2 0 36 1 35 10 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1795;
unicode = 1795;
},
{
glyphname = uni1796;
lastChange = "2020-01-28 08:15:30 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 833 LINE SMOOTH",
"1190 1051 OFFCURVE",
"1092 1160 OFFCURVE",
"897 1160 CURVE SMOOTH",
"820 1160 OFFCURVE",
"738 1119 OFFCURVE",
"650 1036 CURVE",
"563 1119 OFFCURVE",
"481 1160 OFFCURVE",
"405 1160 CURVE SMOOTH",
"208 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\0124 1 3 0 1 76 0 4 3 6 3 4 6 128 5 1 3 3 0 97 1 1 0 0 17 77 0 6 6 2 97 7 1 2 2 19 2 78 33 35 34 34 34 18 34 33 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1796;
unicode = 1796;
},
{
glyphname = uni1797;
lastChange = "2020-01-28 08:16:36 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"110 1160 LINE"
);
},
{
closed = 1;
nodes = (
"478 517 LINE SMOOTH",
"478 580 OFFCURVE",
"535 612 OFFCURVE",
"650 612 CURVE SMOOTH",
"765 612 OFFCURVE",
"822 580 OFFCURVE",
"822 517 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 517 LINE SMOOTH",
"1190 732 OFFCURVE",
"1010 840 OFFCURVE",
"650 840 CURVE SMOOTH",
"290 840 OFFCURVE",
"110 732 OFFCURVE",
"110 517 CURVE SMOOTH",
"110 457 LINE",
"158 368 OFFCURVE",
"182 315 OFFCURVE",
"182 298 CURVE SMOOTH",
"182 271 OFFCURVE",
"157 258 OFFCURVE",
"106 258 CURVE SMOOTH",
"30 258 LINE",
"30 0 LINE",
"226 0 LINE SMOOTH",
"429 0 OFFCURVE",
"530 89 OFFCURVE",
"530 268 CURVE SMOOTH",
"530 311 OFFCURVE",
"513 390 OFFCURVE",
"478 505 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\01223 11 2 1 4 1 76 0 2 0 4 1 2 4 105 0 6 6 5 95 0 5 5 17 77 0 1 1 0 97 3 1 0 0 19 0 78 17 20 34 18 37 33 35 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1797;
unicode = 1797;
},
{
glyphname = uni1798;
lastChange = "2020-01-28 08:18:17 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1160 LINE",
"880 1160 LINE SMOOTH",
"741 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE",
"822 679 LINE",
"478 679 LINE",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"508 932 LINE",
"508 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE"
);
},
{
closed = 1;
nodes = (
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 451 LINE",
"822 451 LINE",
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\01236 29 28 19 12 11 6 2 4 1 76 8 1 2 0 1 0 2 1 103 7 1 4 4 3 95 6 1 3 3 17 77 0 0 0 5 97 0 5 5 19 5 78 10 9 35 34 33 31 26 24 18 17 16 14 9 41 10 40 18 34 9 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1798;
unicode = 1798;
},
{
glyphname = uni1799;
lastChange = "2020-01-28 08:27:22 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"792 323 LINE SMOOTH",
"792 260 OFFCURVE",
"740 228 OFFCURVE",
"635 228 CURVE SMOOTH",
"530 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 932 LINE",
"600 932 LINE",
"600 1160 LINE",
"110 1160 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"285 0 OFFCURVE",
"635 0 CURVE SMOOTH",
"792 0 OFFCURVE",
"905 30 OFFCURVE",
"976 91 CURVE",
"1047 30 OFFCURVE",
"1154 0 OFFCURVE",
"1297 0 CURVE SMOOTH",
"1634 0 OFFCURVE",
"1802 108 OFFCURVE",
"1802 323 CURVE SMOOTH",
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE",
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1360 1160 OFFCURVE",
"1284 1084 OFFCURVE",
"1284 932 CURVE SMOOTH",
"1284 827 LINE",
"1434 704 LINE",
"1434 323 LINE SMOOTH",
"1434 260 OFFCURVE",
"1388 228 OFFCURVE",
"1297 228 CURVE SMOOTH",
"1206 228 OFFCURVE",
"1160 260 OFFCURVE",
"1160 323 CURVE SMOOTH",
"1160 704 LINE SMOOTH",
"1160 749 OFFCURVE",
"1135 790 OFFCURVE",
"1085 826 CURVE SMOOTH",
"1010 880 LINE",
"1010 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"920 1160 LINE SMOOTH",
"768 1160 OFFCURVE",
"692 1094 OFFCURVE",
"692 962 CURVE SMOOTH",
"692 827 LINE",
"792 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\01247 25 18 17 8 1 6 2 1 33 1 5 2 2 76 8 4 2 1 1 0 95 7 3 2 0 0 17 77 9 1 2 2 5 97 6 1 5 5 19 5 78 45 43 17 18 34 38 17 37 38 17 35 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni1799;
unicode = 1799;
},
{
glyphname = uni179A;
lastChange = "2020-01-28 08:28:11 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 298 LINE SMOOTH",
"160 271 OFFCURVE",
"143 258 OFFCURVE",
"108 258 CURVE SMOOTH",
"20 258 LINE",
"20 0 LINE",
"198 0 LINE SMOOTH",
"418 0 OFFCURVE",
"528 99 OFFCURVE",
"528 298 CURVE SMOOTH",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01220 8 1 3 3 1 1 76 0 1 1 0 95 0 0 0 17 77 0 3 3 2 97 0 2 2 19 2 78 33 38 17 35 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni179A;
unicode = 179A;
},
{
glyphname = uni179B;
lastChange = "2020-01-28 08:29:48 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE",
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1360 1160 OFFCURVE",
"1284 1084 OFFCURVE",
"1284 932 CURVE SMOOTH",
"1284 827 LINE",
"1434 704 LINE",
"1434 323 LINE SMOOTH",
"1434 260 OFFCURVE",
"1385 228 OFFCURVE",
"1287 228 CURVE SMOOTH",
"1189 228 OFFCURVE",
"1140 260 OFFCURVE",
"1140 323 CURVE SMOOTH",
"1140 807 LINE SMOOTH",
"1140 1042 OFFCURVE",
"968 1160 OFFCURVE",
"625 1160 CURVE SMOOTH",
"282 1160 OFFCURVE",
"110 1042 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 807 LINE SMOOTH",
"478 890 OFFCURVE",
"527 932 OFFCURVE",
"625 932 CURVE SMOOTH",
"723 932 OFFCURVE",
"772 890 OFFCURVE",
"772 807 CURVE SMOOTH",
"772 323 LINE SMOOTH",
"772 108 OFFCURVE",
"944 0 OFFCURVE",
"1287 0 CURVE SMOOTH",
"1630 0 OFFCURVE",
"1802 108 OFFCURVE",
"1802 323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01236 29 28 3 2 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0127 1 1 1 4 97 6 1 4 4 17 77 5 1 2 2 0 97 3 1 0 0 19 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0127 1 1 1 4 97 6 1 4 4 17 77 0 2 2 0 97 3 1 0 0 19 77 0 5 5 0 97 3 1 0 0 19 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 37 35 35 33 35 35 33 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni179B;
unicode = 179B;
},
{
glyphname = uni179C;
lastChange = "2020-01-28 08:30:33 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 1157 LINE",
"67 1146 OFFCURVE",
"20 1081 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE",
"160 298 LINE SMOOTH",
"160 271 OFFCURVE",
"143 258 OFFCURVE",
"108 258 CURVE SMOOTH",
"20 258 LINE",
"20 0 LINE",
"198 0 LINE SMOOTH",
"418 0 OFFCURVE",
"528 99 OFFCURVE",
"528 298 CURVE SMOOTH",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1340 LINE",
"160 1340 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\01221 1 1 0 18 17 5 3 3 1 2 76 0 0 0 1 3 0 1 103 0 3 3 2 97 0 2 2 19 2 78 33 38 17 17 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni179C;
unicode = 179C;
},
{
glyphname = uni179D;
lastChange = "2020-01-28 08:31:51 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 1160 LINE",
"110 932 LINE",
"1190 932 LINE",
"1190 1160 LINE"
);
},
{
closed = 1;
nodes = (
"1190 420 LINE",
"1190 487 LINE SMOOTH",
"1190 702 OFFCURVE",
"1010 810 OFFCURVE",
"650 810 CURVE SMOOTH",
"290 810 OFFCURVE",
"110 702 OFFCURVE",
"110 487 CURVE SMOOTH",
"110 0 LINE",
"478 0 LINE",
"478 80 LINE",
"483 87 OFFCURVE",
"489 94 OFFCURVE",
"493 102 CURVE",
"532 158 OFFCURVE",
"550 183 OFFCURVE",
"590 200 CURVE SMOOTH",
"609 208 OFFCURVE",
"635 212 OFFCURVE",
"666 212 CURVE SMOOTH",
"700 212 LINE",
"700 400 LINE",
"662 400 LINE SMOOTH",
"576 400 OFFCURVE",
"515 374 OFFCURVE",
"478 321 CURVE",
"478 487 LINE SMOOTH",
"478 557 OFFCURVE",
"535 592 OFFCURVE",
"650 592 CURVE SMOOTH",
"765 592 OFFCURVE",
"822 557 OFFCURVE",
"822 487 CURVE SMOOTH",
"822 420 LINE",
"744 420 LINE",
"744 192 LINE",
"822 192 LINE",
"822 0 LINE",
"1190 0 LINE",
"1190 192 LINE",
"1260 192 LINE",
"1260 420 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */\0129 1 0 1 17 1 5 0 2 76 0 6 0 2 1 6 2 105 7 3 2 1 8 4 12 3 0 5 1 0 103 0 11 11 10 95 0 10 10 17 77 9 1 5 5 19 5 78 1 0 36 35 34 33 30 29 28 27 26 25 23 21 19 18 15 13 12 10 7 5 3 2 0 32 1 31 13 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni179D;
unicode = 179D;
},
{
glyphname = uni179E;
lastChange = "2020-01-28 08:32:42 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 640 LINE",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"880 1160 LINE SMOOTH",
"741 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE",
"822 640 LINE",
"724 640 LINE",
"724 412 LINE",
"822 412 LINE",
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"508 932 LINE",
"508 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 412 LINE",
"1240 412 LINE",
"1240 640 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */\01230 23 22 9 2 1 6 2 1 1 76 9 1 2 8 1 3 7 2 3 103 6 1 1 1 0 95 5 1 0 0 17 77 0 7 7 4 97 0 4 4 19 4 78 42 41 18 38 17 37 34 17 21 17 36 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni179E;
unicode = 179E;
},
{
glyphname = uni179F;
lastChange = "2020-01-28 08:34:08 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1360 1160 OFFCURVE",
"1284 1084 OFFCURVE",
"1284 932 CURVE SMOOTH",
"1284 827 LINE",
"1434 704 LINE",
"1434 323 LINE SMOOTH",
"1434 260 OFFCURVE",
"1385 228 OFFCURVE",
"1287 228 CURVE SMOOTH",
"1189 228 OFFCURVE",
"1140 260 OFFCURVE",
"1140 323 CURVE SMOOTH",
"1140 490 LINE SMOOTH",
"1140 697 OFFCURVE",
"982 804 OFFCURVE",
"666 810 CURVE",
"651 838 OFFCURVE",
"610 870 OFFCURVE",
"542 908 CURVE",
"542 932 LINE",
"832 932 LINE",
"832 1160 LINE",
"452 1160 LINE SMOOTH",
"307 1160 OFFCURVE",
"234 1094 OFFCURVE",
"234 962 CURVE SMOOTH",
"234 867 LINE",
"348 781 LINE",
"189 736 OFFCURVE",
"110 638 OFFCURVE",
"110 487 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 487 LINE SMOOTH",
"478 577 OFFCURVE",
"527 622 OFFCURVE",
"625 622 CURVE SMOOTH",
"723 622 OFFCURVE",
"772 577 OFFCURVE",
"772 487 CURVE SMOOTH",
"772 323 LINE SMOOTH",
"772 108 OFFCURVE",
"944 0 OFFCURVE",
"1287 0 CURVE SMOOTH",
"1630 0 OFFCURVE",
"1802 108 OFFCURVE",
"1802 323 CURVE SMOOTH",
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01226 19 8 1 4 2 1 18 1 7 2 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 0 7 3 2 7 105 5 1 1 1 0 95 4 1 0 0 17 77 8 1 3 3 6 97 9 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 2 0 7 8 2 7 105 5 1 1 1 0 95 4 1 0 0 17 77 0 8 8 6 97 9 1 6 6 19 77 0 3 3 6 97 9 1 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01246 44 35 35 38 17 37 35 19 17 35 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni179F;
unicode = 179F;
},
{
glyphname = uni17A0;
lastChange = "2020-01-28 08:34:54 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"282 0 OFFCURVE",
"625 0 CURVE SMOOTH",
"968 0 OFFCURVE",
"1140 108 OFFCURVE",
"1140 323 CURVE SMOOTH",
"1140 807 LINE SMOOTH",
"1140 890 OFFCURVE",
"1189 932 OFFCURVE",
"1287 932 CURVE SMOOTH",
"1385 932 OFFCURVE",
"1434 890 OFFCURVE",
"1434 807 CURVE SMOOTH",
"1434 0 LINE",
"1802 0 LINE",
"1802 807 LINE SMOOTH",
"1802 1042 OFFCURVE",
"1630 1160 OFFCURVE",
"1287 1160 CURVE SMOOTH",
"944 1160 OFFCURVE",
"772 1042 OFFCURVE",
"772 807 CURVE SMOOTH",
"772 323 LINE SMOOTH",
"772 240 OFFCURVE",
"723 198 OFFCURVE",
"625 198 CURVE SMOOTH",
"527 198 OFFCURVE",
"478 240 OFFCURVE",
"478 323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\01230 23 22 3 0 3 1 76 6 1 3 3 1 97 5 1 1 1 17 77 0 0 0 2 97 4 1 2 2 19 2 78 17 37 35 34 18 35 33 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni17A0;
unicode = 17A0;
},
{
glyphname = uni17A1;
lastChange = "2020-01-28 08:36:19 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"730 317 LINE SMOOTH",
"730 238 OFFCURVE",
"701 198 OFFCURVE",
"644 198 CURVE SMOOTH",
"587 198 OFFCURVE",
"558 238 OFFCURVE",
"558 317 CURVE SMOOTH",
"558 357 LINE",
"190 357 LINE",
"190 317 LINE SMOOTH",
"190 106 OFFCURVE",
"341 0 OFFCURVE",
"644 0 CURVE SMOOTH",
"947 0 OFFCURVE",
"1098 106 OFFCURVE",
"1098 317 CURVE SMOOTH",
"1098 444 LINE",
"1159 471 OFFCURVE",
"1190 510 OFFCURVE",
"1190 561 CURVE SMOOTH",
"1190 598 LINE SMOOTH",
"1190 659 OFFCURVE",
"1127 690 OFFCURVE",
"1000 690 CURVE SMOOTH",
"863 690 OFFCURVE",
"788 672 OFFCURVE",
"774 636 CURVE",
"740 635 OFFCURVE",
"699 634 OFFCURVE",
"650 634 CURVE",
"535 647 OFFCURVE",
"478 704 OFFCURVE",
"478 803 CURVE SMOOTH",
"478 889 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE",
"1190 813 LINE",
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1041 OFFCURVE",
"110 803 CURVE SMOOTH",
"110 545 OFFCURVE",
"290 416 OFFCURVE",
"650 416 CURVE SMOOTH",
"683 416 OFFCURVE",
"709 417 OFFCURVE",
"730 419 CURVE"
);
},
{
closed = 1;
nodes = (
"1802 -500 LINE",
"1802 704 LINE SMOOTH",
"1802 749 OFFCURVE",
"1769 790 OFFCURVE",
"1702 826 CURVE SMOOTH",
"1602 880 LINE",
"1602 932 LINE",
"1802 932 LINE",
"1802 1160 LINE",
"1512 1160 LINE SMOOTH",
"1367 1160 OFFCURVE",
"1294 1084 OFFCURVE",
"1294 932 CURVE SMOOTH",
"1294 827 LINE",
"1434 704 LINE",
"1434 -243 LINE",
"1313 -111 LINE",
"1190 -244 LINE",
"1190 -50 LINE",
"722 -50 LINE",
"722 -254 LINE",
"822 -254 LINE",
"822 -500 LINE",
"1221 -500 LINE",
"1313 -395 LINE",
"1404 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01220 13 2 8 5 12 1 11 8 63 50 2 6 10 10 1 2 3 11 9 2 3 0 2 5 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 67 values pushed */\0120 8 5 11 5 8 114 0 11 10 5 11 10 126 0 13 6 14 14 13 114 0 10 0 6 13 10 6 105 0 3 0 2 0 3 2 103 9 1 5 5 4 97 7 1 4 4 17 77 0 14 14 12 98 0 12 12 19 77 1 15 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 68 values pushed */\0120 8 5 11 5 8 114 0 11 10 5 11 10 126 0 13 6 14 6 13 14 128 0 10 0 6 13 10 6 105 0 3 0 2 0 3 2 103 9 1 5 5 4 97 7 1 4 4 17 77 0 14 14 12 98 0 12 12 19 77 1 15 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 8 5 11 5 8 11 128 0 11 10 5 11 10 126 0 13 6 14 6 13 14 128 0 10 0 6 13 10 6 105 9 1 5 5 4 97 7 1 4 4 17 77 0 14 14 12 98 0 12 12 19 77 0 2 2 3 95 0 3 3 18 77 1 15 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 71 values pushed */\0120 8 5 11 5 8 11 128 0 11 10 5 11 10 126 0 13 6 14 6 13 14 128 1 15 2 0 2 0 134 0 10 0 6 13 10 6 105 9 1 5 5 4 97 7 1 4 4 17 77 0 14 14 12 98 0 12 12 19 77 0 2 2 3 95 0 3 3 18 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 37 values pushed */\0121 0 61 59 57 56 54 52 46 44 43 40 38 36 35 34 33 31 29 27 19 18 17 15 8 7 6 5 4 3 0 25 1 24 16 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1912;
}
);
note = uni17A1;
unicode = 17A1;
},
{
glyphname = uni17A2;
lastChange = "2020-01-28 08:38:00 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 298 LINE SMOOTH",
"110 271 OFFCURVE",
"103 258 OFFCURVE",
"90 258 CURVE SMOOTH",
"20 258 LINE",
"20 0 LINE",
"160 0 LINE SMOOTH",
"372 0 OFFCURVE",
"478 99 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 416 LINE",
"822 416 LINE",
"822 298 LINE SMOOTH",
"822 271 OFFCURVE",
"809 258 OFFCURVE",
"782 258 CURVE SMOOTH",
"722 258 LINE",
"722 0 LINE",
"872 0 LINE SMOOTH",
"1084 0 OFFCURVE",
"1190 99 OFFCURVE",
"1190 298 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"900 1160 LINE SMOOTH",
"748 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE",
"822 644 LINE",
"478 644 LINE",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */\01244 22 15 14 8 1 6 2 1 1 76 0 2 0 7 6 2 7 103 4 1 1 1 0 95 3 1 0 0 17 77 9 1 6 6 5 97 8 1 5 5 19 5 78 42 40 34 18 33 38 17 36 21 17 35 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17A2;
unicode = 17A2;
},
{
glyphname = uni17A3;
lastChange = "2020-01-28 08:38:17 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 298 LINE SMOOTH",
"110 271 OFFCURVE",
"103 258 OFFCURVE",
"90 258 CURVE SMOOTH",
"20 258 LINE",
"20 0 LINE",
"160 0 LINE SMOOTH",
"372 0 OFFCURVE",
"478 99 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 416 LINE",
"822 416 LINE",
"822 298 LINE SMOOTH",
"822 271 OFFCURVE",
"809 258 OFFCURVE",
"782 258 CURVE SMOOTH",
"722 258 LINE",
"722 0 LINE",
"872 0 LINE SMOOTH",
"1084 0 OFFCURVE",
"1190 99 OFFCURVE",
"1190 298 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"900 1160 LINE SMOOTH",
"748 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE",
"822 644 LINE",
"478 644 LINE",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */\01244 22 15 14 8 1 6 2 1 1 76 0 2 0 7 6 2 7 103 4 1 1 1 0 95 3 1 0 0 17 77 9 1 6 6 5 97 8 1 5 5 19 5 78 42 40 34 18 33 38 17 36 21 17 35 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17A3;
unicode = 17A3;
},
{
glyphname = uni17A4;
lastChange = "2020-01-28 08:39:23 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"900 1160 LINE SMOOTH",
"748 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE",
"822 644 LINE",
"478 644 LINE",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 298 LINE SMOOTH",
"110 271 OFFCURVE",
"103 258 OFFCURVE",
"90 258 CURVE SMOOTH",
"20 258 LINE",
"20 0 LINE",
"160 0 LINE SMOOTH",
"372 0 OFFCURVE",
"478 99 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 416 LINE",
"822 416 LINE",
"822 298 LINE SMOOTH",
"822 271 OFFCURVE",
"809 258 OFFCURVE",
"782 258 CURVE SMOOTH",
"722 258 LINE",
"722 0 LINE",
"872 0 LINE SMOOTH",
"1084 0 OFFCURVE",
"1190 99 OFFCURVE",
"1190 298 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1308 932 LINE SMOOTH",
"1376 932 OFFCURVE",
"1410 890 OFFCURVE",
"1410 807 CURVE SMOOTH",
"1410 0 LINE",
"1778 0 LINE",
"1778 807 LINE SMOOTH",
"1778 1042 OFFCURVE",
"1651 1160 OFFCURVE",
"1398 1160 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */\01246 45 39 32 31 9 6 10 2 1 76 0 10 0 5 4 10 5 103 9 1 2 2 0 95 8 11 2 0 0 17 77 7 1 4 4 1 97 6 3 2 1 1 19 1 78 1 0 44 43 38 37 36 34 29 27 26 24 22 21 19 17 16 14 8 6 4 3 0 51 1 48 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1888;
}
);
note = uni17A4;
unicode = 17A4;
},
{
glyphname = uni17A5;
lastChange = "2020-01-28 08:41:08 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"388 834 LINE",
"348 890 LINE",
"348 932 LINE",
"385 932 LINE SMOOTH",
"405 932 OFFCURVE",
"458 921 OFFCURVE",
"543 898 CURVE SMOOTH",
"628 875 OFFCURVE",
"713 866 OFFCURVE",
"800 872 CURVE SMOOTH",
"1060 891 OFFCURVE",
"1190 1002 OFFCURVE",
"1190 1205 CURVE SMOOTH",
"1190 1280 LINE",
"822 1280 LINE",
"822 1205 LINE SMOOTH",
"822 1134 OFFCURVE",
"791 1099 OFFCURVE",
"730 1100 CURVE SMOOTH",
"623 1102 OFFCURVE",
"542 1113 OFFCURVE",
"486 1132 CURVE SMOOTH",
"430 1151 OFFCURVE",
"386 1160 OFFCURVE",
"355 1160 CURVE SMOOTH",
"258 1160 LINE SMOOTH",
"106 1160 OFFCURVE",
"30 1097 OFFCURVE",
"30 972 CURVE SMOOTH",
"30 847 LINE",
"140 714 LINE"
);
},
{
closed = 1;
nodes = (
"478 487 LINE SMOOTH",
"478 550 OFFCURVE",
"539 592 OFFCURVE",
"650 592 CURVE SMOOTH",
"761 592 OFFCURVE",
"822 550 OFFCURVE",
"822 487 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 487 LINE SMOOTH",
"1190 702 OFFCURVE",
"1010 810 OFFCURVE",
"650 810 CURVE SMOOTH",
"290 810 OFFCURVE",
"110 702 OFFCURVE",
"110 487 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01242 1 8 9 43 23 2 2 8 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 5 6 7 112 0 6 0 8 2 6 8 106 0 2 0 4 0 2 4 105 0 9 9 5 97 0 5 5 17 77 0 0 0 1 97 3 1 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 7 5 7 133 0 6 0 8 2 6 8 106 0 2 0 4 0 2 4 105 0 9 9 5 97 0 5 5 17 77 0 0 0 1 97 3 1 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01241 39 34 18 33 55 34 18 35 33 33 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17A5;
unicode = 17A5;
},
{
glyphname = uni17A6;
lastChange = "2020-01-28 08:51:46 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 -274 OFFCURVE",
"527 -260 OFFCURVE",
"625 -260 CURVE SMOOTH",
"723 -260 OFFCURVE",
"772 -274 OFFCURVE",
"772 -303 CURVE SMOOTH",
"772 -434 OFFCURVE",
"952 -500 OFFCURVE",
"1312 -500 CURVE SMOOTH",
"1631 -500 OFFCURVE",
"1790 -420 OFFCURVE",
"1790 -260 CURVE SMOOTH",
"1790 1080 LINE SMOOTH",
"1790 1360 OFFCURVE",
"1641 1500 OFFCURVE",
"1342 1500 CURVE SMOOTH",
"1272 1500 OFFCURVE",
"1205 1471 OFFCURVE",
"1142 1412 CURVE",
"1142 1730 LINE",
"774 1730 LINE",
"774 1230 LINE",
"1082 1230 LINE",
"1122 1263 OFFCURVE",
"1199 1280 OFFCURVE",
"1312 1280 CURVE SMOOTH",
"1385 1280 OFFCURVE",
"1422 1213 OFFCURVE",
"1422 1080 CURVE SMOOTH",
"1422 -260 LINE SMOOTH",
"1422 -313 OFFCURVE",
"1385 -340 OFFCURVE",
"1312 -340 CURVE SMOOTH",
"1197 -340 OFFCURVE",
"1140 -328 OFFCURVE",
"1140 -303 CURVE SMOOTH",
"1140 -148 OFFCURVE",
"968 -70 OFFCURVE",
"625 -70 CURVE SMOOTH",
"282 -70 OFFCURVE",
"110 -148 OFFCURVE",
"110 -303 CURVE SMOOTH",
"110 -500 LINE",
"584 -500 LINE",
"584 -340 LINE",
"478 -340 LINE",
"478 -303 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"772 0 LINE",
"1140 0 LINE",
"1140 807 LINE SMOOTH",
"1140 1042 OFFCURVE",
"968 1160 OFFCURVE",
"625 1160 CURVE SMOOTH",
"282 1160 OFFCURVE",
"110 1042 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 807 LINE SMOOTH",
"478 890 OFFCURVE",
"527 932 OFFCURVE",
"625 932 CURVE SMOOTH",
"723 932 OFFCURVE",
"772 890 OFFCURVE",
"772 807 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01224 1 5 8 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 8 0 5 6 8 5 105 0 7 0 6 13 7 6 103 0 3 15 1 0 1 3 0 105 0 10 10 13 97 0 13 13 17 77 0 11 11 12 97 14 1 12 12 19 77 4 1 1 1 2 97 9 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 61 values pushed */\0120 8 0 5 6 8 5 105 0 7 0 6 13 7 6 103 0 10 10 13 97 0 13 13 17 77 0 11 11 12 97 14 1 12 12 19 77 15 1 0 0 3 97 0 3 3 18 77 4 1 1 1 2 97 9 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01250 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 63 values pushed */\0120 8 0 5 6 8 5 105 0 7 0 6 13 7 6 103 0 1 4 2 1 87 0 4 9 1 2 4 2 101 0 10 10 13 97 0 13 13 17 77 0 11 11 12 97 14 1 12 12 19 77 15 1 0 0 3 97 0 3 3 18 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 8 0 5 6 8 5 105 0 7 0 6 13 7 6 103 0 3 15 1 0 1 3 0 105 0 1 4 2 1 87 0 4 9 1 2 4 2 101 0 10 10 13 97 0 13 13 17 77 0 11 11 12 97 14 1 12 12 19 12 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 37 values pushed */\0121 0 57 56 54 52 49 47 46 44 41 39 32 30 27 25 23 22 21 20 19 17 14 12 10 8 6 5 4 3 0 36 1 34 16 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
}
);
note = uni17A6;
unicode = 17A6;
},
{
glyphname = uni17A7;
lastChange = "2020-01-28 08:52:30 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 721 OFFCURVE",
"203 675 OFFCURVE",
"388 675 CURVE SMOOTH",
"530 675 LINE",
"530 813 LINE",
"478 813 LINE",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 680 OFFCURVE",
"718 614 OFFCURVE",
"510 614 CURVE SMOOTH",
"243 614 OFFCURVE",
"110 505 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"629 0 OFFCURVE",
"726 28 OFFCURVE",
"822 85 CURVE",
"822 -50 LINE",
"1190 -50 LINE",
"1190 400 LINE",
"822 400 LINE",
"822 317 LINE",
"749 251 OFFCURVE",
"651 218 OFFCURVE",
"530 218 CURVE SMOOTH",
"495 218 OFFCURVE",
"478 241 OFFCURVE",
"478 287 CURVE SMOOTH",
"478 360 OFFCURVE",
"489 396 OFFCURVE",
"510 396 CURVE SMOOTH",
"963 396 OFFCURVE",
"1190 535 OFFCURVE",
"1190 813 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0128 1 1 0 13 1 4 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 2 5 0 5 2 114 0 3 4 3 134 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 5 0 5 2 0 128 0 3 4 3 134 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 5 0 5 2 0 128 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 77 0 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 5 0 5 2 0 128 0 3 4 3 134 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01233 31 33 17 34 34 34 17 18 34 33 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17A7;
unicode = 17A7;
},
{
glyphname = uni17A8;
lastChange = "2020-01-28 08:53:05 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 721 OFFCURVE",
"203 675 OFFCURVE",
"388 675 CURVE SMOOTH",
"530 675 LINE",
"530 813 LINE",
"478 813 LINE",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 680 OFFCURVE",
"718 614 OFFCURVE",
"510 614 CURVE SMOOTH",
"243 614 OFFCURVE",
"110 505 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"629 0 OFFCURVE",
"726 28 OFFCURVE",
"822 85 CURVE",
"822 -50 LINE",
"1190 -50 LINE",
"1190 400 LINE",
"822 400 LINE",
"822 317 LINE",
"749 251 OFFCURVE",
"651 218 OFFCURVE",
"530 218 CURVE SMOOTH",
"495 218 OFFCURVE",
"478 241 OFFCURVE",
"478 287 CURVE SMOOTH",
"478 360 OFFCURVE",
"489 396 OFFCURVE",
"510 396 CURVE SMOOTH",
"963 396 OFFCURVE",
"1190 535 OFFCURVE",
"1190 813 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"110 1252 LINE",
"1190 1252 LINE",
"1190 1480 LINE",
"110 1480 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0128 1 1 0 13 1 4 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\0120 2 5 0 5 2 114 0 3 4 3 134 0 10 0 11 9 10 11 103 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 2 5 0 5 2 0 128 0 3 4 3 134 0 10 0 11 9 10 11 103 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 2 5 0 5 2 0 128 0 10 0 11 9 10 11 103 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 77 0 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 58 values pushed */\0120 2 5 0 5 2 0 128 0 3 4 3 134 0 10 0 11 9 10 11 103 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01239 38 37 36 33 31 33 17 34 34 34 17 18 34 33 12 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17A8;
unicode = 17A8;
},
{
glyphname = uni17A9;
lastChange = "2020-01-28 08:53:41 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 721 OFFCURVE",
"203 675 OFFCURVE",
"388 675 CURVE SMOOTH",
"530 675 LINE",
"530 813 LINE",
"478 813 LINE",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 680 OFFCURVE",
"718 614 OFFCURVE",
"510 614 CURVE SMOOTH",
"243 614 OFFCURVE",
"110 505 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"629 0 OFFCURVE",
"726 28 OFFCURVE",
"822 85 CURVE",
"822 -50 LINE",
"1130 -50 LINE",
"1130 400 LINE",
"822 400 LINE",
"822 317 LINE",
"749 251 OFFCURVE",
"651 218 OFFCURVE",
"530 218 CURVE SMOOTH",
"495 218 OFFCURVE",
"478 241 OFFCURVE",
"478 287 CURVE SMOOTH",
"478 360 OFFCURVE",
"489 396 OFFCURVE",
"510 396 CURVE SMOOTH",
"963 396 OFFCURVE",
"1190 535 OFFCURVE",
"1190 813 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1212 480 LINE",
"1212 -50 LINE",
"1390 -50 LINE",
"1390 480 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0128 1 1 0 13 1 4 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 2 11 0 5 2 114 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 12 1 11 10 1 3 11 3 99 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 2 11 0 11 2 0 128 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 12 1 11 10 1 3 11 3 99 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\0120 2 11 0 11 2 0 128 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 77 12 1 11 11 3 95 10 1 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 2 11 0 11 2 0 128 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 12 1 11 10 1 3 11 3 99 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01236 36 36 39 36 39 38 37 33 31 33 17 34 34 34 17 18 34 33 13 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17A9;
unicode = 17A9;
},
{
glyphname = uni17AA;
lastChange = "2020-01-28 08:55:16 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"388 1204 LINE",
"348 1260 LINE",
"348 1302 LINE",
"385 1302 LINE SMOOTH",
"405 1302 OFFCURVE",
"458 1291 OFFCURVE",
"543 1268 CURVE SMOOTH",
"628 1245 OFFCURVE",
"713 1236 OFFCURVE",
"800 1242 CURVE SMOOTH",
"1060 1260 OFFCURVE",
"1190 1372 OFFCURVE",
"1190 1575 CURVE SMOOTH",
"1190 1650 LINE",
"822 1650 LINE",
"822 1575 LINE SMOOTH",
"822 1504 OFFCURVE",
"791 1469 OFFCURVE",
"730 1470 CURVE SMOOTH",
"623 1472 OFFCURVE",
"542 1483 OFFCURVE",
"486 1502 CURVE SMOOTH",
"430 1521 OFFCURVE",
"386 1530 OFFCURVE",
"355 1530 CURVE SMOOTH",
"258 1530 LINE SMOOTH",
"106 1530 OFFCURVE",
"30 1467 OFFCURVE",
"30 1342 CURVE SMOOTH",
"30 1217 LINE",
"140 1084 LINE"
);
},
{
closed = 1;
nodes = (
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 721 OFFCURVE",
"203 675 OFFCURVE",
"388 675 CURVE SMOOTH",
"530 675 LINE",
"530 813 LINE",
"478 813 LINE",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 680 OFFCURVE",
"718 614 OFFCURVE",
"510 614 CURVE SMOOTH",
"243 614 OFFCURVE",
"110 505 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"629 0 OFFCURVE",
"726 28 OFFCURVE",
"822 85 CURVE",
"822 -50 LINE",
"1190 -50 LINE",
"1190 400 LINE",
"822 400 LINE",
"822 317 LINE",
"749 251 OFFCURVE",
"651 218 OFFCURVE",
"530 218 CURVE SMOOTH",
"495 218 OFFCURVE",
"478 241 OFFCURVE",
"478 287 CURVE SMOOTH",
"478 360 OFFCURVE",
"489 396 OFFCURVE",
"510 396 CURVE SMOOTH",
"963 396 OFFCURVE",
"1190 535 OFFCURVE",
"1190 813 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01256 1 13 14 57 37 2 9 13 8 1 1 0 13 1 4 1 4 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 12 10 11 12 112 0 2 5 0 5 2 114 0 3 4 3 134 0 10 0 14 13 10 14 105 0 11 0 13 9 11 13 106 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 70 values pushed */\0120 12 10 12 133 0 2 5 0 5 2 114 0 3 4 3 134 0 10 0 14 13 10 14 105 0 11 0 13 9 11 13 106 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 12 10 12 133 0 2 5 0 5 2 0 128 0 3 4 3 134 0 10 0 14 13 10 14 105 0 11 0 13 9 11 13 106 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 12 10 12 133 0 2 5 0 5 2 0 128 0 10 0 14 13 10 14 105 0 11 0 13 9 11 13 106 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 77 0 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 71 values pushed */\0120 12 10 12 133 0 2 5 0 5 2 0 128 0 3 4 3 134 0 10 0 14 13 10 14 105 0 11 0 13 9 11 13 106 0 7 0 8 5 7 8 105 0 5 0 0 1 5 0 105 0 6 6 9 97 0 9 9 17 77 0 1 1 4 97 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01255 53 52 50 48 47 45 43 42 39 33 31 33 17 34 34 34 17 18 34 33 15 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17AA;
unicode = 17AA;
},
{
glyphname = uni17AB;
lastChange = "2020-01-28 08:56:19 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"508 932 LINE",
"508 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"880 1160 LINE SMOOTH",
"741 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE"
);
},
{
closed = 1;
nodes = (
"110 -295 LINE",
"110 -500 LINE",
"500 -500 LINE SMOOTH",
"960 -500 OFFCURVE",
"1190 -408 OFFCURVE",
"1190 -224 CURVE SMOOTH",
"1190 -108 OFFCURVE",
"1110 -50 OFFCURVE",
"950 -50 CURVE SMOOTH",
"770 -50 LINE",
"770 -224 LINE",
"822 -224 LINE",
"822 -271 OFFCURVE",
"715 -295 OFFCURVE",
"500 -295 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01248 39 32 31 22 15 6 9 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 2 0 1 0 2 1 103 8 1 5 5 4 95 7 1 4 4 17 77 0 9 9 6 97 0 6 6 19 77 10 1 0 0 3 95 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0128 1 5 5 4 95 7 1 4 4 17 77 0 9 9 6 97 0 6 6 19 77 0 1 1 2 95 0 2 2 18 77 10 1 0 0 3 95 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\01210 1 0 0 3 0 3 99 8 1 5 5 4 95 7 1 4 4 17 77 0 9 9 6 97 0 6 6 19 77 0 1 1 2 95 0 2 2 18 1 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\0122 0 46 44 38 37 36 34 29 27 21 20 19 17 11 9 7 5 4 3 0 13 2 12 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17AB;
unicode = 17AB;
},
{
glyphname = uni17AC;
lastChange = "2020-01-28 08:57:02 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 704 LINE SMOOTH",
"1190 749 OFFCURVE",
"1157 790 OFFCURVE",
"1090 826 CURVE SMOOTH",
"990 880 LINE",
"990 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"880 1160 LINE SMOOTH",
"741 1160 OFFCURVE",
"672 1084 OFFCURVE",
"672 932 CURVE SMOOTH",
"672 827 LINE",
"822 704 LINE",
"822 323 LINE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"508 932 LINE",
"508 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 323 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1225 -295 OFFCURVE",
"1207 -287 OFFCURVE",
"1185 -270 CURVE",
"1188 -255 OFFCURVE",
"1190 -240 OFFCURVE",
"1190 -224 CURVE SMOOTH",
"1190 -108 OFFCURVE",
"1110 -50 OFFCURVE",
"950 -50 CURVE SMOOTH",
"770 -50 LINE",
"770 -224 LINE",
"822 -224 LINE",
"822 -271 OFFCURVE",
"715 -295 OFFCURVE",
"500 -295 CURVE SMOOTH",
"110 -295 LINE",
"110 -500 LINE",
"500 -500 LINE SMOOTH",
"727 -500 OFFCURVE",
"898 -478 OFFCURVE",
"1013 -433 CURVE",
"1071 -478 OFFCURVE",
"1137 -500 OFFCURVE",
"1210 -500 CURVE SMOOTH",
"1290 -500 LINE",
"1290 -295 LINE",
"1240 -295 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01257 48 41 40 31 24 6 11 7 7 1 1 0 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 5 0 4 0 5 4 103 10 1 7 7 6 95 9 1 6 6 17 77 0 11 11 8 97 0 8 8 19 77 3 1 0 0 1 97 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\01210 1 7 7 6 95 9 1 6 6 17 77 0 11 11 8 97 0 8 8 19 77 0 4 4 5 95 0 5 5 18 77 3 1 0 0 1 97 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 42 values pushed */\0123 1 0 2 1 1 0 1 101 10 1 7 7 6 95 9 1 6 6 17 77 0 11 11 8 97 0 8 8 19 77 0 4 4 5 95 0 5 5 18 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01255 53 47 46 45 43 38 17 40 33 17 33 34 33 33 12 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17AC;
unicode = 17AC;
},
{
glyphname = uni17AD;
lastChange = "2020-01-28 08:58:14 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 -295 LINE",
"110 -500 LINE",
"500 -500 LINE SMOOTH",
"960 -500 OFFCURVE",
"1190 -408 OFFCURVE",
"1190 -224 CURVE SMOOTH",
"1190 -108 OFFCURVE",
"1110 -50 OFFCURVE",
"950 -50 CURVE SMOOTH",
"770 -50 LINE",
"770 -224 LINE",
"822 -224 LINE",
"822 -271 OFFCURVE",
"715 -295 OFFCURVE",
"500 -295 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 833 LINE SMOOTH",
"1190 1051 OFFCURVE",
"1092 1160 OFFCURVE",
"897 1160 CURVE SMOOTH",
"820 1160 OFFCURVE",
"738 1119 OFFCURVE",
"650 1036 CURVE",
"563 1119 OFFCURVE",
"481 1160 OFFCURVE",
"405 1160 CURVE SMOOTH",
"208 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01218 1 7 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 8 7 10 7 8 10 128 0 2 0 1 0 2 1 103 9 1 7 7 4 97 5 1 4 4 17 77 0 10 10 6 97 11 1 6 6 19 77 12 1 0 0 3 95 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 8 7 10 7 8 10 128 9 1 7 7 4 97 5 1 4 4 17 77 0 10 10 6 97 11 1 6 6 19 77 0 1 1 2 95 0 2 2 18 77 12 1 0 0 3 95 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\0120 8 7 10 7 8 10 128 12 1 0 0 3 0 3 99 9 1 7 7 4 97 5 1 4 4 17 77 0 10 10 6 97 11 1 6 6 19 77 0 1 1 2 95 0 2 2 18 1 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\0122 0 44 42 41 39 36 34 32 30 28 26 24 23 21 19 17 15 11 9 7 5 4 3 0 13 2 12 13 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17AD;
unicode = 17AD;
},
{
glyphname = uni17AE;
lastChange = "2020-01-28 08:58:19 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1225 -295 OFFCURVE",
"1207 -287 OFFCURVE",
"1185 -270 CURVE",
"1188 -255 OFFCURVE",
"1190 -240 OFFCURVE",
"1190 -224 CURVE SMOOTH",
"1190 -108 OFFCURVE",
"1110 -50 OFFCURVE",
"950 -50 CURVE SMOOTH",
"770 -50 LINE",
"770 -224 LINE",
"822 -224 LINE",
"822 -271 OFFCURVE",
"715 -295 OFFCURVE",
"500 -295 CURVE SMOOTH",
"110 -295 LINE",
"110 -500 LINE",
"500 -500 LINE SMOOTH",
"727 -500 OFFCURVE",
"898 -478 OFFCURVE",
"1013 -433 CURVE",
"1071 -478 OFFCURVE",
"1137 -500 OFFCURVE",
"1210 -500 CURVE SMOOTH",
"1290 -500 LINE",
"1290 -295 LINE",
"1240 -295 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 833 LINE SMOOTH",
"1190 1051 OFFCURVE",
"1092 1160 OFFCURVE",
"897 1160 CURVE SMOOTH",
"820 1160 OFFCURVE",
"738 1119 OFFCURVE",
"650 1036 CURVE",
"563 1119 OFFCURVE",
"481 1160 OFFCURVE",
"405 1160 CURVE SMOOTH",
"208 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0124 1 3 0 41 1 9 8 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 4 3 6 3 4 6 128 0 13 0 12 8 13 12 103 5 1 3 3 0 97 1 1 0 0 17 77 0 6 6 2 97 7 1 2 2 19 77 11 1 8 8 9 97 10 1 9 9 20 9 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 4 3 6 3 4 6 128 5 1 3 3 0 97 1 1 0 0 17 77 0 6 6 2 97 7 1 2 2 19 77 0 12 12 13 95 0 13 13 18 77 11 1 8 8 9 97 10 1 9 9 20 9 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 51 values pushed */\0120 4 3 6 3 4 6 128 11 1 8 10 1 9 8 9 101 5 1 3 3 0 97 1 1 0 0 17 77 0 6 6 2 97 7 1 2 2 19 77 0 12 12 13 95 0 13 13 18 12 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01252 50 49 48 47 45 44 42 40 38 37 33 35 34 34 34 18 34 33 14 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17AE;
unicode = 17AE;
},
{
glyphname = uni17AF;
lastChange = "2020-01-28 08:59:10 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 613 LINE",
"110 0 LINE",
"509 0 LINE",
"651 160 LINE",
"792 0 LINE",
"1190 0 LINE",
"1190 827 LINE SMOOTH",
"1190 1049 OFFCURVE",
"1034 1160 OFFCURVE",
"721 1160 CURVE SMOOTH",
"590 1160 LINE SMOOTH",
"515 1160 OFFCURVE",
"478 1189 OFFCURVE",
"478 1246 CURVE SMOOTH",
"478 1440 LINE",
"110 1440 LINE",
"110 1246 LINE SMOOTH",
"110 1037 OFFCURVE",
"270 932 OFFCURVE",
"590 932 CURVE SMOOTH",
"721 932 LINE SMOOTH",
"788 932 OFFCURVE",
"822 897 OFFCURVE",
"822 827 CURVE SMOOTH",
"822 295 LINE",
"651 455 LINE",
"478 294 LINE",
"478 817 LINE",
"40 817 LINE",
"40 613 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\01223 6 5 4 4 5 0 1 76 0 3 4 3 133 0 1 7 1 0 5 1 0 103 0 2 2 4 97 0 4 4 17 77 6 1 5 5 19 5 78 1 0 25 24 22 21 19 16 14 13 11 8 3 2 0 27 1 26 8 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17AF;
unicode = 17AF;
},
{
glyphname = uni17B0;
lastChange = "2020-01-28 09:01:20 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"820 1160 OFFCURVE",
"738 1119 OFFCURVE",
"650 1036 CURVE",
"563 1119 OFFCURVE",
"481 1160 OFFCURVE",
"405 1160 CURVE SMOOTH",
"208 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 -12 LINE",
"110 -231 LINE",
"110 -346 LINE SMOOTH",
"110 -449 OFFCURVE",
"239 -501 OFFCURVE",
"496 -500 CURVE SMOOTH",
"619 -500 OFFCURVE",
"689 -456 OFFCURVE",
"706 -369 CURVE",
"777 -390 OFFCURVE",
"830 -400 OFFCURVE",
"866 -400 CURVE SMOOTH",
"1082 -400 OFFCURVE",
"1190 -349 OFFCURVE",
"1190 -247 CURVE SMOOTH",
"1190 833 LINE SMOOTH",
"1190 1051 OFFCURVE",
"1092 1160 OFFCURVE",
"897 1160 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"822 -242 OFFCURVE",
"812 -255 OFFCURVE",
"791 -255 CURVE SMOOTH",
"770 -255 OFFCURVE",
"730 -239 OFFCURVE",
"670 -207 CURVE",
"822 -159 LINE",
"822 -217 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"596 -348 OFFCURVE",
"564 -372 OFFCURVE",
"499 -370 CURVE SMOOTH",
"465 -369 OFFCURVE",
"438 -349 OFFCURVE",
"418 -312 CURVE",
"418 -294 LINE",
"596 -235 LINE",
"596 -299 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01253 1 4 9 27 26 13 2 1 5 0 8 21 14 2 1 0 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 5 4 7 4 5 7 128 0 0 0 2 3 0 2 105 6 1 4 4 9 97 10 1 9 9 17 77 0 7 7 8 97 0 8 8 19 77 0 1 1 3 97 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 4 7 4 5 7 128 0 0 0 2 3 0 2 105 0 1 0 3 1 3 101 6 1 4 4 9 97 10 1 9 9 17 77 0 7 7 8 97 0 8 8 19 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01256 54 52 50 33 35 34 34 37 34 39 36 35 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17B0;
unicode = 17B0;
},
{
glyphname = uni17B1;
lastChange = "2020-01-28 09:02:35 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"790 1312 LINE SMOOTH",
"885 1312 OFFCURVE",
"945 1255 OFFCURVE",
"972 1142 CURVE",
"1260 1142 LINE",
"1260 1407 OFFCURVE",
"1123 1540 OFFCURVE",
"850 1540 CURVE SMOOTH",
"380 1540 LINE SMOOTH",
"160 1540 OFFCURVE",
"50 1447 OFFCURVE",
"50 1260 CURVE SMOOTH",
"50 1217 LINE",
"150 1094 LINE",
"154 1094 LINE",
"452 1206 LINE",
"437 1223 OFFCURVE",
"419 1241 OFFCURVE",
"398 1260 CURVE",
"398 1295 OFFCURVE",
"419 1312 OFFCURVE",
"460 1312 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 721 OFFCURVE",
"203 675 OFFCURVE",
"388 675 CURVE SMOOTH",
"530 675 LINE",
"530 813 LINE",
"478 813 LINE",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 680 OFFCURVE",
"718 614 OFFCURVE",
"510 614 CURVE SMOOTH",
"243 614 OFFCURVE",
"110 505 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"629 0 OFFCURVE",
"726 28 OFFCURVE",
"822 85 CURVE",
"822 -50 LINE",
"1190 -50 LINE",
"1190 400 LINE",
"822 400 LINE",
"822 317 LINE",
"749 251 OFFCURVE",
"651 218 OFFCURVE",
"530 218 CURVE SMOOTH",
"495 218 OFFCURVE",
"478 241 OFFCURVE",
"478 287 CURVE SMOOTH",
"478 360 OFFCURVE",
"489 396 OFFCURVE",
"510 396 CURVE SMOOTH",
"963 396 OFFCURVE",
"1190 535 OFFCURVE",
"1190 813 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0127 4 2 3 12 0 5 1 9 2 27 1 4 3 32 1 7 4 4 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 65 values pushed */\0120 2 12 9 9 2 114 0 5 8 3 8 5 114 0 6 7 6 134 0 1 13 1 0 12 1 0 103 0 10 0 11 8 10 11 105 0 8 0 3 4 8 3 105 0 9 9 12 98 0 12 12 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 67 values pushed */\0120 2 12 9 12 2 9 128 0 5 8 3 8 5 3 128 0 6 7 6 134 0 1 13 1 0 12 1 0 103 0 10 0 11 8 10 11 105 0 8 0 3 4 8 3 105 0 9 9 12 98 0 12 12 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 67 values pushed */\0120 2 12 9 12 2 9 128 0 5 8 3 8 5 3 128 0 1 13 1 0 12 1 0 103 0 10 0 11 8 10 11 105 0 8 0 3 4 8 3 105 0 9 9 12 98 0 12 12 17 77 0 4 4 7 97 0 7 7 19 77 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 67 values pushed */\0120 2 12 9 12 2 9 128 0 5 8 3 8 5 3 128 0 6 7 6 134 0 1 13 1 0 12 1 0 103 0 10 0 11 8 10 11 105 0 8 0 3 4 8 3 105 0 9 9 12 98 0 12 12 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 33 values pushed */\0121 0 52 50 48 46 45 44 43 41 39 37 35 33 31 30 29 28 26 24 22 20 14 13 12 9 0 18 1 15 14 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17B1;
unicode = 17B1;
},
{
glyphname = uni17B2;
lastChange = "2020-01-28 09:04:48 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"668 285 LINE",
"787 382 LINE",
"810 362 OFFCURVE",
"822 342 OFFCURVE",
"822 323 CURVE SMOOTH",
"822 260 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH",
"478 807 LINE SMOOTH",
"478 890 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"793 932 OFFCURVE",
"931 911 OFFCURVE",
"1024 868 CURVE",
"1140 1033 LINE",
"1047 1118 OFFCURVE",
"870 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1042 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 108 OFFCURVE",
"1190 323 CURVE SMOOTH",
"1190 384 OFFCURVE",
"1160 446 OFFCURVE",
"1100 508 CURVE",
"1190 567 LINE",
"1190 820 LINE",
"680 820 LINE",
"680 612 LINE",
"822 612 LINE",
"822 590 LINE",
"558 486 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\01218 1 4 3 19 1 1 4 31 30 7 6 1 5 5 0 3 76 0 1 0 0 5 1 0 103 0 4 4 3 97 0 3 3 17 77 0 5 5 2 97 0 2 2 19 2 78 35 35 35 37 17 18 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17B2;
unicode = 17B2;
},
{
glyphname = uni17B3;
lastChange = "2020-01-28 09:06:07 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"260 1540 LINE SMOOTH",
"113 1540 OFFCURVE",
"40 1466 OFFCURVE",
"40 1317 CURVE SMOOTH",
"40 1217 LINE",
"140 1094 LINE",
"144 1094 LINE",
"422 1206 LINE",
"407 1223 OFFCURVE",
"389 1241 OFFCURVE",
"368 1260 CURVE",
"368 1295 OFFCURVE",
"379 1312 OFFCURVE",
"400 1312 CURVE SMOOTH",
"815 1312 LINE",
"994 1137 LINE",
"1260 1212 LINE",
"1231 1406 OFFCURVE",
"1146 1514 OFFCURVE",
"1004 1535 CURVE",
"941 1610 LINE SMOOTH",
"923 1631 OFFCURVE",
"914 1656 OFFCURVE",
"914 1685 CURVE SMOOTH",
"914 1714 OFFCURVE",
"939 1746 OFFCURVE",
"990 1783 CURVE",
"736 1850 LINE",
"672 1807 OFFCURVE",
"640 1758 OFFCURVE",
"640 1704 CURVE SMOOTH",
"640 1649 OFFCURVE",
"660 1595 OFFCURVE",
"701 1540 CURVE"
);
},
{
closed = 1;
nodes = (
"1190 1044 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1044 OFFCURVE",
"110 813 CURVE SMOOTH",
"110 721 OFFCURVE",
"203 675 OFFCURVE",
"388 675 CURVE SMOOTH",
"530 675 LINE",
"530 813 LINE",
"478 813 LINE",
"478 892 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 892 OFFCURVE",
"822 813 CURVE SMOOTH",
"822 680 OFFCURVE",
"718 614 OFFCURVE",
"510 614 CURVE SMOOTH",
"243 614 OFFCURVE",
"110 505 OFFCURVE",
"110 287 CURVE SMOOTH",
"110 96 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"629 0 OFFCURVE",
"726 28 OFFCURVE",
"822 85 CURVE",
"822 -50 LINE",
"1190 -50 LINE",
"1190 400 LINE",
"822 400 LINE",
"822 317 LINE",
"749 251 OFFCURVE",
"651 218 OFFCURVE",
"530 218 CURVE SMOOTH",
"495 218 OFFCURVE",
"478 241 OFFCURVE",
"478 287 CURVE SMOOTH",
"478 360 OFFCURVE",
"489 396 OFFCURVE",
"510 396 CURVE SMOOTH",
"963 396 OFFCURVE",
"1190 535 OFFCURVE",
"1190 813 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01222 19 17 12 4 11 0 20 13 2 8 11 36 1 3 2 41 1 6 3 4 76 5 4 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\0120 4 7 2 7 4 114 0 5 6 5 134 0 1 0 0 11 1 0 103 0 9 0 10 7 9 10 105 0 7 0 2 3 7 2 105 0 8 8 11 97 0 11 11 17 77 0 3 3 6 97 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 4 7 2 7 4 2 128 0 5 6 5 134 0 1 0 0 11 1 0 103 0 9 0 10 7 9 10 105 0 7 0 2 3 7 2 105 0 8 8 11 97 0 11 11 17 77 0 3 3 6 97 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 4 7 2 7 4 2 128 0 1 0 0 11 1 0 103 0 9 0 10 7 9 10 105 0 7 0 2 3 7 2 105 0 8 8 11 97 0 11 11 17 77 0 3 3 6 97 0 6 6 19 77 0 5 5 19 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 58 values pushed */\0120 4 7 2 7 4 2 128 0 5 6 5 134 0 1 0 0 11 1 0 103 0 9 0 10 7 9 10 105 0 7 0 2 3 7 2 105 0 8 8 11 97 0 11 11 17 77 0 3 3 6 97 0 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01261 59 57 55 54 53 34 34 34 17 18 34 35 40 46 12 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17B3;
unicode = 17B3;
},
{
glyphname = uni17B6;
lastChange = "2020-01-28 09:06:39 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-210 1160 LINE",
"-210 932 LINE",
"8 932 LINE SMOOTH",
"76 932 OFFCURVE",
"110 890 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 0 LINE",
"478 0 LINE",
"478 807 LINE SMOOTH",
"478 1042 OFFCURVE",
"351 1160 OFFCURVE",
"98 1160 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0120 2 2 0 95 3 1 0 0 17 77 0 1 1 19 1 78 1 0 8 6 4 3 0 11 1 9 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17B6;
unicode = 17B6;
},
{
glyphname = uni17B7;
lastChange = "2020-01-28 14:45:25 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1140 1377 OFFCURVE",
"-1107 1310 OFFCURVE",
"-1040 1290 CURVE",
"-170 1290 LINE",
"-170 1520 LINE",
"-317 1640 OFFCURVE",
"-549 1747 OFFCURVE",
"-740 1760 CURVE SMOOTH",
"-1059 1783 OFFCURVE",
"-1140 1623 OFFCURVE",
"-1140 1490 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-660 1580 OFFCURVE",
"-521 1567 OFFCURVE",
"-452 1500 CURVE",
"-860 1500 LINE",
"-860 1540 OFFCURVE",
"-807 1580 OFFCURVE",
"-740 1580 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 44 values pushed */\0127 1 3 2 1 76 0 0 4 1 2 3 0 2 105 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 14 13 17 16 13 21 14 19 36 34 5 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17B7;
unicode = 17B7;
},
{
glyphname = uni17B8;
lastChange = "2020-01-28 14:47:08 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-428 1673 LINE",
"-544 1731 OFFCURVE",
"-648 1760 OFFCURVE",
"-740 1760 CURVE SMOOTH",
"-1060 1760 OFFCURVE",
"-1140 1623 OFFCURVE",
"-1140 1490 CURVE SMOOTH",
"-1140 1357 OFFCURVE",
"-1107 1290 OFFCURVE",
"-1040 1290 CURVE SMOOTH",
"-170 1290 LINE",
"-170 1830 LINE",
"-428 1830 LINE"
);
},
{
closed = 1;
nodes = (
"-860 1540 OFFCURVE",
"-807 1580 OFFCURVE",
"-740 1580 CURVE SMOOTH",
"-660 1580 OFFCURVE",
"-521 1567 OFFCURVE",
"-452 1500 CURVE",
"-860 1500 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 53 values pushed */\01222 1 0 4 1 76 0 2 4 2 133 0 4 5 1 0 1 4 0 105 0 1 3 3 1 87 0 1 1 3 96 0 3 1 3 80 1 0 19 17 14 12 11 10 4 3 0 8 1 6 6 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17B8;
unicode = 17B8;
},
{
glyphname = uni17B9;
lastChange = "2020-01-28 14:47:39 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-196 1561 LINE SMOOTH",
"-178 1592 OFFCURVE",
"-169 1632 OFFCURVE",
"-170 1680 CURVE SMOOTH",
"-172 1813 OFFCURVE",
"-249 1880 OFFCURVE",
"-402 1880 CURVE SMOOTH",
"-470 1880 OFFCURVE",
"-539 1850 OFFCURVE",
"-575 1794 CURVE SMOOTH",
"-605 1744 LINE",
"-650 1755 OFFCURVE",
"-695 1760 OFFCURVE",
"-740 1760 CURVE SMOOTH",
"-1060 1760 OFFCURVE",
"-1140 1623 OFFCURVE",
"-1140 1490 CURVE SMOOTH",
"-1140 1357 OFFCURVE",
"-1107 1290 OFFCURVE",
"-1040 1290 CURVE SMOOTH",
"-170 1290 LINE",
"-170 1520 LINE",
"-181 1529 OFFCURVE",
"-193 1538 OFFCURVE",
"-205 1547 CURVE"
);
},
{
closed = 1;
nodes = (
"-382 1648 OFFCURVE",
"-415 1668 OFFCURVE",
"-450 1685 CURVE SMOOTH",
"-453 1686 OFFCURVE",
"-455 1688 OFFCURVE",
"-458 1689 CURVE",
"-455 1700 OFFCURVE",
"-449 1709 OFFCURVE",
"-440 1716 CURVE SMOOTH",
"-430 1724 OFFCURVE",
"-417 1728 OFFCURVE",
"-402 1727 CURVE SMOOTH",
"-363 1725 OFFCURVE",
"-344 1709 OFFCURVE",
"-344 1680 CURVE SMOOTH",
"-344 1658 OFFCURVE",
"-346 1640 OFFCURVE",
"-351 1627 CURVE"
);
},
{
closed = 1;
nodes = (
"-660 1580 OFFCURVE",
"-521 1567 OFFCURVE",
"-452 1500 CURVE",
"-860 1500 LINE",
"-860 1540 OFFCURVE",
"-807 1580 OFFCURVE",
"-740 1580 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 67 values pushed */\01220 1 5 3 40 1 0 5 30 11 2 1 0 3 76 0 4 0 5 0 4 5 105 0 3 6 1 0 1 3 0 105 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 1 0 37 35 25 23 19 17 14 12 4 3 0 8 1 6 7 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17B9;
unicode = 17B9;
},
{
glyphname = uni17BA;
lastChange = "2020-01-28 14:48:20 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-470 1890 LINE",
"-668 1890 LINE",
"-668 1756 LINE",
"-692 1759 OFFCURVE",
"-716 1760 OFFCURVE",
"-740 1760 CURVE SMOOTH",
"-1060 1760 OFFCURVE",
"-1140 1623 OFFCURVE",
"-1140 1490 CURVE SMOOTH",
"-1140 1377 OFFCURVE",
"-1107 1310 OFFCURVE",
"-1040 1290 CURVE",
"-170 1290 LINE",
"-170 1830 LINE",
"-398 1830 LINE",
"-398 1656 LINE",
"-415 1666 OFFCURVE",
"-432 1676 OFFCURVE",
"-450 1685 CURVE SMOOTH",
"-457 1688 OFFCURVE",
"-463 1692 OFFCURVE",
"-470 1695 CURVE"
);
},
{
closed = 1;
nodes = (
"-860 1500 LINE",
"-860 1540 OFFCURVE",
"-807 1580 OFFCURVE",
"-740 1580 CURVE SMOOTH",
"-660 1580 OFFCURVE",
"-521 1567 OFFCURVE",
"-452 1500 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 63 values pushed */\01227 24 13 3 1 4 1 76 0 5 2 5 133 0 2 4 2 133 0 4 0 1 0 4 1 105 6 1 0 3 3 0 87 6 1 0 0 3 96 0 3 0 3 80 1 0 26 25 23 21 18 16 15 14 5 3 0 8 1 7 7 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17BA;
unicode = 17BA;
},
{
glyphname = uni17BB;
lastChange = "2020-01-28 14:48:42 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-553 -70 LINE",
"-553 -230 LINE",
"-478 -230 LINE",
"-478 -500 LINE",
"-110 -500 LINE",
"-110 -70 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 1 1 0 113 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 5 0 5 17 17 4 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17BB;
unicode = 17BB;
},
{
glyphname = uni17BC;
lastChange = "2020-01-28 14:49:22 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-910 -70 LINE",
"-910 -290 LINE SMOOTH",
"-910 -430 OFFCURVE",
"-777 -500 OFFCURVE",
"-510 -500 CURVE SMOOTH",
"-243 -501 OFFCURVE",
"-110 -431 OFFCURVE",
"-110 -290 CURVE SMOOTH",
"-110 -70 LINE",
"-438 -70 LINE",
"-438 -290 LINE SMOOTH",
"-438 -323 OFFCURVE",
"-462 -340 OFFCURVE",
"-510 -340 CURVE SMOOTH",
"-558 -340 OFFCURVE",
"-582 -323 OFFCURVE",
"-582 -290 CURVE SMOOTH",
"-582 -70 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0122 4 2 0 1 1 0 112 0 1 3 3 1 89 0 1 1 3 98 0 3 1 3 82 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0122 4 2 0 1 0 133 0 1 3 3 1 89 0 1 1 3 98 0 3 1 3 82 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 12 10 8 7 5 3 0 15 1 14 5 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17BC;
unicode = 17BC;
},
{
glyphname = uni17BD;
lastChange = "2020-01-28 14:49:54 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-960 -500 LINE",
"-610 -500 LINE",
"-535 -400 LINE",
"-460 -500 LINE",
"-110 -500 LINE",
"-110 -70 LINE",
"-438 -70 LINE",
"-438 -300 LINE",
"-535 -200 LINE",
"-632 -300 LINE",
"-632 -70 LINE",
"-960 -70 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0129 4 3 2 4 2 0 1 76 1 1 0 2 2 0 87 1 1 0 0 2 95 3 1 2 0 2 79 18 17 20 16 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17BD;
unicode = 17BD;
},
{
glyphname = uni17BE;
lastChange = "2020-01-28 14:50:46 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-428 1673 LINE",
"-544 1731 OFFCURVE",
"-648 1760 OFFCURVE",
"-740 1760 CURVE SMOOTH",
"-1060 1760 OFFCURVE",
"-1140 1623 OFFCURVE",
"-1140 1490 CURVE SMOOTH",
"-1140 1357 OFFCURVE",
"-1107 1290 OFFCURVE",
"-1040 1290 CURVE SMOOTH",
"-170 1290 LINE",
"-170 1830 LINE",
"-428 1830 LINE"
);
},
{
closed = 1;
nodes = (
"-860 1540 OFFCURVE",
"-807 1580 OFFCURVE",
"-740 1580 CURVE SMOOTH",
"-660 1580 OFFCURVE",
"-521 1567 OFFCURVE",
"-452 1500 CURVE",
"-860 1500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01222 1 0 4 1 76 0 2 4 2 133 0 4 5 1 0 1 4 0 105 0 1 3 3 1 87 0 1 1 3 96 0 3 1 3 80 1 0 19 17 14 12 11 10 4 3 0 8 1 6 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BE;
unicode = 17BE;
},
{
glyphname = uni17BF;
lastChange = "2020-01-28 14:51:56 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"330 1830 LINE",
"102 1830 LINE",
"102 1656 LINE",
"85 1666 OFFCURVE",
"68 1676 OFFCURVE",
"50 1685 CURVE SMOOTH",
"43 1688 OFFCURVE",
"37 1692 OFFCURVE",
"30 1695 CURVE",
"30 1890 LINE",
"-168 1890 LINE",
"-168 1756 LINE",
"-192 1759 OFFCURVE",
"-216 1760 OFFCURVE",
"-240 1760 CURVE SMOOTH",
"-507 1760 OFFCURVE",
"-580 1623 OFFCURVE",
"-580 1490 CURVE SMOOTH",
"-580 1357 OFFCURVE",
"-547 1290 OFFCURVE",
"-480 1290 CURVE SMOOTH",
"57 1290 LINE",
"92 1267 OFFCURVE",
"110 1207 OFFCURVE",
"110 1110 CURVE SMOOTH",
"110 -260 LINE SMOOTH",
"110 -300 OFFCURVE",
"73 -320 OFFCURVE",
"0 -320 CURVE SMOOTH",
"-73 -320 OFFCURVE",
"-110 -300 OFFCURVE",
"-110 -260 CURVE SMOOTH",
"-110 -200 LINE",
"-60 -200 LINE",
"-60 -50 LINE",
"-478 -50 LINE",
"-478 -260 LINE SMOOTH",
"-478 -420 OFFCURVE",
"-319 -500 OFFCURVE",
"0 -500 CURVE SMOOTH",
"319 -500 OFFCURVE",
"478 -420 OFFCURVE",
"478 -260 CURVE SMOOTH",
"478 1110 LINE SMOOTH",
"478 1225 OFFCURVE",
"429 1308 OFFCURVE",
"330 1361 CURVE"
);
},
{
closed = 1;
nodes = (
"-300 1500 LINE",
"-300 1540 OFFCURVE",
"-280 1580 OFFCURVE",
"-240 1580 CURVE SMOOTH",
"-160 1580 OFFCURVE",
"-21 1567 OFFCURVE",
"48 1500 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01243 39 36 3 1 7 46 1 6 0 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 8 9 8 133 0 9 7 9 133 0 7 0 1 0 7 1 105 10 1 0 0 6 3 0 6 104 0 3 0 4 5 3 4 103 0 5 5 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 8 9 8 133 0 9 7 9 133 0 7 0 1 0 7 1 105 10 1 0 0 6 3 0 6 104 0 4 4 3 95 0 3 3 18 77 0 5 5 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 9 8 133 0 9 7 9 133 0 7 0 1 0 7 1 105 10 1 0 0 6 3 0 6 104 0 5 0 2 5 2 101 0 4 4 3 95 0 3 3 18 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\0121 0 45 44 38 37 35 33 30 28 24 22 20 19 18 17 15 13 5 3 0 8 1 7 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17BF;
unicode = 17BF;
},
{
glyphname = uni17C0;
lastChange = "2020-01-28 14:52:41 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-478 1800 LINE",
"-478 1300 LINE",
"-170 1300 LINE",
"-130 1333 OFFCURVE",
"-67 1350 OFFCURVE",
"20 1350 CURVE SMOOTH",
"80 1350 OFFCURVE",
"110 1283 OFFCURVE",
"110 1150 CURVE SMOOTH",
"110 -260 LINE SMOOTH",
"110 -300 OFFCURVE",
"73 -320 OFFCURVE",
"0 -320 CURVE SMOOTH",
"-73 -320 OFFCURVE",
"-110 -300 OFFCURVE",
"-110 -260 CURVE SMOOTH",
"-110 -200 LINE",
"-60 -200 LINE",
"-60 -50 LINE",
"-478 -50 LINE",
"-478 -260 LINE SMOOTH",
"-478 -420 OFFCURVE",
"-319 -500 OFFCURVE",
"0 -500 CURVE SMOOTH",
"319 -500 OFFCURVE",
"478 -420 OFFCURVE",
"478 -260 CURVE SMOOTH",
"478 1150 LINE SMOOTH",
"478 1430 OFFCURVE",
"325 1570 OFFCURVE",
"20 1570 CURVE SMOOTH",
"-23 1570 OFFCURVE",
"-67 1551 OFFCURVE",
"-110 1512 CURVE",
"-110 1800 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0122 1 6 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 6 7 1 6 105 8 1 0 0 7 3 0 7 103 0 3 0 4 5 3 4 103 0 5 5 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 1 0 6 7 1 6 105 8 1 0 0 7 3 0 7 103 0 4 4 3 95 0 3 3 18 77 0 5 5 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 1 0 6 7 1 6 105 8 1 0 0 7 3 0 7 103 0 5 0 2 5 2 101 0 4 4 3 95 0 3 3 18 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 26 25 24 22 19 17 15 14 13 12 10 8 5 3 0 28 1 27 9 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17C0;
unicode = 17C0;
},
{
glyphname = uni17C1;
lastChange = "2020-01-28 14:54:07 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 258 LINE SMOOTH",
"110 86 OFFCURVE",
"210 0 OFFCURVE",
"410 0 CURVE SMOOTH",
"558 0 LINE",
"558 228 LINE",
"510 228 LINE SMOOTH",
"489 228 OFFCURVE",
"478 238 OFFCURVE",
"478 258 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01216 9 8 3 0 3 1 76 0 3 3 2 95 0 2 2 17 77 0 0 0 1 97 0 1 1 19 1 78 17 37 33 33 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni17C1;
unicode = 17C1;
},
{
glyphname = uni17C2;
lastChange = "2020-01-28 14:55:06 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"267 1670 LINE",
"69 1670 OFFCURVE",
"-30 1603 OFFCURVE",
"-30 1470 CURVE SMOOTH",
"-31 1310 OFFCURVE",
"66 1230 OFFCURVE",
"261 1230 CURVE SMOOTH",
"514 1230 OFFCURVE",
"640 1390 OFFCURVE",
"640 1710 CURVE",
"390 1710 LINE",
"390 1523 OFFCURVE",
"347 1430 OFFCURVE",
"261 1430 CURVE SMOOTH",
"227 1430 OFFCURVE",
"210 1443 OFFCURVE",
"210 1470 CURVE SMOOTH",
"210 1490 OFFCURVE",
"229 1500 OFFCURVE",
"267 1500 CURVE"
);
},
{
closed = 1;
nodes = (
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 258 LINE SMOOTH",
"110 86 OFFCURVE",
"210 0 OFFCURVE",
"410 0 CURVE SMOOTH",
"558 0 LINE",
"558 228 LINE",
"510 228 LINE SMOOTH",
"489 228 OFFCURVE",
"478 238 OFFCURVE",
"478 258 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01232 25 24 3 5 8 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 2 4 1 2 112 0 4 9 1 0 1 4 0 105 0 1 0 3 7 1 3 106 0 8 8 7 95 0 7 7 17 77 0 5 5 6 97 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 2 4 2 133 0 4 9 1 0 1 4 0 105 0 1 0 3 7 1 3 106 0 8 8 7 95 0 7 7 17 77 0 5 5 6 97 0 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0121 0 31 30 29 27 22 20 19 17 13 12 10 8 7 6 5 3 0 15 1 14 10 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni17C2;
unicode = 17C2;
},
{
glyphname = uni17C3;
lastChange = "2020-01-28 14:56:04 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"20 1440 LINE",
"20 1230 LINE",
"300 1230 LINE SMOOTH",
"507 1230 OFFCURVE",
"611 1315 OFFCURVE",
"610 1485 CURVE SMOOTH",
"609 1655 OFFCURVE",
"519 1740 OFFCURVE",
"340 1740 CURVE SMOOTH",
"297 1740 OFFCURVE",
"260 1730 OFFCURVE",
"230 1710 CURVE",
"230 1760 LINE SMOOTH",
"230 1861 OFFCURVE",
"133 1911 OFFCURVE",
"-60 1910 CURVE",
"-60 1730 LINE",
"-27 1730 OFFCURVE",
"-10 1723 OFFCURVE",
"-10 1710 CURVE SMOOTH",
"-10 1510 LINE",
"230 1510 LINE",
"230 1530 OFFCURVE",
"257 1540 OFFCURVE",
"310 1540 CURVE SMOOTH",
"343 1540 OFFCURVE",
"360 1522 OFFCURVE",
"360 1485 CURVE SMOOTH",
"360 1455 OFFCURVE",
"340 1440 OFFCURVE",
"300 1440 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"478 704 LINE SMOOTH",
"478 749 OFFCURVE",
"453 790 OFFCURVE",
"403 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"110 704 LINE",
"110 258 LINE SMOOTH",
"110 86 OFFCURVE",
"210 0 OFFCURVE",
"410 0 CURVE SMOOTH",
"558 0 LINE",
"558 228 LINE",
"510 228 LINE SMOOTH",
"489 228 OFFCURVE",
"478 238 OFFCURVE",
"478 258 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01214 1 1 3 41 34 33 3 7 10 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 4 0 3 1 4 3 105 0 5 2 1 1 0 5 1 105 11 1 0 0 6 9 0 6 103 0 10 10 9 95 0 9 9 17 77 0 7 7 8 97 0 8 8 19 8 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 2 1 0 1 2 0 128 0 4 0 3 1 4 3 105 0 5 0 1 2 5 1 105 11 1 0 0 6 9 0 6 103 0 10 10 9 95 0 9 9 17 77 0 7 7 8 97 0 8 8 19 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 29 values pushed */\0121 0 40 39 38 36 31 29 28 26 21 19 17 15 12 11 10 9 7 6 5 3 0 24 1 22 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni17C3;
unicode = 17C3;
},
{
glyphname = uni17C4;
lastChange = "2020-01-28 14:56:42 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-210 1160 LINE",
"-210 932 LINE",
"8 932 LINE SMOOTH",
"76 932 OFFCURVE",
"110 890 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 0 LINE",
"478 0 LINE",
"478 807 LINE SMOOTH",
"478 1042 OFFCURVE",
"351 1160 OFFCURVE",
"98 1160 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0120 2 2 0 95 3 1 0 0 17 77 0 1 1 19 1 78 1 0 8 6 4 3 0 11 1 9 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17C4;
unicode = 17C4;
},
{
glyphname = uni17C5;
lastChange = "2020-01-28 15:13:57 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 1161 LINE",
"478 1357 LINE SMOOTH",
"478 1572 OFFCURVE",
"431 1680 OFFCURVE",
"148 1680 CURVE SMOOTH",
"-100 1680 LINE",
"-100 1452 LINE",
"38 1452 LINE SMOOTH",
"86 1452 OFFCURVE",
"110 1420 OFFCURVE",
"110 1357 CURVE SMOOTH",
"110 1161 LINE"
);
},
{
closed = 1;
nodes = (
"-210 1160 LINE",
"-210 932 LINE",
"8 932 LINE SMOOTH",
"76 932 OFFCURVE",
"110 890 OFFCURVE",
"110 807 CURVE SMOOTH",
"110 0 LINE",
"478 0 LINE",
"478 807 LINE SMOOTH",
"478 1042 OFFCURVE",
"351 1160 OFFCURVE",
"98 1160 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */\0120 5 3 0 3 5 0 128 0 4 0 3 5 4 3 105 0 2 2 0 95 6 1 0 0 17 77 0 1 1 19 1 78 1 0 22 21 19 17 16 14 8 6 4 3 0 11 1 9 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17C5;
unicode = 17C5;
},
{
glyphname = uni17C6;
lastChange = "2020-01-28 14:58:44 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-857 1785 OFFCURVE",
"-960 1702 OFFCURVE",
"-960 1535 CURVE SMOOTH",
"-960 1368 OFFCURVE",
"-857 1285 OFFCURVE",
"-650 1285 CURVE SMOOTH",
"-443 1285 OFFCURVE",
"-340 1368 OFFCURVE",
"-340 1535 CURVE SMOOTH",
"-340 1702 OFFCURVE",
"-443 1785 OFFCURVE",
"-650 1785 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-600 1610 OFFCURVE",
"-575 1585 OFFCURVE",
"-575 1535 CURVE SMOOTH",
"-575 1485 OFFCURVE",
"-600 1460 OFFCURVE",
"-650 1460 CURVE SMOOTH",
"-700 1460 OFFCURVE",
"-725 1485 OFFCURVE",
"-725 1535 CURVE SMOOTH",
"-725 1585 OFFCURVE",
"-700 1610 OFFCURVE",
"-650 1610 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 11 10 1 0 15 13 10 19 11 17 5 3 0 9 1 7 6 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17C6;
unicode = 17C6;
},
{
glyphname = uni17C7;
lastChange = "2020-01-28 15:00:49 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"173 500 OFFCURVE",
"70 417 OFFCURVE",
"70 250 CURVE SMOOTH",
"70 83 OFFCURVE",
"173 0 OFFCURVE",
"380 0 CURVE SMOOTH",
"587 0 OFFCURVE",
"690 83 OFFCURVE",
"690 250 CURVE SMOOTH",
"690 417 OFFCURVE",
"587 500 OFFCURVE",
"380 500 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"430 325 OFFCURVE",
"455 300 OFFCURVE",
"455 250 CURVE SMOOTH",
"455 200 OFFCURVE",
"430 175 OFFCURVE",
"380 175 CURVE SMOOTH",
"330 175 OFFCURVE",
"305 200 OFFCURVE",
"305 250 CURVE SMOOTH",
"305 300 OFFCURVE",
"330 325 OFFCURVE",
"380 325 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"173 1160 OFFCURVE",
"70 1077 OFFCURVE",
"70 910 CURVE SMOOTH",
"70 743 OFFCURVE",
"173 660 OFFCURVE",
"380 660 CURVE SMOOTH",
"587 660 OFFCURVE",
"690 743 OFFCURVE",
"690 910 CURVE SMOOTH",
"690 1077 OFFCURVE",
"587 1160 OFFCURVE",
"380 1160 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"430 985 OFFCURVE",
"455 960 OFFCURVE",
"455 910 CURVE SMOOTH",
"455 860 OFFCURVE",
"430 835 OFFCURVE",
"380 835 CURVE SMOOTH",
"330 835 OFFCURVE",
"305 860 OFFCURVE",
"305 910 CURVE SMOOTH",
"305 960 OFFCURVE",
"330 985 OFFCURVE",
"380 985 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */\0120 5 0 7 2 5 7 105 9 1 2 8 1 0 1 2 0 105 10 1 4 4 6 97 11 1 6 6 17 77 0 1 1 3 97 0 3 3 19 3 78 31 30 21 20 11 10 1 0 35 33 30 39 31 37 25 23 20 29 21 27 15 13 10 19 11 17 5 3 0 9 1 7 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni17C7;
unicode = 17C7;
},
{
glyphname = uni17C8;
lastChange = "2020-01-28 15:01:37 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"373 1045 OFFCURVE",
"435 993 OFFCURVE",
"435 890 CURVE SMOOTH",
"435 787 OFFCURVE",
"373 735 OFFCURVE",
"250 735 CURVE SMOOTH",
"127 735 OFFCURVE",
"65 787 OFFCURVE",
"65 890 CURVE SMOOTH",
"65 993 OFFCURVE",
"127 1045 OFFCURVE",
"250 1045 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"373 385 OFFCURVE",
"435 333 OFFCURVE",
"435 230 CURVE SMOOTH",
"435 127 OFFCURVE",
"373 75 OFFCURVE",
"250 75 CURVE SMOOTH",
"127 75 OFFCURVE",
"65 127 OFFCURVE",
"65 230 CURVE SMOOTH",
"65 333 OFFCURVE",
"127 385 OFFCURVE",
"250 385 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */\0125 1 2 0 3 0 2 3 105 4 1 0 1 1 0 89 4 1 0 0 1 97 0 1 0 1 81 11 10 1 0 15 13 10 19 11 17 5 3 0 9 1 7 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = uni17C8;
unicode = 17C8;
},
{
glyphname = uni17C9;
lastChange = "2020-01-28 15:02:03 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-710 1300 LINE",
"-710 1700 LINE",
"-1000 1700 LINE",
"-1000 1300 LINE"
);
},
{
closed = 1;
nodes = (
"-300 1300 LINE",
"-300 1700 LINE",
"-590 1700 LINE",
"-590 1300 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 39 values pushed */\0122 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17C9;
unicode = 17C9;
},
{
glyphname = uni17CA;
lastChange = "2020-01-28 15:02:22 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-110 1220 LINE",
"-110 1470 LINE",
"-542 1470 LINE",
"-650 1340 LINE",
"-757 1470 LINE",
"-1190 1470 LINE",
"-1190 1220 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 36 values pushed */\0123 1 2 0 1 76 1 1 0 2 2 0 87 1 1 0 0 2 95 3 1 2 0 2 79 0 0 0 6 0 6 18 17 4 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17CA;
unicode = 17CA;
},
{
glyphname = uni17CB;
lastChange = "2020-01-28 15:02:40 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-485 1300 LINE",
"-485 1700 LINE",
"-815 1700 LINE",
"-815 1300 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 27 values pushed */\0120 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17CB;
unicode = 17CB;
},
{
glyphname = uni17CC;
lastChange = "2020-01-28 15:03:51 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-906 1309 LINE",
"-791 1381 OFFCURVE",
"-711 1418 OFFCURVE",
"-666 1421 CURVE SMOOTH",
"-659 1422 OFFCURVE",
"-652 1422 OFFCURVE",
"-645 1422 CURVE SMOOTH",
"-608 1422 OFFCURVE",
"-574 1416 OFFCURVE",
"-543 1405 CURVE SMOOTH",
"-506 1392 OFFCURVE",
"-464 1357 OFFCURVE",
"-419 1300 CURVE",
"-220 1411 LINE",
"-278 1476 OFFCURVE",
"-335 1516 OFFCURVE",
"-391 1529 CURVE SMOOTH",
"-432 1538 OFFCURVE",
"-471 1543 OFFCURVE",
"-508 1543 CURVE SMOOTH",
"-521 1543 OFFCURVE",
"-534 1542 OFFCURVE",
"-547 1541 CURVE",
"-481 1605 OFFCURVE",
"-437 1680 OFFCURVE",
"-414 1767 CURVE",
"-638 1860 LINE",
"-699 1709 OFFCURVE",
"-857 1588 OFFCURVE",
"-1080 1476 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 31 values pushed */\0126 1 1 0 1 76 4 3 2 0 74 21 13 12 3 1 73 0 0 1 0 133 0 1 1 118 71 39 2 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17CC;
unicode = 17CC;
},
{
glyphname = uni17CD;
lastChange = "2020-01-28 15:04:30 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-792 1537 OFFCURVE",
"-762 1550 OFFCURVE",
"-703 1550 CURVE SMOOTH",
"-561 1550 LINE SMOOTH",
"-294 1550 OFFCURVE",
"-160 1653 OFFCURVE",
"-160 1860 CURVE",
"-487 1860 LINE",
"-487 1793 OFFCURVE",
"-512 1760 OFFCURVE",
"-561 1760 CURVE SMOOTH",
"-703 1760 LINE SMOOTH",
"-981 1760 OFFCURVE",
"-1120 1677 OFFCURVE",
"-1120 1510 CURVE SMOOTH",
"-1120 1357 OFFCURVE",
"-997 1280 OFFCURVE",
"-752 1280 CURVE",
"-752 1470 LINE",
"-779 1470 OFFCURVE",
"-792 1483 OFFCURVE",
"-792 1510 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 2 2 3 112 0 2 0 4 0 2 4 106 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 2 3 133 0 2 0 4 0 2 4 106 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01249 17 50 17 17 5 7 27 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17CD;
unicode = 17CD;
},
{
glyphname = uni17CE;
lastChange = "2020-01-28 15:04:47 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-485 1829 LINE",
"-815 1829 LINE",
"-815 1688 LINE",
"-955 1688 LINE",
"-955 1441 LINE",
"-815 1441 LINE",
"-815 1300 LINE",
"-485 1300 LINE",
"-485 1441 LINE",
"-345 1441 LINE",
"-345 1688 LINE",
"-485 1688 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 0 2 5 87 4 1 0 3 1 1 2 0 1 103 0 5 5 2 95 0 2 5 2 79 17 17 17 17 17 16 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17CE;
unicode = 17CE;
},
{
glyphname = uni17CF;
lastChange = "2020-01-28 15:05:32 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1140 1280 LINE",
"-779 1280 LINE",
"-779 1281 LINE",
"-778 1280 LINE",
"-651 1343 LINE",
"-520 1280 LINE",
"-160 1280 LINE",
"-160 1522 LINE",
"-490 1522 LINE",
"-490 1454 LINE",
"-650 1537 LINE",
"-809 1455 LINE",
"-809 1512 LINE SMOOTH",
"-809 1556 OFFCURVE",
"-786 1578 OFFCURVE",
"-740 1578 CURVE SMOOTH",
"-610 1578 LINE SMOOTH",
"-310 1578 OFFCURVE",
"-160 1679 OFFCURVE",
"-160 1880 CURVE",
"-490 1880 LINE",
"-489 1816 OFFCURVE",
"-529 1784 OFFCURVE",
"-610 1784 CURVE SMOOTH",
"-740 1784 LINE SMOOTH",
"-1007 1784 OFFCURVE",
"-1140 1693 OFFCURVE",
"-1140 1512 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 12 values pushed */\01213 1 3 2 19 14 12 3 4 3 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 0 1 112 0 0 0 2 3 0 2 106 0 3 4 4 3 87 0 3 3 4 95 5 1 4 3 4 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 1 0 1 133 0 0 0 2 3 0 2 106 0 3 4 4 3 87 0 3 3 4 95 5 1 4 3 4 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01250 17 21 49 17 49 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17CF;
unicode = 17CF;
},
{
glyphname = uni17D0;
lastChange = "2020-01-28 15:06:14 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-730 1433 OFFCURVE",
"-596 1350 OFFCURVE",
"-329 1350 CURVE SMOOTH",
"17 1350 OFFCURVE",
"190 1527 OFFCURVE",
"190 1880 CURVE",
"-140 1880 LINE",
"-140 1667 OFFCURVE",
"-203 1560 OFFCURVE",
"-329 1560 CURVE SMOOTH",
"-376 1560 OFFCURVE",
"-400 1573 OFFCURVE",
"-400 1600 CURVE SMOOTH",
"-400 1640 OFFCURVE",
"-376 1660 OFFCURVE",
"-329 1660 CURVE",
"-329 1870 LINE",
"-596 1870 OFFCURVE",
"-730 1780 OFFCURVE",
"-730 1600 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 3 133 0 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 17 34 17 17 5 7 27 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17D0;
unicode = 17D0;
},
{
glyphname = uni17D1;
lastChange = "2020-01-28 15:06:31 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1190 1252 LINE",
"-110 1252 LINE",
"-110 1480 LINE",
"-1190 1480 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17D1;
unicode = 17D1;
},
{
glyphname = uni17D2;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-515 -50 LINE",
"-785 -50 LINE",
"-785 -174 LINE",
"-925 -174 LINE",
"-925 -376 LINE",
"-785 -376 LINE",
"-785 -500 LINE",
"-515 -500 LINE",
"-515 -376 LINE",
"-375 -376 LINE",
"-375 -174 LINE",
"-515 -174 LINE",
"-515 -174 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 0 2 5 87 4 1 0 3 1 1 2 0 1 103 0 5 5 2 95 0 2 5 2 79 17 17 17 17 17 16 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17D2;
unicode = 17D2;
},
{
glyphname = uni17D3;
lastChange = "2020-01-28 15:07:10 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-783 1800 OFFCURVE",
"-977 1756 OFFCURVE",
"-1036 1676 CURVE SMOOTH",
"-1065 1635 OFFCURVE",
"-1080 1593 OFFCURVE",
"-1080 1550 CURVE SMOOTH",
"-1080 1463 OFFCURVE",
"-1032 1377 OFFCURVE",
"-872 1333 CURVE SMOOTH",
"-792 1311 OFFCURVE",
"-718 1300 OFFCURVE",
"-650 1300 CURVE SMOOTH",
"-511 1300 OFFCURVE",
"-318 1346 OFFCURVE",
"-262 1426 CURVE SMOOTH",
"-234 1465 OFFCURVE",
"-220 1507 OFFCURVE",
"-220 1550 CURVE SMOOTH",
"-220 1637 OFFCURVE",
"-268 1725 OFFCURVE",
"-428 1768 CURVE SMOOTH",
"-508 1789 OFFCURVE",
"-582 1800 OFFCURVE",
"-650 1800 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-573 1667 OFFCURVE",
"-496 1645 OFFCURVE",
"-477 1608 CURVE SMOOTH",
"-467 1589 OFFCURVE",
"-462 1570 OFFCURVE",
"-462 1550 CURVE SMOOTH",
"-462 1510 OFFCURVE",
"-471 1469 OFFCURVE",
"-540 1449 CURVE SMOOTH",
"-575 1438 OFFCURVE",
"-611 1433 OFFCURVE",
"-649 1433 CURVE SMOOTH",
"-721 1433 OFFCURVE",
"-802 1455 OFFCURVE",
"-822 1492 CURVE SMOOTH",
"-831 1511 OFFCURVE",
"-836 1530 OFFCURVE",
"-836 1550 CURVE SMOOTH",
"-836 1590 OFFCURVE",
"-824 1631 OFFCURVE",
"-755 1652 CURVE SMOOTH",
"-720 1662 OFFCURVE",
"-685 1667 OFFCURVE",
"-649 1667 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 19 18 1 0 27 25 18 35 19 33 9 7 0 17 1 15 6 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17D3;
unicode = 17D3;
},
{
glyphname = uni17D4;
lastChange = "2020-01-28 15:08:03 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"535 1160 LINE",
"382 1160 LINE SMOOTH",
"201 1160 OFFCURVE",
"110 1090 OFFCURVE",
"110 950 CURVE SMOOTH",
"110 763 OFFCURVE",
"215 670 OFFCURVE",
"426 670 CURVE SMOOTH",
"551 670 OFFCURVE",
"649 729 OFFCURVE",
"722 846 CURVE",
"722 0 LINE",
"1090 0 LINE",
"1090 1160 LINE",
"722 1160 LINE",
"638 999 LINE",
"588 932 OFFCURVE",
"544 898 OFFCURVE",
"506 898 CURVE SMOOTH",
"487 898 OFFCURVE",
"478 915 OFFCURVE",
"478 950 CURVE SMOOTH",
"478 978 OFFCURVE",
"497 992 OFFCURVE",
"535 992 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */\01211 1 4 1 1 76 0 1 0 4 3 1 4 105 6 1 0 0 2 95 5 1 2 2 17 77 0 3 3 19 3 78 1 0 18 16 14 12 10 9 8 7 5 3 0 20 1 19 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1200;
}
);
note = uni17D4;
unicode = 17D4;
},
{
glyphname = uni17D5;
lastChange = "2020-01-28 18:05:25 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"535 1160 LINE",
"382 1160 LINE SMOOTH",
"201 1160 OFFCURVE",
"110 1090 OFFCURVE",
"110 950 CURVE SMOOTH",
"110 763 OFFCURVE",
"215 670 OFFCURVE",
"426 670 CURVE SMOOTH",
"551 670 OFFCURVE",
"649 729 OFFCURVE",
"722 846 CURVE",
"722 0 LINE",
"1090 0 LINE",
"1090 1160 LINE",
"722 1160 LINE",
"638 999 LINE",
"588 932 OFFCURVE",
"544 898 OFFCURVE",
"506 898 CURVE SMOOTH",
"487 898 OFFCURVE",
"478 915 OFFCURVE",
"478 950 CURVE SMOOTH",
"478 978 OFFCURVE",
"497 992 OFFCURVE",
"535 992 CURVE"
);
},
{
closed = 1;
nodes = (
"1142 1160 LINE",
"1142 0 LINE",
"1390 0 LINE",
"1390 1160 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01211 1 4 1 1 76 0 1 0 4 3 1 4 105 8 1 0 0 2 95 9 7 5 3 2 2 17 77 6 1 3 3 19 3 78 21 21 1 0 21 24 21 24 23 22 18 16 14 12 10 9 8 7 5 3 0 20 1 19 10 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1500;
}
);
note = uni17D5;
unicode = 17D5;
},
{
glyphname = uni17D6;
lastChange = "2020-01-28 18:06:21 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"173 1160 OFFCURVE",
"80 1093 OFFCURVE",
"80 960 CURVE SMOOTH",
"80 827 OFFCURVE",
"173 760 OFFCURVE",
"360 760 CURVE SMOOTH",
"547 760 OFFCURVE",
"640 827 OFFCURVE",
"640 960 CURVE SMOOTH",
"640 1093 OFFCURVE",
"547 1160 OFFCURVE",
"360 1160 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"390 1020 OFFCURVE",
"405 1000 OFFCURVE",
"405 960 CURVE SMOOTH",
"405 920 OFFCURVE",
"390 900 OFFCURVE",
"360 900 CURVE SMOOTH",
"330 900 OFFCURVE",
"315 920 OFFCURVE",
"315 960 CURVE SMOOTH",
"315 1000 OFFCURVE",
"330 1020 OFFCURVE",
"360 1020 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"50 684 LINE",
"50 476 LINE",
"700 476 LINE",
"700 684 LINE"
);
},
{
closed = 1;
nodes = (
"173 400 OFFCURVE",
"80 333 OFFCURVE",
"80 200 CURVE SMOOTH",
"80 67 OFFCURVE",
"173 0 OFFCURVE",
"360 0 CURVE SMOOTH",
"547 0 OFFCURVE",
"640 67 OFFCURVE",
"640 200 CURVE SMOOTH",
"640 333 OFFCURVE",
"547 400 OFFCURVE",
"360 400 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"390 260 OFFCURVE",
"405 240 OFFCURVE",
"405 200 CURVE SMOOTH",
"405 160 OFFCURVE",
"390 140 OFFCURVE",
"360 140 CURVE SMOOTH",
"330 140 OFFCURVE",
"315 160 OFFCURVE",
"315 200 CURVE SMOOTH",
"315 240 OFFCURVE",
"330 260 OFFCURVE",
"360 260 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */\0120 5 0 7 9 5 7 105 14 1 9 0 8 2 9 8 103 11 1 2 10 1 0 1 2 0 105 12 1 4 4 6 97 13 1 6 6 17 77 0 1 1 3 97 0 3 3 19 3 78 40 40 31 30 21 20 11 10 1 0 40 43 40 43 42 41 35 33 30 39 31 37 25 23 20 29 21 27 15 13 10 19 11 17 5 3 0 9 1 7 15 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni17D6;
unicode = 17D6;
},
{
glyphname = uni17D7;
lastChange = "2020-01-28 18:07:42 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"722 -180 LINE SMOOTH",
"722 -241 OFFCURVE",
"665 -272 OFFCURVE",
"550 -272 CURVE",
"550 -500 LINE",
"910 -500 OFFCURVE",
"1090 -393 OFFCURVE",
"1090 -180 CURVE SMOOTH",
"1090 1160 LINE",
"722 1160 LINE",
"687 1051 OFFCURVE",
"657 996 OFFCURVE",
"631 996 CURVE SMOOTH",
"620 996 OFFCURVE",
"589 1023 OFFCURVE",
"537 1078 CURVE SMOOTH",
"485 1133 OFFCURVE",
"421 1160 OFFCURVE",
"345 1160 CURVE SMOOTH",
"155 1160 OFFCURVE",
"60 1061 OFFCURVE",
"60 863 CURVE SMOOTH",
"60 667 OFFCURVE",
"193 569 OFFCURVE",
"458 569 CURVE",
"458 803 LINE",
"425 803 OFFCURVE",
"408 823 OFFCURVE",
"408 863 CURVE SMOOTH",
"408 935 OFFCURVE",
"452 921 OFFCURVE",
"511 842 CURVE SMOOTH",
"544 797 OFFCURVE",
"584 774 OFFCURVE",
"631 774 CURVE SMOOTH",
"663 774 OFFCURVE",
"693 804 OFFCURVE",
"722 863 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01227 1 2 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 5 0 0 3 5 0 105 0 2 0 3 8 2 3 105 0 1 1 4 97 6 1 4 4 17 77 0 8 8 7 98 0 7 7 20 7 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 0 0 3 5 0 105 0 2 0 3 8 2 3 105 0 8 0 7 8 7 102 0 1 1 4 97 6 1 4 4 17 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 18 17 33 34 17 18 33 33 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1200;
}
);
note = uni17D7;
unicode = 17D7;
},
{
glyphname = uni17D8;
lastChange = "2020-01-28 18:10:49 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"3635 1160 LINE",
"3482 1160 LINE SMOOTH",
"3301 1160 OFFCURVE",
"3210 1090 OFFCURVE",
"3210 950 CURVE SMOOTH",
"3210 763 OFFCURVE",
"3315 670 OFFCURVE",
"3526 670 CURVE SMOOTH",
"3651 670 OFFCURVE",
"3749 729 OFFCURVE",
"3822 846 CURVE",
"3822 0 LINE",
"4190 0 LINE",
"4190 1160 LINE",
"3822 1160 LINE",
"3738 999 LINE",
"3688 932 OFFCURVE",
"3644 898 OFFCURVE",
"3606 898 CURVE SMOOTH",
"3587 898 OFFCURVE",
"3578 915 OFFCURVE",
"3578 950 CURVE SMOOTH",
"3578 978 OFFCURVE",
"3597 992 OFFCURVE",
"3635 992 CURVE"
);
},
{
closed = 1;
nodes = (
"535 1160 LINE",
"382 1160 LINE SMOOTH",
"201 1160 OFFCURVE",
"110 1090 OFFCURVE",
"110 950 CURVE SMOOTH",
"110 763 OFFCURVE",
"215 670 OFFCURVE",
"426 670 CURVE SMOOTH",
"551 670 OFFCURVE",
"649 729 OFFCURVE",
"722 846 CURVE",
"722 0 LINE",
"1090 0 LINE",
"1090 1160 LINE",
"722 1160 LINE",
"638 999 LINE",
"588 932 OFFCURVE",
"544 898 OFFCURVE",
"506 898 CURVE SMOOTH",
"487 898 OFFCURVE",
"478 915 OFFCURVE",
"478 950 CURVE SMOOTH",
"478 978 OFFCURVE",
"497 992 OFFCURVE",
"535 992 CURVE"
);
},
{
closed = 1;
nodes = (
"3002 704 LINE SMOOTH",
"3002 749 OFFCURVE",
"2969 790 OFFCURVE",
"2902 826 CURVE SMOOTH",
"2802 880 LINE",
"2802 932 LINE",
"3002 932 LINE",
"3002 1160 LINE",
"2712 1160 LINE SMOOTH",
"2560 1160 OFFCURVE",
"2484 1084 OFFCURVE",
"2484 932 CURVE SMOOTH",
"2484 827 LINE",
"2634 704 LINE",
"2634 323 LINE SMOOTH",
"2634 260 OFFCURVE",
"2585 228 OFFCURVE",
"2487 228 CURVE SMOOTH",
"2389 228 OFFCURVE",
"2340 260 OFFCURVE",
"2340 323 CURVE SMOOTH",
"2340 807 LINE SMOOTH",
"2340 1042 OFFCURVE",
"2168 1160 OFFCURVE",
"1825 1160 CURVE SMOOTH",
"1482 1160 OFFCURVE",
"1310 1042 OFFCURVE",
"1310 807 CURVE SMOOTH",
"1310 298 LINE SMOOTH",
"1310 99 OFFCURVE",
"1430 0 OFFCURVE",
"1670 0 CURVE SMOOTH",
"1800 0 LINE",
"1800 258 LINE",
"1730 258 LINE SMOOTH",
"1695 258 OFFCURVE",
"1678 271 OFFCURVE",
"1678 298 CURVE SMOOTH",
"1678 807 LINE SMOOTH",
"1678 890 OFFCURVE",
"1727 932 OFFCURVE",
"1825 932 CURVE SMOOTH",
"1923 932 OFFCURVE",
"1972 890 OFFCURVE",
"1972 807 CURVE SMOOTH",
"1972 323 LINE SMOOTH",
"1972 108 OFFCURVE",
"2144 0 OFFCURVE",
"2487 0 CURVE SMOOTH",
"2830 0 OFFCURVE",
"3002 108 OFFCURVE",
"3002 323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01278 71 70 32 11 5 4 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0127 1 1 10 1 4 14 1 4 105 21 6 20 3 0 0 2 95 18 16 11 8 5 5 2 2 17 77 19 1 13 13 2 95 18 16 11 8 5 5 2 2 17 77 17 1 14 14 3 97 15 12 9 3 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 71 values pushed */\0127 1 1 10 1 4 14 1 4 105 21 6 20 3 0 0 2 95 18 16 11 8 5 5 2 2 17 77 19 1 13 13 2 95 18 16 11 8 5 5 2 2 17 77 0 14 14 3 97 15 12 9 3 3 3 19 77 0 17 17 3 97 15 12 9 3 3 3 19 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 51 values pushed */\01222 21 1 0 77 76 75 73 68 66 63 61 58 56 55 53 50 48 45 43 39 37 35 33 31 30 29 28 26 24 21 41 22 40 18 16 14 12 10 9 8 7 5 3 0 20 1 19 22 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 4300;
}
);
note = uni17D8;
unicode = 17D8;
},
{
glyphname = uni17D9;
lastChange = "2020-01-28 18:11:56 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1177 0 OFFCURVE",
"1390 193 OFFCURVE",
"1390 580 CURVE SMOOTH",
"1390 967 OFFCURVE",
"1177 1160 OFFCURVE",
"750 1160 CURVE SMOOTH",
"323 1160 OFFCURVE",
"110 967 OFFCURVE",
"110 580 CURVE SMOOTH",
"110 193 OFFCURVE",
"323 0 OFFCURVE",
"750 0 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1025 1016 OFFCURVE",
"1163 871 OFFCURVE",
"1163 580 CURVE SMOOTH",
"1163 289 OFFCURVE",
"1025 144 OFFCURVE",
"750 144 CURVE SMOOTH",
"475 144 OFFCURVE",
"338 289 OFFCURVE",
"338 580 CURVE SMOOTH",
"338 871 OFFCURVE",
"475 1016 OFFCURVE",
"750 1016 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"980 205 OFFCURVE",
"1095 330 OFFCURVE",
"1095 580 CURVE SMOOTH",
"1095 830 OFFCURVE",
"980 955 OFFCURVE",
"750 955 CURVE SMOOTH",
"520 955 OFFCURVE",
"405 830 OFFCURVE",
"405 580 CURVE SMOOTH",
"405 330 OFFCURVE",
"520 205 OFFCURVE",
"750 205 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"829 811 OFFCURVE",
"868 734 OFFCURVE",
"868 580 CURVE SMOOTH",
"868 426 OFFCURVE",
"829 349 OFFCURVE",
"750 349 CURVE SMOOTH",
"672 349 OFFCURVE",
"633 426 OFFCURVE",
"633 580 CURVE SMOOTH",
"633 734 OFFCURVE",
"672 811 OFFCURVE",
"750 811 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */\0120 5 11 1 6 7 5 6 105 0 7 10 1 4 3 7 4 105 9 1 2 2 1 97 0 1 1 17 77 0 3 3 0 97 8 1 0 0 19 0 78 31 30 21 20 11 10 1 0 35 33 30 39 31 37 25 23 20 29 21 27 15 13 10 19 11 17 5 3 0 9 1 7 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1500;
}
);
note = uni17D9;
unicode = 17D9;
},
{
glyphname = uni17DA;
lastChange = "2020-01-28 18:13:19 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"265 1160 OFFCURVE",
"110 1055 OFFCURVE",
"110 844 CURVE SMOOTH",
"110 316 LINE SMOOTH",
"110 105 OFFCURVE",
"265 0 OFFCURVE",
"575 0 CURVE",
"794 -40 OFFCURVE",
"1065 206 OFFCURVE",
"1388 739 CURVE",
"1701 106 LINE",
"1826 106 LINE",
"2013 554 LINE",
"2200 211 LINE",
"2326 211 LINE",
"2451 495 LINE",
"2669 495 LINE",
"2669 723 LINE",
"2389 723 LINE",
"2263 578 LINE",
"2075 945 LINE",
"1950 945 LINE",
"1764 466 LINE",
"1451 1051 LINE",
"1325 1051 LINE",
"950 460 OFFCURVE",
"701 164 OFFCURVE",
"578 164 CURVE SMOOTH",
"469 164 OFFCURVE",
"415 215 OFFCURVE",
"415 316 CURVE SMOOTH",
"415 844 LINE SMOOTH",
"415 943 OFFCURVE",
"469 993 OFFCURVE",
"578 993 CURVE SMOOTH",
"663 993 OFFCURVE",
"706 943 OFFCURVE",
"706 844 CURVE SMOOTH",
"706 794 OFFCURVE",
"684 769 OFFCURVE",
"641 769 CURVE",
"641 602 LINE",
"890 602 OFFCURVE",
"1014 682 OFFCURVE",
"1014 841 CURVE SMOOTH",
"1014 1054 OFFCURVE",
"868 1160 OFFCURVE",
"575 1160 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 116 values pushed */\01231 1 2 6 28 1 1 7 21 18 2 9 8 3 76 0 5 0 3 0 5 3 128 0 6 3 2 3 6 2 128 0 9 8 4 8 9 4 128 0 10 4 11 4 10 11 128 0 2 0 1 8 2 1 105 0 7 0 8 9 7 8 103 0 3 3 0 97 12 1 0 0 17 77 0 4 4 11 97 0 11 11 19 11 78 1 0 34 32 30 29 27 26 25 24 23 22 20 19 17 16 15 13 10 8 6 5 4 3 0 39 1 37 13 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 2779;
}
);
note = uni17DA;
unicode = 17DA;
},
{
glyphname = uni17DB;
lastChange = "2020-01-28 18:14:24 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"528 654 LINE",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE",
"160 654 LINE",
"40 654 LINE",
"40 426 LINE",
"160 426 LINE",
"160 298 LINE SMOOTH",
"160 271 OFFCURVE",
"143 258 OFFCURVE",
"108 258 CURVE SMOOTH",
"20 258 LINE",
"20 0 LINE",
"198 0 LINE SMOOTH",
"418 0 OFFCURVE",
"528 99 OFFCURVE",
"528 298 CURVE SMOOTH",
"528 426 LINE",
"600 426 LINE",
"600 654 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */\0129 2 1 3 2 1 1 76 7 1 2 6 1 3 5 2 3 103 0 1 1 0 95 0 0 0 17 77 0 5 5 4 97 0 4 4 19 4 78 17 18 33 34 17 21 17 36 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17DB;
unicode = 17DB;
},
{
glyphname = uni17E0;
lastChange = "2020-01-28 18:15:15 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 380 LINE SMOOTH",
"110 127 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 127 OFFCURVE",
"1190 380 CURVE SMOOTH",
"1190 780 LINE SMOOTH",
"1190 1033 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1033 OFFCURVE",
"110 780 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"478 780 LINE SMOOTH",
"478 881 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 881 OFFCURVE",
"822 780 CURVE SMOOTH",
"822 380 LINE SMOOTH",
"822 279 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 279 OFFCURVE",
"478 380 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 1 1 2 97 0 2 2 17 77 0 0 0 3 97 0 3 3 19 3 78 35 37 35 33 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E0;
unicode = 17E0;
},
{
glyphname = uni17E1;
lastChange = "2020-01-28 18:16:11 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"822 320 LINE SMOOTH",
"822 259 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 259 OFFCURVE",
"478 320 CURVE",
"110 320 LINE",
"110 107 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 107 OFFCURVE",
"1190 320 CURVE SMOOTH",
"1190 840 LINE SMOOTH",
"1190 1053 OFFCURVE",
"1010 1160 OFFCURVE",
"650 1160 CURVE SMOOTH",
"290 1160 OFFCURVE",
"110 1053 OFFCURVE",
"110 840 CURVE SMOOTH",
"110 750 LINE SMOOTH",
"110 550 OFFCURVE",
"245 450 OFFCURVE",
"515 450 CURVE SMOOTH",
"650 450 LINE",
"650 700 LINE",
"575 700 LINE SMOOTH",
"510 700 OFFCURVE",
"478 717 OFFCURVE",
"478 750 CURVE SMOOTH",
"478 840 LINE SMOOTH",
"478 901 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 901 OFFCURVE",
"822 840 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 2 6 6 5 114 0 1 0 2 5 1 2 105 0 0 0 3 97 0 3 3 17 77 0 6 6 4 98 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 2 6 2 5 6 128 0 1 0 2 5 1 2 105 0 0 0 3 97 0 3 3 17 77 0 6 6 4 98 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01233 17 35 35 33 35 33 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E1;
unicode = 17E1;
},
{
glyphname = uni17E2;
lastChange = "2020-01-28 18:17:03 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 1140 LINE",
"110 400 LINE SMOOTH",
"110 133 OFFCURVE",
"330 0 OFFCURVE",
"769 0 CURVE SMOOTH",
"1208 0 OFFCURVE",
"1428 133 OFFCURVE",
"1428 400 CURVE SMOOTH",
"1428 1160 LINE",
"1081 1160 LINE",
"971 1046 LINE",
"840 1160 LINE",
"543 1160 LINE",
"543 500 LINE",
"924 500 LINE",
"924 740 LINE",
"840 740 LINE",
"840 902 LINE",
"971 788 LINE",
"1081 902 LINE",
"1081 400 LINE SMOOTH",
"1081 285 OFFCURVE",
"977 228 OFFCURVE",
"769 228 CURVE SMOOTH",
"561 228 OFFCURVE",
"457 285 OFFCURVE",
"457 400 CURVE SMOOTH",
"457 1230 LINE SMOOTH",
"457 1330 OFFCURVE",
"371 1380 OFFCURVE",
"200 1380 CURVE SMOOTH",
"40 1380 LINE",
"40 1140 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */\01220 13 12 11 4 3 5 1 76 0 1 8 1 0 5 1 0 103 0 3 0 4 2 3 4 104 6 1 5 5 17 77 0 2 2 7 97 0 7 7 19 7 78 1 0 26 24 22 21 19 18 17 16 15 14 9 7 4 2 0 29 1 28 9 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1538;
}
);
note = uni17E2;
unicode = 17E2;
},
{
glyphname = uni17E3;
lastChange = "2020-01-28 18:17:48 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"250 0 OFFCURVE",
"530 0 CURVE SMOOTH",
"570 0 LINE",
"570 258 LINE",
"530 258 LINE SMOOTH",
"495 258 OFFCURVE",
"478 271 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 770 LINE SMOOTH",
"478 878 OFFCURVE",
"515 932 OFFCURVE",
"588 932 CURVE SMOOTH",
"661 932 OFFCURVE",
"698 878 OFFCURVE",
"698 770 CURVE SMOOTH",
"698 0 LINE",
"1066 0 LINE",
"1066 770 LINE SMOOTH",
"1066 878 OFFCURVE",
"1103 932 OFFCURVE",
"1176 932 CURVE SMOOTH",
"1249 932 OFFCURVE",
"1286 878 OFFCURVE",
"1286 770 CURVE SMOOTH",
"1286 0 LINE",
"1654 0 LINE",
"1654 770 LINE SMOOTH",
"1654 1030 OFFCURVE",
"1495 1160 OFFCURVE",
"1176 1160 CURVE SMOOTH",
"1042 1160 OFFCURVE",
"944 1130 OFFCURVE",
"881 1071 CURVE",
"818 1130 OFFCURVE",
"721 1160 OFFCURVE",
"588 1160 CURVE SMOOTH",
"269 1160 OFFCURVE",
"110 1033 OFFCURVE",
"110 780 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\0124 1 3 0 1 76 5 1 3 3 0 97 1 1 0 0 17 77 0 6 6 2 95 7 4 2 2 2 19 2 78 33 35 34 18 34 18 34 33 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1764;
}
);
note = uni17E3;
unicode = 17E3;
},
{
glyphname = uni17E4;
lastChange = "2020-01-28 18:18:43 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 1240 LINE SMOOTH",
"478 1340 OFFCURVE",
"385 1390 OFFCURVE",
"200 1390 CURVE SMOOTH",
"30 1390 LINE",
"30 1200 LINE",
"110 1200 LINE",
"110 400 LINE SMOOTH",
"110 133 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1140 0 LINE",
"1190 228 LINE",
"1049 368 OFFCURVE",
"978 465 OFFCURVE",
"978 519 CURVE SMOOTH",
"978 740 LINE",
"1190 740 LINE",
"1190 968 LINE",
"840 968 LINE SMOOTH",
"687 968 OFFCURVE",
"610 892 OFFCURVE",
"610 740 CURVE SMOOTH",
"610 519 LINE SMOOTH",
"610 432 OFFCURVE",
"707 335 OFFCURVE",
"900 228 CURVE",
"650 228 LINE SMOOTH",
"535 228 OFFCURVE",
"478 285 OFFCURVE",
"478 400 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\01214 1 0 1 75 0 5 0 4 1 5 4 103 0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 19 3 78 33 18 36 17 36 33 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E4;
unicode = 17E4;
},
{
glyphname = uni17E5;
lastChange = "2020-01-28 18:19:53 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 820 LINE SMOOTH",
"478 853 OFFCURVE",
"486 891 OFFCURVE",
"502 934 CURVE",
"577 875 OFFCURVE",
"666 845 OFFCURVE",
"770 845 CURVE SMOOTH",
"1050 845 OFFCURVE",
"1190 943 OFFCURVE",
"1190 1139 CURVE SMOOTH",
"1190 1500 LINE",
"822 1500 LINE",
"822 1139 LINE SMOOTH",
"822 1075 OFFCURVE",
"805 1043 OFFCURVE",
"770 1043 CURVE SMOOTH",
"721 1043 OFFCURVE",
"679 1053 OFFCURVE",
"645 1073 CURVE",
"682 1094 OFFCURVE",
"700 1121 OFFCURVE",
"700 1156 CURVE SMOOTH",
"700 1272 OFFCURVE",
"627 1330 OFFCURVE",
"480 1330 CURVE SMOOTH",
"327 1330 OFFCURVE",
"250 1272 OFFCURVE",
"250 1156 CURVE SMOOTH",
"250 1115 OFFCURVE",
"273 1075 OFFCURVE",
"318 1037 CURVE",
"304 1032 OFFCURVE",
"290 1027 OFFCURVE",
"275 1020 CURVE",
"172 985 OFFCURVE",
"117 918 OFFCURVE",
"110 820 CURVE",
"110 330 LINE SMOOTH",
"110 110 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1138 0 LINE",
"1190 198 LINE",
"1069 278 OFFCURVE",
"1008 345 OFFCURVE",
"1008 400 CURVE SMOOTH",
"1008 502 LINE",
"1190 502 LINE",
"1190 730 LINE",
"888 730 LINE SMOOTH",
"723 730 OFFCURVE",
"640 664 OFFCURVE",
"640 532 CURVE SMOOTH",
"640 400 LINE SMOOTH",
"640 345 OFFCURVE",
"717 288 OFFCURVE",
"870 228 CURVE",
"650 228 LINE SMOOTH",
"535 228 OFFCURVE",
"478 262 OFFCURVE",
"478 330 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01231 1 5 4 42 23 2 7 5 2 76 14 1 0 1 75 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 6 4 6 133 0 4 5 5 4 112 0 5 0 7 1 5 7 106 0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 6 4 6 133 0 4 5 4 133 0 5 0 7 1 5 7 106 0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 19 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01234 18 36 41 36 17 36 33 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E5;
unicode = 17E5;
},
{
glyphname = uni17E6;
lastChange = "2020-01-28 18:20:31 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 1480 LINE",
"110 790 LINE",
"478 790 LINE",
"478 885 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 865 OFFCURVE",
"822 730 CURVE SMOOTH",
"822 400 LINE SMOOTH",
"822 285 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 264 OFFCURVE",
"478 335 CURVE SMOOTH",
"478 406 OFFCURVE",
"522 442 OFFCURVE",
"610 442 CURVE SMOOTH",
"700 442 LINE",
"700 670 LINE",
"550 670 LINE SMOOTH",
"257 670 OFFCURVE",
"110 558 OFFCURVE",
"110 335 CURVE SMOOTH",
"110 112 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 133 OFFCURVE",
"1190 400 CURVE SMOOTH",
"1190 730 LINE SMOOTH",
"1190 1017 OFFCURVE",
"1023 1160 OFFCURVE",
"690 1160 CURVE SMOOTH",
"621 1160 OFFCURVE",
"550 1142 OFFCURVE",
"478 1106 CURVE",
"478 1480 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */\0122 1 6 1 1 76 8 1 0 0 7 3 0 7 103 0 3 0 4 5 3 4 105 0 6 6 1 97 0 1 1 17 77 0 5 5 2 97 0 2 2 19 2 78 1 0 28 27 26 24 21 19 17 15 14 12 10 8 5 3 0 30 1 29 9 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E6;
unicode = 17E6;
},
{
glyphname = uni17E7;
lastChange = "2020-01-28 18:21:41 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1086 833 LINE SMOOTH",
"1086 1051 OFFCURVE",
"991 1160 OFFCURVE",
"802 1160 CURVE SMOOTH",
"733 1160 OFFCURVE",
"665 1119 OFFCURVE",
"598 1036 CURVE",
"531 1119 OFFCURVE",
"464 1160 OFFCURVE",
"396 1160 CURVE SMOOTH",
"205 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"219 0 OFFCURVE",
"436 0 CURVE SMOOTH",
"553 0 LINE",
"553 258 LINE",
"490 258 LINE SMOOTH",
"461 258 OFFCURVE",
"447 271 OFFCURVE",
"447 298 CURVE SMOOTH",
"447 833 LINE SMOOTH",
"447 878 OFFCURVE",
"451 900 OFFCURVE",
"460 900 CURVE SMOOTH",
"468 900 OFFCURVE",
"496 869 OFFCURVE",
"545 806 CURVE SMOOTH",
"561 785 OFFCURVE",
"579 775 OFFCURVE",
"598 775 CURVE SMOOTH",
"617 775 OFFCURVE",
"635 785 OFFCURVE",
"651 806 CURVE SMOOTH",
"700 869 OFFCURVE",
"729 900 OFFCURVE",
"737 900 CURVE SMOOTH",
"745 900 OFFCURVE",
"749 878 OFFCURVE",
"749 833 CURVE SMOOTH",
"749 260 LINE SMOOTH",
"749 87 OFFCURVE",
"873 0 OFFCURVE",
"1120 0 CURVE SMOOTH",
"1367 0 OFFCURVE",
"1490 87 OFFCURVE",
"1490 260 CURVE SMOOTH",
"1490 1430 LINE",
"1183 1430 LINE",
"1183 260 LINE SMOOTH",
"1183 239 OFFCURVE",
"1162 228 OFFCURVE",
"1120 228 CURVE SMOOTH",
"1097 228 OFFCURVE",
"1086 239 OFFCURVE",
"1086 260 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01237 1 3 8 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 1 8 1 133 0 4 3 0 3 4 0 128 5 1 3 3 8 97 9 1 8 8 17 77 6 1 0 0 2 98 7 1 2 2 19 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 1 8 1 133 0 4 3 6 3 4 6 128 5 1 3 3 8 97 9 1 8 8 17 77 0 6 6 2 97 7 1 2 2 19 77 0 0 0 2 98 7 1 2 2 19 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01240 38 35 33 35 34 34 35 34 18 33 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1600;
}
);
note = uni17E7;
unicode = 17E7;
},
{
glyphname = uni17E8;
lastChange = "2020-01-28 18:22:34 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"110 0 LINE",
"509 0 LINE",
"651 120 LINE",
"792 0 LINE",
"1190 0 LINE",
"1190 410 LINE SMOOTH",
"1190 603 OFFCURVE",
"1080 700 OFFCURVE",
"860 700 CURVE SMOOTH",
"680 700 LINE",
"680 490 LINE",
"770 490 LINE SMOOTH",
"805 490 OFFCURVE",
"822 463 OFFCURVE",
"822 410 CURVE SMOOTH",
"822 257 LINE",
"651 405 LINE",
"478 256 LINE",
"478 810 LINE SMOOTH",
"478 891 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 891 OFFCURVE",
"822 810 CURVE",
"1190 810 LINE",
"1190 1480 LINE",
"822 1480 LINE",
"822 1106 LINE",
"757 1142 OFFCURVE",
"686 1160 OFFCURVE",
"610 1160 CURVE SMOOTH",
"277 1160 OFFCURVE",
"110 1043 OFFCURVE",
"110 810 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\0124 1 3 0 26 15 14 13 4 6 4 2 76 0 1 0 2 5 1 2 103 0 5 0 4 6 5 4 105 0 3 3 0 97 0 0 0 17 77 7 1 6 6 19 6 78 18 18 33 38 33 17 18 33 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E8;
unicode = 17E8;
},
{
glyphname = uni17E9;
lastChange = "2020-01-28 18:23:42 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"822 1440 LINE",
"822 1122 LINE",
"737 1147 OFFCURVE",
"669 1160 OFFCURVE",
"620 1160 CURVE SMOOTH",
"280 1160 OFFCURVE",
"110 1061 OFFCURVE",
"110 862 CURVE",
"116 767 OFFCURVE",
"182 704 OFFCURVE",
"308 675 CURVE",
"182 646 OFFCURVE",
"116 583 OFFCURVE",
"110 486 CURVE",
"110 290 LINE SMOOTH",
"110 97 OFFCURVE",
"290 0 OFFCURVE",
"650 0 CURVE SMOOTH",
"1010 0 OFFCURVE",
"1190 84 OFFCURVE",
"1190 253 CURVE SMOOTH",
"1190 422 OFFCURVE",
"1063 506 OFFCURVE",
"810 506 CURVE SMOOTH",
"650 506 LINE",
"650 298 LINE",
"750 298 LINE SMOOTH",
"798 298 OFFCURVE",
"822 285 OFFCURVE",
"822 258 CURVE SMOOTH",
"822 238 OFFCURVE",
"765 228 OFFCURVE",
"650 228 CURVE SMOOTH",
"535 228 OFFCURVE",
"478 249 OFFCURVE",
"478 290 CURVE SMOOTH",
"478 486 LINE SMOOTH",
"478 543 OFFCURVE",
"535 572 OFFCURVE",
"650 572 CURVE SMOOTH",
"950 572 LINE",
"950 790 LINE",
"650 790 LINE SMOOTH",
"535 790 OFFCURVE",
"478 814 OFFCURVE",
"478 862 CURVE SMOOTH",
"478 909 OFFCURVE",
"535 932 OFFCURVE",
"650 932 CURVE SMOOTH",
"765 932 OFFCURVE",
"822 912 OFFCURVE",
"822 872 CURVE",
"1190 872 LINE",
"1190 1440 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */\01239 1 2 9 35 1 3 1 33 1 4 3 3 76 31 1 7 1 75 10 1 0 0 1 3 0 1 103 0 3 0 4 7 3 4 103 0 7 0 6 5 7 6 105 0 2 2 9 97 0 9 9 17 77 0 5 5 8 97 0 8 8 19 8 78 1 0 38 36 29 27 25 23 22 20 18 16 13 11 10 8 6 4 3 2 0 41 1 40 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni17E9;
unicode = 17E9;
},
{
glyphname = uni17D21780;
lastChange = "2020-01-28 18:27:34 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1170 -480 LINE",
"-822 -480 LINE",
"-822 -271 LINE SMOOTH",
"-822 -238 OFFCURVE",
"-765 -222 OFFCURVE",
"-650 -222 CURVE SMOOTH",
"-535 -222 OFFCURVE",
"-478 -238 OFFCURVE",
"-478 -271 CURVE SMOOTH",
"-478 -480 LINE",
"-130 -480 LINE",
"-130 -271 LINE SMOOTH",
"-130 -124 OFFCURVE",
"-303 -50 OFFCURVE",
"-650 -50 CURVE SMOOTH",
"-997 -50 OFFCURVE",
"-1170 -124 OFFCURVE",
"-1170 -271 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0120 0 0 2 1 0 2 105 3 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 2 2 0 97 0 0 0 18 77 3 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 34 18 33 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21780;
},
{
glyphname = uni17D21781;
lastChange = "2020-01-28 18:28:37 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-812 -199 LINE",
"-812 -160 OFFCURVE",
"-758 -141 OFFCURVE",
"-650 -141 CURVE SMOOTH",
"-542 -141 OFFCURVE",
"-488 -151 OFFCURVE",
"-488 -170 CURVE SMOOTH",
"-488 -197 OFFCURVE",
"-602 -221 OFFCURVE",
"-829 -242 CURVE SMOOTH",
"-1056 -263 OFFCURVE",
"-1170 -302 OFFCURVE",
"-1170 -359 CURVE SMOOTH",
"-1170 -440 OFFCURVE",
"-997 -480 OFFCURVE",
"-650 -480 CURVE SMOOTH",
"-303 -480 OFFCURVE",
"-130 -430 OFFCURVE",
"-130 -330 CURVE",
"-488 -330 LINE",
"-488 -369 OFFCURVE",
"-542 -389 OFFCURVE",
"-650 -389 CURVE SMOOTH",
"-758 -389 OFFCURVE",
"-812 -379 OFFCURVE",
"-812 -359 CURVE SMOOTH",
"-812 -342 OFFCURVE",
"-698 -320 OFFCURVE",
"-471 -295 CURVE SMOOTH",
"-244 -269 OFFCURVE",
"-130 -227 OFFCURVE",
"-130 -170 CURVE SMOOTH",
"-130 -90 OFFCURVE",
"-303 -50 OFFCURVE",
"-650 -50 CURVE SMOOTH",
"-997 -50 OFFCURVE",
"-1170 -100 OFFCURVE",
"-1170 -199 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 5 4 2 4 5 114 0 2 1 1 2 112 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 4 2 4 5 114 0 2 1 1 2 112 0 4 4 0 97 0 0 0 18 77 0 1 1 3 98 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 4 2 4 5 2 128 0 2 1 4 2 1 126 0 4 4 0 97 0 0 0 18 77 0 1 1 3 98 0 3 3 20 3 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 37 33 17 37 33 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21781;
},
{
glyphname = uni17D21782;
lastChange = "2020-01-29 02:17:03 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-822 -253 LINE SMOOTH",
"-822 -218 OFFCURVE",
"-765 -200 OFFCURVE",
"-650 -200 CURVE SMOOTH",
"-535 -200 OFFCURVE",
"-478 -218 OFFCURVE",
"-478 -253 CURVE SMOOTH",
"-478 -480 LINE",
"-130 -480 LINE",
"-130 -253 LINE SMOOTH",
"-130 -118 OFFCURVE",
"-303 -50 OFFCURVE",
"-650 -50 CURVE SMOOTH",
"-997 -50 OFFCURVE",
"-1170 -118 OFFCURVE",
"-1170 -253 CURVE SMOOTH",
"-1170 -480 LINE",
"-822 -480 LINE",
"-822 -465 LINE",
"-803 -421 OFFCURVE",
"-745 -399 OFFCURVE",
"-650 -399 CURVE",
"-650 -249 LINE",
"-725 -249 OFFCURVE",
"-782 -267 OFFCURVE",
"-822 -304 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01220 1 1 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 0 5 0 3 5 105 0 0 0 1 2 0 1 105 4 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 0 1 2 0 1 105 0 5 5 3 97 0 3 3 18 77 4 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01234 18 34 33 17 17 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21782;
},
{
glyphname = uni17D21783;
lastChange = "2020-01-28 18:32:12 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 -220 LINE SMOOTH",
"160 -233 OFFCURVE",
"143 -239 OFFCURVE",
"110 -239 CURVE SMOOTH",
"77 -239 OFFCURVE",
"60 -233 OFFCURVE",
"60 -220 CURVE SMOOTH",
"60 -50 LINE",
"-300 -50 LINE",
"-300 -220 LINE SMOOTH",
"-300 -233 OFFCURVE",
"-320 -239 OFFCURVE",
"-360 -239 CURVE SMOOTH",
"-400 -239 OFFCURVE",
"-420 -233 OFFCURVE",
"-420 -220 CURVE SMOOTH",
"-420 -50 LINE",
"-830 -50 LINE",
"-830 -187 LINE",
"-780 -187 LINE",
"-780 -220 LINE SMOOTH",
"-780 -393 OFFCURVE",
"-640 -480 OFFCURVE",
"-360 -480 CURVE SMOOTH",
"-271 -480 OFFCURVE",
"-191 -463 OFFCURVE",
"-119 -428 CURVE",
"-48 -463 OFFCURVE",
"35 -480 OFFCURVE",
"130 -480 CURVE SMOOTH",
"395 -480 OFFCURVE",
"528 -393 OFFCURVE",
"528 -220 CURVE SMOOTH",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01237 8 1 3 5 1 16 1 2 6 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0127 1 5 0 4 6 5 4 103 0 1 1 0 95 0 0 0 17 77 8 1 6 6 2 98 3 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 1 1 0 95 0 0 0 17 77 0 4 4 5 95 7 1 5 5 18 77 8 1 6 6 2 98 3 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01234 18 34 17 18 34 38 17 35 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17D21783;
},
{
glyphname = uni17D21784;
lastChange = "2020-01-29 02:10:06 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-329 -480 OFFCURVE",
"-130 -337 OFFCURVE",
"-130 -50 CURVE",
"-478 -50 LINE",
"-478 -214 OFFCURVE",
"-560 -296 OFFCURVE",
"-726 -296 CURVE SMOOTH",
"-791 -296 OFFCURVE",
"-822 -284 OFFCURVE",
"-822 -260 CURVE SMOOTH",
"-822 -233 OFFCURVE",
"-790 -219 OFFCURVE",
"-724 -219 CURVE",
"-724 -73 LINE",
"-1021 -73 OFFCURVE",
"-1170 -135 OFFCURVE",
"-1170 -260 CURVE SMOOTH",
"-1170 -407 OFFCURVE",
"-1022 -480 OFFCURVE",
"-726 -480 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 1 0 2 3 1 2 105 0 3 3 0 98 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 2 2 1 97 4 1 1 1 18 77 0 3 3 0 98 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 4 4 18 77 0 2 2 1 97 0 1 1 18 77 0 3 3 0 98 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 0 2 3 1 2 105 0 4 4 18 77 0 3 3 0 98 5 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 12 11 10 8 6 5 4 3 0 15 1 13 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21784;
},
{
glyphname = uni17D21785;
lastChange = "2020-01-29 02:10:34 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-108 -363 LINE",
"-219 -259 LINE",
"-163 -212 OFFCURVE",
"-135 -179 OFFCURVE",
"-135 -160 CURVE SMOOTH",
"-135 -87 OFFCURVE",
"-209 -50 OFFCURVE",
"-388 -50 CURVE SMOOTH",
"-503 -50 OFFCURVE",
"-561 -92 OFFCURVE",
"-561 -177 CURVE SMOOTH",
"-561 -203 OFFCURVE",
"-554 -228 OFFCURVE",
"-539 -253 CURVE",
"-620 -320 OFFCURVE",
"-697 -353 OFFCURVE",
"-772 -353 CURVE SMOOTH",
"-801 -353 OFFCURVE",
"-816 -346 OFFCURVE",
"-816 -331 CURVE",
"-709 -294 OFFCURVE",
"-656 -243 OFFCURVE",
"-656 -178 CURVE SMOOTH",
"-656 -50 LINE",
"-1024 -50 LINE",
"-1024 -178 LINE",
"-944 -178 LINE",
"-944 -205 OFFCURVE",
"-1041 -234 OFFCURVE",
"-1174 -265 CURVE",
"-1174 -331 LINE SMOOTH",
"-1174 -430 OFFCURVE",
"-1040 -480 OFFCURVE",
"-832 -480 CURVE SMOOTH",
"-696 -480 OFFCURVE",
"-567 -440 OFFCURVE",
"-445 -359 CURVE",
"-313 -474 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01226 18 14 6 4 3 1 27 1 2 0 3 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0124 1 2 0 1 3 2 1 103 0 3 3 0 97 0 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 2 97 4 1 2 2 18 77 0 3 3 0 97 0 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01236 36 17 20 34 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21785;
},
{
glyphname = uni17D21786;
lastChange = "2020-01-29 02:10:55 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1131 -50 LINE",
"-1131 -180 LINE",
"-1198 -180 OFFCURVE",
"-1232 -227 OFFCURVE",
"-1232 -320 CURVE SMOOTH",
"-1232 -427 OFFCURVE",
"-1157 -480 OFFCURVE",
"-977 -480 CURVE SMOOTH",
"-840 -480 OFFCURVE",
"-772 -443 OFFCURVE",
"-772 -369 CURVE",
"-724 -369 OFFCURVE",
"-678 -388 OFFCURVE",
"-633 -425 CURVE SMOOTH",
"-588 -462 OFFCURVE",
"-525 -480 OFFCURVE",
"-444 -480 CURVE SMOOTH",
"-255 -480 OFFCURVE",
"-130 -410 OFFCURVE",
"-130 -269 CURVE SMOOTH",
"-130 -50 LINE",
"-547 -50 LINE",
"-547 -166 LINE",
"-489 -166 LINE",
"-489 -269 LINE SMOOTH",
"-489 -288 OFFCURVE",
"-503 -297 OFFCURVE",
"-531 -298 CURVE SMOOTH",
"-562 -298 OFFCURVE",
"-601 -280 OFFCURVE",
"-647 -244 CURVE SMOOTH",
"-692 -207 OFFCURVE",
"-734 -189 OFFCURVE",
"-772 -189 CURVE",
"-772 -50 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0124 9 2 0 0 3 1 0 3 103 8 1 1 0 6 5 1 6 106 0 2 2 5 97 7 1 5 5 20 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0128 1 1 0 6 5 1 6 106 0 3 3 0 95 4 9 2 0 0 18 77 0 2 2 5 97 7 1 5 5 20 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0121 0 23 22 20 18 17 16 15 13 11 10 9 8 6 4 3 2 0 25 1 24 10 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21786;
},
{
glyphname = uni17D21787;
lastChange = "2020-01-29 02:11:15 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"13 -157 LINE",
"-99 -157 LINE",
"-103 -86 OFFCURVE",
"-196 -50 OFFCURVE",
"-407 -50 CURVE SMOOTH",
"-488 -50 OFFCURVE",
"-528 -84 OFFCURVE",
"-528 -151 CURVE SMOOTH",
"-528 -154 LINE SMOOTH",
"-528 -223 OFFCURVE",
"-497 -272 OFFCURVE",
"-424 -281 CURVE",
"-429 -304 OFFCURVE",
"-443 -316 OFFCURVE",
"-466 -316 CURVE SMOOTH",
"-489 -316 OFFCURVE",
"-547 -290 OFFCURVE",
"-638 -238 CURVE",
"-724 -290 OFFCURVE",
"-783 -316 OFFCURVE",
"-816 -316 CURVE SMOOTH",
"-845 -316 OFFCURVE",
"-859 -294 OFFCURVE",
"-859 -250 CURVE SMOOTH",
"-859 -229 OFFCURVE",
"-822 -219 OFFCURVE",
"-748 -219 CURVE",
"-748 -50 LINE",
"-1023 -50 OFFCURVE",
"-1191 -117 OFFCURVE",
"-1191 -250 CURVE SMOOTH",
"-1191 -403 OFFCURVE",
"-1053 -480 OFFCURVE",
"-836 -480 CURVE SMOOTH",
"-743 -480 OFFCURVE",
"-675 -447 OFFCURVE",
"-632 -382 CURVE",
"-563 -446 OFFCURVE",
"-491 -478 OFFCURVE",
"-414 -478 CURVE SMOOTH",
"-271 -478 OFFCURVE",
"-199 -459 OFFCURVE",
"-168 -420 CURVE SMOOTH",
"-137 -381 OFFCURVE",
"-117 -353 OFFCURVE",
"-108 -336 CURVE",
"13 -336 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01224 20 2 5 4 7 1 1 0 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0127 1 3 0 4 5 3 4 105 0 8 0 0 1 8 0 103 6 1 5 5 1 98 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 8 0 0 1 8 0 103 0 4 4 3 97 7 1 3 3 18 77 6 1 5 5 1 98 2 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 38 34 34 17 18 34 34 17 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21787;
},
{
glyphname = uni17D21788;
lastChange = "2020-01-29 02:07:52 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 704 LINE",
"160 704 LINE",
"160 -220 LINE SMOOTH",
"160 -269 OFFCURVE",
"125 -269 QCURVE SMOOTH",
"60 -269 OFFCURVE",
"60 -220 QCURVE SMOOTH",
"60 -50 LINE",
"-300 -50 LINE",
"-300 -220 LINE SMOOTH",
"-300 -269 OFFCURVE",
"-345 -269 QCURVE SMOOTH",
"-390 -269 OFFCURVE",
"-390 -220 QCURVE SMOOTH",
"-390 -50 OFFCURVE",
"-740 -50 QCURVE SMOOTH",
"-1120 -50 OFFCURVE",
"-1120 -220 QCURVE SMOOTH",
"-1120 -480 LINE",
"-740 -480 LINE",
"-740 -311 LINE",
"-790 -311 LINE",
"-790 -220 LINE SMOOTH",
"-790 -198 OFFCURVE",
"-740 -198 QCURVE SMOOTH",
"-690 -198 OFFCURVE",
"-690 -220 QCURVE SMOOTH",
"-690 -480 OFFCURVE",
"-350 -480 QCURVE SMOOTH",
"-257 -480 OFFCURVE",
"-119 -428 QCURVE",
"-12 -480 OFFCURVE",
"120 -480 QCURVE SMOOTH",
"528 -480 OFFCURVE",
"528 -220 QCURVE SMOOTH",
"528 704 LINE SMOOTH",
"528 772 OFFCURVE",
"428 826 QCURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"20 1160 OFFCURVE",
"20 962 QCURVE SMOOTH",
"20 827 LINE",
"160 704 LINE",
"160 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01245 8 1 3 7 1 16 1 2 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0129 1 7 0 4 8 7 4 105 0 1 1 0 95 0 0 0 17 77 10 1 8 8 2 98 6 3 2 2 2 20 77 0 5 5 2 97 6 3 2 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 1 1 0 95 0 0 0 17 77 0 4 4 7 97 9 1 7 7 18 77 10 1 8 8 2 98 6 3 2 2 2 20 77 0 5 5 2 97 6 3 2 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01243 41 39 38 34 34 17 18 34 34 38 17 35 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17D21788;
},
{
glyphname = uni17D21789;
lastChange = "2020-01-29 02:11:53 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-522 -214 LINE",
"-481 -214 OFFCURVE",
"-461 -228 OFFCURVE",
"-461 -255 CURVE SMOOTH",
"-461 -282 OFFCURVE",
"-484 -296 OFFCURVE",
"-530 -296 CURVE SMOOTH",
"-584 -296 OFFCURVE",
"-652 -266 OFFCURVE",
"-733 -205 CURVE SMOOTH",
"-814 -144 OFFCURVE",
"-941 -114 OFFCURVE",
"-1112 -114 CURVE SMOOTH",
"-1192 -114 LINE",
"-1192 -308 LINE",
"-1112 -308 LINE SMOOTH",
"-996 -308 OFFCURVE",
"-900 -337 OFFCURVE",
"-823 -394 CURVE SMOOTH",
"-746 -451 OFFCURVE",
"-648 -480 OFFCURVE",
"-530 -480 CURVE SMOOTH",
"-258 -480 OFFCURVE",
"-122 -405 OFFCURVE",
"-122 -255 CURVE SMOOTH",
"-122 -118 OFFCURVE",
"-255 -50 OFFCURVE",
"-522 -50 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0126 1 0 0 5 2 0 5 105 0 3 0 2 4 3 2 105 0 4 4 1 97 0 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 2 4 3 2 105 0 5 5 0 97 6 1 0 0 18 77 0 4 4 1 97 0 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 17 16 14 12 11 9 8 6 5 3 0 19 1 18 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21789;
},
{
glyphname = uni17D21789.a;
lastChange = "2020-01-29 02:08:57 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-110 -159 LINE SMOOTH",
"-110 -86 OFFCURVE",
"-181 -50 OFFCURVE",
"-324 -50 CURVE SMOOTH",
"-1097 -50 LINE",
"-1280 -126 LINE",
"-1502 -50 LINE",
"-1626 -50 LINE SMOOTH",
"-1769 -50 OFFCURVE",
"-1840 -86 OFFCURVE",
"-1840 -159 CURVE SMOOTH",
"-1840 -298 LINE",
"-1502 -298 LINE",
"-1502 -178 LINE",
"-1280 -254 LINE",
"-1097 -178 LINE",
"-1097 -298 LINE",
"-790 -298 LINE",
"-790 -179 LINE",
"-448 -179 LINE",
"-448 -381 LINE",
"-910 -356 OFFCURVE",
"-1230 -343 OFFCURVE",
"-1408 -343 CURVE SMOOTH",
"-1840 -343 LINE",
"-1840 -449 LINE",
"-1408 -449 LINE SMOOTH",
"-1293 -449 OFFCURVE",
"-1152 -454 OFFCURVE",
"-983 -465 CURVE SMOOTH",
"-814 -475 OFFCURVE",
"-635 -480 OFFCURVE",
"-446 -480 CURVE SMOOTH",
"-222 -480 OFFCURVE",
"-110 -450 OFFCURVE",
"-110 -390 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01224 17 15 3 2 5 16 1 3 2 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 2 3 5 2 87 6 1 5 4 1 3 1 5 3 103 0 1 1 0 95 0 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 2 5 97 6 1 5 5 18 77 4 1 3 3 5 97 6 1 5 5 18 77 0 1 1 0 95 0 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01234 34 20 17 17 49 81 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21789.a;
},
{
glyphname = uni17D2178A;
lastChange = "2020-01-29 02:12:34 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1170 -325 LINE SMOOTH",
"-1170 -428 OFFCURVE",
"-1078 -480 OFFCURVE",
"-893 -480 CURVE SMOOTH",
"-676 -480 LINE",
"-676 -325 LINE",
"-822 -325 LINE",
"-822 -291 LINE SMOOTH",
"-822 -238 OFFCURVE",
"-765 -212 OFFCURVE",
"-650 -212 CURVE SMOOTH",
"-535 -212 OFFCURVE",
"-478 -238 OFFCURVE",
"-478 -291 CURVE SMOOTH",
"-478 -480 LINE",
"-130 -480 LINE",
"-130 -291 LINE SMOOTH",
"-130 -130 OFFCURVE",
"-303 -50 OFFCURVE",
"-650 -50 CURVE SMOOTH",
"-997 -50 OFFCURVE",
"-1170 -130 OFFCURVE",
"-1170 -291 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 2 3 0 2 105 0 3 3 1 95 4 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 97 0 0 0 18 77 0 3 3 1 95 4 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 18 34 18 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178A;
},
{
glyphname = uni17D2178B;
lastChange = "2020-01-29 02:13:05 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1172 -480 LINE",
"-812 -480 LINE",
"-649 -419 LINE",
"-486 -480 LINE",
"-126 -480 LINE",
"-126 -250 LINE",
"-37 -250 LINE",
"-37 -100 LINE",
"-126 -100 LINE",
"-126 -50 LINE",
"-486 -50 LINE",
"-486 -100 LINE",
"-1172 -100 LINE"
);
},
{
closed = 1;
nodes = (
"-649 -275 LINE",
"-812 -323 LINE",
"-812 -250 LINE",
"-486 -250 LINE",
"-486 -323 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01217 16 13 10 4 4 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0122 1 0 6 1 3 4 0 3 103 0 1 1 4 95 5 1 4 4 20 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0122 1 0 6 1 3 4 0 3 103 0 1 1 18 77 5 1 4 4 20 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01218 18 17 17 17 17 16 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178B;
},
{
glyphname = uni17D2178C;
lastChange = "2020-01-29 02:13:44 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-130 -50 LINE",
"-489 -50 LINE",
"-650 -130 LINE",
"-811 -50 LINE",
"-1170 -50 LINE",
"-1170 -225 LINE",
"-811 -225 LINE",
"-811 -164 LINE",
"-650 -228 LINE",
"-489 -164 LINE",
"-489 -191 LINE SMOOTH",
"-489 -232 OFFCURVE",
"-716 -262 OFFCURVE",
"-1170 -283 CURVE",
"-1170 -480 LINE",
"-801 -480 LINE",
"-489 -435 LINE",
"-489 -480 LINE",
"-130 -480 LINE",
"-130 -308 LINE",
"-489 -308 LINE",
"-489 -346 LINE",
"-811 -390 LINE",
"-811 -346 LINE",
"-356 -289 OFFCURVE",
"-129 -238 OFFCURVE",
"-130 -194 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01222 17 15 3 3 4 16 12 2 0 3 9 4 3 2 4 1 0 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0125 1 4 0 3 0 4 3 103 0 0 0 1 96 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 3 4 95 5 1 4 4 18 77 0 0 0 1 96 2 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01218 17 23 18 17 21 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178C;
},
{
glyphname = uni17D2178D;
lastChange = "2020-01-29 02:14:38 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 -240 LINE",
"98 -216 OFFCURVE",
"28 -204 OFFCURVE",
"-50 -204 CURVE SMOOTH",
"-130 -204 LINE",
"-130 -50 LINE",
"-488 -50 LINE",
"-650 -135 LINE",
"-812 -50 LINE",
"-1170 -50 LINE",
"-1170 -480 LINE",
"-703 -480 LINE",
"-703 -317 LINE",
"-812 -317 LINE",
"-812 -218 LINE",
"-650 -301 LINE",
"-488 -218 LINE",
"-488 -480 LINE",
"-130 -480 LINE",
"-130 -360 LINE",
"-50 -360 LINE SMOOTH",
"78 -360 OFFCURVE",
"160 -411 OFFCURVE",
"160 -480 CURVE",
"528 -480 LINE",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01236 8 1 3 7 1 29 22 20 3 9 7 35 21 2 5 9 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 9 0 3 2 9 3 105 0 1 1 0 95 0 0 0 17 77 8 1 7 7 2 95 6 4 2 2 2 20 77 0 5 5 2 96 6 4 2 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 9 0 3 2 9 3 105 0 1 1 0 95 0 0 0 17 77 8 1 7 7 18 77 0 5 5 2 96 6 4 2 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01234 32 18 17 17 20 17 34 21 17 35 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17D2178D;
},
{
glyphname = uni17D2178E;
lastChange = "2020-01-29 02:15:36 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1778 -480 LINE",
"-1410 -480 LINE",
"-1269 -375 LINE",
"-1128 -480 LINE",
"-760 -480 LINE",
"-760 -270 LINE SMOOTH",
"-760 -238 OFFCURVE",
"-713 -222 OFFCURVE",
"-619 -222 CURVE SMOOTH",
"-525 -222 OFFCURVE",
"-478 -238 OFFCURVE",
"-478 -270 CURVE SMOOTH",
"-478 -480 LINE",
"-110 -480 LINE",
"-110 -270 LINE SMOOTH",
"-110 -123 OFFCURVE",
"-280 -50 OFFCURVE",
"-619 -50 CURVE SMOOTH",
"-958 -50 OFFCURVE",
"-1128 -121 OFFCURVE",
"-1128 -263 CURVE SMOOTH",
"-1128 -301 LINE",
"-1269 -209 LINE",
"-1410 -301 LINE",
"-1410 -263 LINE SMOOTH",
"-1410 -121 OFFCURVE",
"-1580 -50 OFFCURVE",
"-1919 -50 CURVE SMOOTH",
"-2258 -50 OFFCURVE",
"-2428 -123 OFFCURVE",
"-2428 -270 CURVE SMOOTH",
"-2428 -325 LINE SMOOTH",
"-2428 -428 OFFCURVE",
"-2350 -480 OFFCURVE",
"-2194 -480 CURVE SMOOTH",
"-1990 -480 LINE",
"-1990 -327 LINE",
"-2060 -327 LINE",
"-2060 -270 LINE SMOOTH",
"-2060 -238 OFFCURVE",
"-2013 -222 OFFCURVE",
"-1919 -222 CURVE SMOOTH",
"-1825 -222 OFFCURVE",
"-1778 -238 OFFCURVE",
"-1778 -270 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01217 1 0 3 18 16 2 1 0 33 1 2 1 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0124 1 3 6 1 0 1 3 0 105 0 1 1 2 95 8 7 5 3 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0126 1 0 0 3 97 4 1 3 3 18 77 0 1 1 2 95 8 7 5 3 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01218 18 34 18 38 35 33 18 33 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178E;
},
{
glyphname = uni17D2178F;
lastChange = "2020-01-29 02:16:15 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1170 -315 LINE SMOOTH",
"-1170 -425 OFFCURVE",
"-1078 -480 OFFCURVE",
"-893 -480 CURVE SMOOTH",
"-676 -480 LINE",
"-676 -315 LINE",
"-822 -315 LINE",
"-822 -281 LINE SMOOTH",
"-822 -228 OFFCURVE",
"-765 -202 OFFCURVE",
"-650 -202 CURVE SMOOTH",
"-535 -202 OFFCURVE",
"-478 -228 OFFCURVE",
"-478 -281 CURVE SMOOTH",
"-478 -480 LINE",
"-130 -480 LINE",
"-130 -281 LINE SMOOTH",
"-130 -127 OFFCURVE",
"-303 -50 OFFCURVE",
"-650 -50 CURVE SMOOTH",
"-997 -50 OFFCURVE",
"-1170 -127 OFFCURVE",
"-1170 -281 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 2 3 0 2 105 0 3 3 1 95 4 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 97 0 0 0 18 77 0 3 3 1 95 4 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 18 34 18 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178F;
},
{
glyphname = uni17D21790;
lastChange = "2020-01-29 02:18:36 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-80 -480 LINE",
"-80 -289 LINE",
"-218 -289 LINE SMOOTH",
"-321 -289 OFFCURVE",
"-411 -249 OFFCURVE",
"-490 -170 CURVE SMOOTH",
"-569 -90 OFFCURVE",
"-672 -50 OFFCURVE",
"-800 -50 CURVE SMOOTH",
"-1060 -50 OFFCURVE",
"-1190 -136 OFFCURVE",
"-1190 -308 CURVE SMOOTH",
"-1190 -479 LINE",
"-718 -479 LINE",
"-718 -320 LINE",
"-839 -320 LINE",
"-839 -308 LINE SMOOTH",
"-839 -267 OFFCURVE",
"-816 -246 OFFCURVE",
"-770 -246 CURVE SMOOTH",
"-694 -246 OFFCURVE",
"-616 -285 OFFCURVE",
"-535 -363 CURVE SMOOTH",
"-454 -441 OFFCURVE",
"-348 -480 OFFCURVE",
"-218 -480 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0126 1 4 1 8 1 0 4 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 3 0 1 4 3 1 105 0 4 4 0 97 2 5 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 3 97 0 3 3 18 77 0 4 4 0 97 2 5 2 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0122 0 17 15 14 12 10 9 5 3 0 19 2 18 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21790;
},
{
glyphname = uni17D21791;
lastChange = "2020-01-29 02:18:56 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1174 -302 LINE SMOOTH",
"-1174 -421 OFFCURVE",
"-1040 -480 OFFCURVE",
"-772 -480 CURVE SMOOTH",
"-643 -480 OFFCURVE",
"-550 -434 OFFCURVE",
"-494 -343 CURVE",
"-494 -480 LINE",
"-130 -480 LINE",
"-130 -124 LINE",
"-494 -124 LINE",
"-537 -257 OFFCURVE",
"-629 -324 OFFCURVE",
"-772 -324 CURVE SMOOTH",
"-799 -324 OFFCURVE",
"-812 -317 OFFCURVE",
"-812 -302 CURVE",
"-655 -271 OFFCURVE",
"-576 -220 OFFCURVE",
"-576 -148 CURVE SMOOTH",
"-576 -50 LINE",
"-944 -50 LINE",
"-944 -167 LINE",
"-904 -167 LINE",
"-904 -188 OFFCURVE",
"-994 -211 OFFCURVE",
"-1174 -238 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01221 8 2 2 0 16 1 4 2 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 0 2 1 0 103 0 3 3 4 97 5 1 4 4 20 77 0 2 2 4 97 5 1 4 4 20 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 3 4 97 5 1 4 4 20 77 0 0 0 1 95 0 1 1 18 77 0 2 2 4 97 5 1 4 4 20 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01234 17 17 36 17 18 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21791;
},
{
glyphname = uni17D21792;
lastChange = "2020-01-29 02:19:18 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-476 -80 LINE",
"-1170 -251 LINE",
"-1170 -333 LINE SMOOTH",
"-1170 -431 OFFCURVE",
"-1051 -480 OFFCURVE",
"-814 -480 CURVE SMOOTH",
"-698 -480 OFFCURVE",
"-627 -438 OFFCURVE",
"-600 -355 CURVE",
"-537 -375 OFFCURVE",
"-490 -385 OFFCURVE",
"-458 -385 CURVE SMOOTH",
"-239 -385 OFFCURVE",
"-130 -336 OFFCURVE",
"-130 -238 CURVE SMOOTH",
"-130 -50 LINE",
"-476 -50 LINE"
);
},
{
closed = 1;
nodes = (
"-476 -193 LINE",
"-476 -219 LINE SMOOTH",
"-476 -237 OFFCURVE",
"-484 -246 OFFCURVE",
"-501 -246 CURVE SMOOTH",
"-518 -246 OFFCURVE",
"-551 -240 OFFCURVE",
"-602 -228 CURVE"
);
},
{
closed = 1;
nodes = (
"-848 -312 LINE",
"-728 -274 LINE",
"-728 -316 LINE SMOOTH",
"-728 -336 OFFCURVE",
"-756 -346 OFFCURVE",
"-811 -346 CURVE SMOOTH",
"-836 -346 OFFCURVE",
"-848 -340 OFFCURVE",
"-848 -329 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01220 12 2 3 0 29 28 11 3 4 3 6 1 1 4 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 0 4 0 3 114 5 1 0 0 1 2 0 1 105 0 4 4 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 4 0 3 4 128 5 1 0 0 1 2 0 1 105 0 4 4 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 4 0 3 4 128 0 1 1 0 95 5 1 0 0 18 77 0 4 4 2 97 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 26 24 18 16 9 7 5 3 0 14 1 13 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21792;
},
{
glyphname = uni17D21793;
lastChange = "2020-01-29 02:20:05 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-510 -402 LINE",
"-510 -454 OFFCURVE",
"-448 -480 OFFCURVE",
"-325 -480 CURVE SMOOTH",
"-162 -480 OFFCURVE",
"-80 -446 OFFCURVE",
"-80 -379 CURVE SMOOTH",
"-80 -298 OFFCURVE",
"-113 -258 OFFCURVE",
"-180 -258 CURVE",
"-180 -216 LINE",
"-30 -216 LINE",
"-30 -83 LINE",
"-180 -83 LINE",
"-180 -50 LINE",
"-510 -50 LINE",
"-510 -83 LINE",
"-840 -83 LINE SMOOTH",
"-1073 -83 OFFCURVE",
"-1190 -143 OFFCURVE",
"-1190 -264 CURVE SMOOTH",
"-1190 -387 OFFCURVE",
"-1067 -448 OFFCURVE",
"-820 -448 CURVE"
);
},
{
closed = 1;
nodes = (
"-860 -232 OFFCURVE",
"-833 -216 OFFCURVE",
"-780 -216 CURVE SMOOTH",
"-510 -216 LINE",
"-510 -258 LINE",
"-820 -287 LINE",
"-847 -287 OFFCURVE",
"-860 -280 OFFCURVE",
"-860 -265 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\01218 1 0 5 1 76 24 1 5 1 75 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\01218 1 0 7 1 76 24 1 5 1 75 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 2 2 1 8 1 4 5 1 4 103 7 1 5 5 0 98 6 9 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 2 1 2 133 3 1 1 8 1 4 5 1 4 103 7 1 5 5 0 98 9 1 0 0 20 77 7 1 5 5 6 98 0 6 6 20 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 2 1 2 133 3 1 1 8 1 4 5 1 4 103 0 7 7 0 97 9 1 0 0 20 77 0 5 5 6 98 0 6 6 20 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 2 2 18 77 8 1 4 4 1 95 3 1 1 1 18 77 0 7 7 0 97 9 1 0 0 20 77 0 5 5 6 98 0 6 6 20 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0123 1 1 8 1 4 5 1 4 103 0 2 2 18 77 0 7 7 0 97 9 1 0 0 20 77 0 5 5 6 98 0 6 6 20 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0123 1 1 8 1 4 5 1 4 103 0 7 9 1 0 6 7 0 105 0 2 2 18 77 0 5 5 6 98 0 6 6 20 6 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0121 0 27 25 23 22 17 15 13 12 11 10 9 8 7 6 5 3 0 20 1 19 10 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21793;
},
{
glyphname = uni17D21794;
lastChange = "2020-01-29 02:20:47 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 -286 LINE",
"34 -180 LINE",
"-94 -287 LINE",
"-94 -175 LINE",
"-34 -175 LINE",
"-34 -50 LINE",
"-462 -50 LINE",
"-462 -480 LINE",
"-63 -480 LINE",
"34 -401 LINE",
"130 -480 LINE",
"528 -480 LINE",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01224 8 1 3 4 1 23 22 21 14 4 2 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 4 0 5 2 4 5 103 0 1 1 0 95 0 0 0 17 77 3 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 95 0 0 0 17 77 0 5 5 4 95 0 4 4 18 77 3 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 17 18 21 17 35 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17D21794;
},
{
glyphname = uni17D21795;
lastChange = "2020-01-29 02:21:08 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-130 -50 LINE",
"-581 -50 LINE",
"-581 -182 LINE",
"-488 -182 LINE",
"-488 -297 LINE",
"-650 -200 LINE",
"-812 -297 LINE",
"-812 -50 LINE",
"-1170 -50 LINE",
"-1170 -480 LINE",
"-812 -480 LINE",
"-650 -383 LINE",
"-488 -480 LINE",
"-130 -480 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\0129 8 7 2 4 0 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 2 3 87 4 1 2 2 0 95 1 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 3 2 95 4 1 2 2 18 77 1 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 20 17 18 16 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21795;
},
{
glyphname = uni17D21796;
lastChange = "2020-01-29 02:22:08 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-130 -480 LINE",
"-130 -50 LINE",
"-488 -50 LINE",
"-650 -135 LINE",
"-812 -50 LINE",
"-1170 -50 LINE",
"-1170 -305 LINE SMOOTH",
"-1170 -422 OFFCURVE",
"-1082 -480 OFFCURVE",
"-906 -480 CURVE SMOOTH",
"-703 -480 LINE",
"-703 -307 LINE",
"-812 -307 LINE",
"-812 -208 LINE",
"-650 -291 LINE",
"-488 -208 LINE",
"-488 -480 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01213 4 3 2 4 1 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0124 1 3 3 0 95 2 5 2 0 0 20 77 0 1 1 0 96 2 5 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0124 1 3 3 18 77 0 1 1 0 96 2 5 2 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 15 14 12 11 9 7 6 5 0 17 1 16 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21796;
},
{
glyphname = uni17D21797;
lastChange = "2020-01-29 02:22:50 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-822 -480 LINE",
"-822 -271 LINE SMOOTH",
"-822 -218 OFFCURVE",
"-765 -192 OFFCURVE",
"-650 -192 CURVE SMOOTH",
"-535 -192 OFFCURVE",
"-478 -218 OFFCURVE",
"-478 -271 CURVE SMOOTH",
"-478 -480 LINE",
"-130 -480 LINE",
"-130 -271 LINE SMOOTH",
"-130 -124 OFFCURVE",
"-303 -50 OFFCURVE",
"-650 -50 CURVE SMOOTH",
"-997 -50 OFFCURVE",
"-1170 -124 OFFCURVE",
"-1170 -271 CURVE SMOOTH",
"-1170 -300 LINE",
"-1257 -300 LINE",
"-1257 -480 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 0 4 1 2 4 105 0 1 1 0 95 3 5 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 4 4 2 97 0 2 2 18 77 0 1 1 0 95 3 5 2 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 14 12 10 9 7 5 3 2 0 17 1 16 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21797;
},
{
glyphname = uni17D21798;
lastChange = "2020-01-29 02:23:46 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-466 -166 LINE",
"-1130 -166 LINE",
"-1130 -377 LINE",
"-466 -377 LINE",
"-466 -446 OFFCURVE",
"-388 -480 OFFCURVE",
"-233 -480 CURVE SMOOTH",
"-78 -480 OFFCURVE",
"0 -427 OFFCURVE",
"0 -322 CURVE SMOOTH",
"0 -218 OFFCURVE",
"-41 -166 OFFCURVE",
"-123 -166 CURVE",
"-123 -50 LINE",
"-466 -50 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 1 1 0 112 0 3 2 1 3 88 4 1 1 1 2 98 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 2 1 3 88 0 0 0 18 77 4 1 1 1 2 98 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 34 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21798;
},
{
glyphname = uni17D21799;
lastChange = "2020-01-29 02:24:27 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"160 -205 LINE SMOOTH",
"160 -248 OFFCURVE",
"123 -269 OFFCURVE",
"50 -269 CURVE SMOOTH",
"-43 -269 OFFCURVE",
"-90 -248 OFFCURVE",
"-90 -205 CURVE SMOOTH",
"-90 -50 LINE",
"-458 -50 LINE",
"-458 -205 LINE SMOOTH",
"-458 -388 OFFCURVE",
"-289 -480 OFFCURVE",
"50 -480 CURVE SMOOTH",
"369 -480 OFFCURVE",
"528 -388 OFFCURVE",
"528 -205 CURVE SMOOTH",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1160 LINE",
"238 1160 LINE SMOOTH",
"93 1160 OFFCURVE",
"20 1094 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01224 8 1 3 3 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 1 4 4 3 114 0 1 1 0 95 0 0 0 17 77 0 4 4 2 98 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 1 4 1 3 4 128 0 1 1 0 95 0 0 0 17 77 0 4 4 2 98 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 1 0 95 0 0 0 17 77 0 3 3 18 77 0 4 4 2 98 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 18 38 17 35 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17D21799;
},
{
glyphname = uni17D2179A;
lastChange = "2020-01-29 05:05:12 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"100 -180 LINE SMOOTH",
"100 -380 OFFCURVE",
"259 -480 OFFCURVE",
"578 -480 CURVE SMOOTH",
"897 -480 OFFCURVE",
"1056 -380 OFFCURVE",
"1056 -180 CURVE SMOOTH",
"1056 -60 LINE",
"688 -60 LINE",
"688 -180 LINE SMOOTH",
"688 -227 OFFCURVE",
"651 -250 OFFCURVE",
"578 -250 CURVE SMOOTH",
"505 -250 OFFCURVE",
"468 -227 OFFCURVE",
"468 -180 CURVE SMOOTH",
"468 714 LINE SMOOTH",
"468 759 OFFCURVE",
"443 800 OFFCURVE",
"393 836 CURVE SMOOTH",
"318 890 LINE",
"318 932 LINE",
"518 932 LINE",
"518 1150 LINE",
"228 1150 LINE SMOOTH",
"89 1150 OFFCURVE",
"20 1091 OFFCURVE",
"20 972 CURVE SMOOTH",
"20 837 LINE",
"100 714 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01224 8 1 3 3 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 1 2 2 3 114 0 1 1 0 95 0 0 0 17 77 0 2 2 4 98 0 4 4 20 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 1 2 1 3 2 128 0 1 1 0 95 0 0 0 17 77 0 2 2 4 98 0 4 4 20 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 1 0 95 0 0 0 17 77 0 3 3 18 77 0 2 2 4 98 0 4 4 20 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 18 38 17 35 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni17D2179A;
},
{
glyphname = uni17D2179B;
lastChange = "2020-01-29 05:05:43 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-790 -213 OFFCURVE",
"-774 -226 OFFCURVE",
"-774 -252 CURVE SMOOTH",
"-774 -278 LINE SMOOTH",
"-774 -413 OFFCURVE",
"-675 -480 OFFCURVE",
"-477 -480 CURVE SMOOTH",
"-226 -480 OFFCURVE",
"-100 -413 OFFCURVE",
"-100 -278 CURVE SMOOTH",
"-100 -50 LINE",
"-428 -50 LINE",
"-428 -278 LINE SMOOTH",
"-428 -304 OFFCURVE",
"-444 -317 OFFCURVE",
"-477 -317 CURVE SMOOTH",
"-510 -317 OFFCURVE",
"-526 -304 OFFCURVE",
"-526 -278 CURVE SMOOTH",
"-526 -252 LINE SMOOTH",
"-526 -117 OFFCURVE",
"-625 -50 OFFCURVE",
"-823 -50 CURVE SMOOTH",
"-1074 -50 OFFCURVE",
"-1200 -117 OFFCURVE",
"-1200 -252 CURVE SMOOTH",
"-1200 -480 LINE",
"-872 -480 LINE",
"-872 -252 LINE SMOOTH",
"-872 -226 OFFCURVE",
"-856 -213 OFFCURVE",
"-823 -213 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 2 6 1 0 3 2 0 105 0 3 3 1 98 5 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0126 1 0 0 2 97 4 1 2 2 18 77 0 3 3 1 98 5 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 20 18 16 15 13 11 8 6 4 3 0 25 1 23 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2179B;
},
{
glyphname = uni17D2179C;
lastChange = "2020-01-29 05:06:06 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-812 -292 LINE",
"-812 -292 LINE",
"-489 -183 LINE",
"-489 -303 OFFCURVE",
"-776 -303 QCURVE SMOOTH",
"-812 -303 OFFCURVE",
"-812 -292 QCURVE",
"-812 -292 LINE"
);
},
{
closed = 1;
nodes = (
"-345 -480 OFFCURVE",
"-130 -381 OFFCURVE",
"-130 -183 CURVE SMOOTH",
"-130 -50 LINE",
"-489 -50 LINE",
"-1170 -231 LINE",
"-1170 -297 LINE SMOOTH",
"-1170 -419 OFFCURVE",
"-1039 -480 OFFCURVE",
"-776 -480 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01214 3 2 2 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 2 2 1 112 0 2 2 0 98 3 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 2 1 133 0 2 2 0 98 3 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 1 18 77 0 2 2 0 98 3 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0121 0 13 12 5 4 0 9 1 7 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2179C;
},
{
glyphname = uni17D2179F;
lastChange = "2020-01-29 05:06:45 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"528 0 LINE",
"600 0 LINE",
"600 218 LINE",
"528 218 LINE",
"528 704 LINE SMOOTH",
"528 749 OFFCURVE",
"495 790 OFFCURVE",
"428 826 CURVE SMOOTH",
"328 880 LINE",
"328 932 LINE",
"528 932 LINE",
"528 1150 LINE",
"238 1150 LINE SMOOTH",
"93 1150 OFFCURVE",
"20 1087 OFFCURVE",
"20 962 CURVE SMOOTH",
"20 827 LINE",
"160 704 LINE",
"160 218 LINE",
"40 218 LINE",
"40 0 LINE",
"160 0 LINE",
"160 -205 LINE SMOOTH",
"160 -248 OFFCURVE",
"123 -269 OFFCURVE",
"50 -269 CURVE SMOOTH",
"-43 -269 OFFCURVE",
"-90 -248 OFFCURVE",
"-90 -205 CURVE SMOOTH",
"-90 -50 LINE",
"-528 -50 LINE",
"-528 -196 LINE",
"-458 -196 LINE",
"-458 -205 LINE SMOOTH",
"-458 -388 OFFCURVE",
"-289 -480 OFFCURVE",
"50 -480 CURVE SMOOTH",
"369 -480 OFFCURVE",
"528 -388 OFFCURVE",
"528 -205 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01226 19 18 3 4 6 6 4 2 2 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 1 3 2 2 1 114 0 6 6 5 95 0 5 5 17 77 7 1 4 4 3 95 8 1 3 3 19 77 0 2 2 0 98 0 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 1 3 2 3 1 2 128 0 6 6 5 95 0 5 5 17 77 7 1 4 4 3 95 8 1 3 3 19 77 0 2 2 0 98 0 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 6 6 5 95 0 5 5 17 77 7 1 4 4 3 95 8 1 3 3 19 77 0 1 1 18 77 0 2 2 0 98 0 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 21 17 36 17 18 34 20 33 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni17D2179F;
},
{
glyphname = uni17D217A0;
lastChange = "2020-01-29 05:07:44 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-856 -317 OFFCURVE",
"-872 -304 OFFCURVE",
"-872 -278 CURVE SMOOTH",
"-872 -50 LINE",
"-1200 -50 LINE",
"-1200 -278 LINE SMOOTH",
"-1200 -413 OFFCURVE",
"-1078 -480 OFFCURVE",
"-833 -480 CURVE SMOOTH",
"-628 -480 OFFCURVE",
"-526 -413 OFFCURVE",
"-526 -278 CURVE SMOOTH",
"-526 -252 LINE SMOOTH",
"-526 -226 OFFCURVE",
"-510 -213 OFFCURVE",
"-477 -213 CURVE SMOOTH",
"-444 -213 OFFCURVE",
"-428 -226 OFFCURVE",
"-428 -252 CURVE SMOOTH",
"-428 -480 LINE",
"-100 -480 LINE",
"-100 -252 LINE SMOOTH",
"-100 -117 OFFCURVE",
"-222 -50 OFFCURVE",
"-467 -50 CURVE SMOOTH",
"-672 -50 OFFCURVE",
"-774 -117 OFFCURVE",
"-774 -252 CURVE SMOOTH",
"-774 -278 LINE SMOOTH",
"-774 -304 OFFCURVE",
"-790 -317 OFFCURVE",
"-823 -317 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 1 1 0 3 0 1 3 105 6 1 0 0 2 98 4 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 3 1 97 5 1 1 1 18 77 6 1 0 0 2 98 4 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 21 20 18 16 13 11 9 8 6 4 0 25 1 23 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D217A0;
},
{
glyphname = uni17D217A2;
lastChange = "2020-01-29 05:07:47 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-520 -264 LINE",
"-520 -325 LINE",
"-580 -325 LINE",
"-580 -480 LINE",
"-160 -480 LINE",
"-160 -50 LINE",
"-520 -50 LINE",
"-520 -120 LINE",
"-780 -120 LINE",
"-780 -50 LINE",
"-1140 -50 LINE",
"-1140 -325 LINE",
"-1200 -325 LINE",
"-1200 -480 LINE",
"-780 -480 LINE",
"-780 -264 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0124 1 2 3 1 2 112 0 3 8 1 7 1 3 7 103 6 1 1 1 0 96 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0124 1 2 3 2 133 0 3 8 1 7 1 3 7 103 6 1 1 1 0 96 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 8 1 7 1 3 7 103 4 1 2 2 18 77 6 1 1 1 0 96 5 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D217A2;
},
{
glyphname = uni17BB.b;
lastChange = "2020-01-29 05:07:50 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-528 -500 LINE",
"-528 -800 LINE",
"-160 -800 LINE",
"-160 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0122 1 1 1 0 95 0 0 0 21 0 78 0 0 0 3 0 3 17 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BB.b;
},
{
glyphname = uni17BC.b;
lastChange = "2020-01-29 05:09:37 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-960 -500 LINE",
"-960 -630 LINE SMOOTH",
"-960 -743 OFFCURVE",
"-827 -800 OFFCURVE",
"-560 -800 CURVE SMOOTH",
"-293 -800 OFFCURVE",
"-160 -743 OFFCURVE",
"-160 -630 CURVE SMOOTH",
"-160 -500 LINE",
"-498 -500 LINE",
"-498 -630 LINE SMOOTH",
"-498 -650 OFFCURVE",
"-519 -660 OFFCURVE",
"-560 -660 CURVE SMOOTH",
"-601 -660 OFFCURVE",
"-622 -650 OFFCURVE",
"-622 -630 CURVE SMOOTH",
"-622 -500 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0122 4 2 0 1 1 0 112 0 1 1 3 98 0 3 3 21 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0122 4 2 0 1 0 133 0 1 1 3 98 0 3 3 21 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 12 10 8 7 5 3 0 15 1 14 5 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BC.b;
},
{
glyphname = uni17BD.b;
lastChange = "2020-01-30 01:37:14 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-970 -800 LINE",
"-610 -800 LINE",
"-565 -753 LINE",
"-520 -800 LINE",
"-160 -800 LINE",
"-160 -500 LINE",
"-498 -500 LINE",
"-498 -647 LINE",
"-565 -580 LINE",
"-632 -647 LINE",
"-632 -500 LINE",
"-970 -500 LINE"
);
},
{
closed = 1;
nodes = (
"-970 -800 LINE",
"-610 -800 LINE",
"-565 -753 LINE",
"-520 -800 LINE",
"-160 -800 LINE",
"-160 -500 LINE",
"-498 -500 LINE",
"-498 -647 LINE",
"-565 -580 LINE",
"-632 -647 LINE",
"-632 -500 LINE",
"-970 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\0129 4 3 2 4 2 0 1 76 1 1 0 0 2 95 3 1 2 2 21 2 78 18 17 20 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BD.b;
},
{
glyphname = uni17B7.a;
lastChange = "2020-01-29 14:59:22 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1140 1570 OFFCURVE",
"-1107 1510 OFFCURVE",
"-1040 1490 CURVE",
"-170 1490 LINE",
"-170 1697 LINE",
"-243 1751 OFFCURVE",
"-337 1800 OFFCURVE",
"-450 1844 CURVE SMOOTH",
"-547 1882 OFFCURVE",
"-643 1910 OFFCURVE",
"-740 1910 CURVE SMOOTH",
"-1059 1910 OFFCURVE",
"-1140 1788 OFFCURVE",
"-1140 1671 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-660 1750 OFFCURVE",
"-521 1738 OFFCURVE",
"-452 1679 CURVE",
"-860 1679 LINE",
"-860 1715 OFFCURVE",
"-807 1750 OFFCURVE",
"-740 1750 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0127 1 3 2 1 76 0 0 4 1 2 3 0 2 105 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 14 13 17 16 13 21 14 19 36 34 5 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B7.a;
},
{
glyphname = uni17B8.a;
lastChange = "2020-01-29 14:59:42 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-428 1819 LINE",
"-450 1828 LINE SMOOTH",
"-547 1864 OFFCURVE",
"-643 1891 OFFCURVE",
"-740 1891 CURVE SMOOTH",
"-1059 1891 OFFCURVE",
"-1140 1775 OFFCURVE",
"-1140 1663 CURVE SMOOTH",
"-1140 1567 OFFCURVE",
"-1107 1509 OFFCURVE",
"-1040 1490 CURVE",
"-170 1490 LINE",
"-170 1910 LINE",
"-428 1910 LINE"
);
},
{
closed = 1;
nodes = (
"-860 1705 OFFCURVE",
"-807 1738 OFFCURVE",
"-740 1738 CURVE SMOOTH",
"-660 1738 OFFCURVE",
"-521 1727 OFFCURVE",
"-452 1671 CURVE",
"-860 1671 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01222 1 0 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 2 4 1 2 112 0 4 5 1 0 1 4 0 105 0 1 3 3 1 87 0 1 1 3 96 0 3 1 3 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 2 4 2 133 0 4 5 1 0 1 4 0 105 0 1 3 3 1 87 0 1 1 3 96 0 3 1 3 80 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 19 17 14 12 11 10 4 3 0 8 1 6 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B8.a;
},
{
glyphname = uni17B9.a;
lastChange = "2020-01-29 15:00:05 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-196 1682 LINE SMOOTH",
"-178 1704 OFFCURVE",
"-169 1732 OFFCURVE",
"-170 1767 CURVE SMOOTH",
"-172 1862 OFFCURVE",
"-249 1910 OFFCURVE",
"-402 1910 CURVE SMOOTH",
"-470 1910 OFFCURVE",
"-539 1889 OFFCURVE",
"-575 1849 CURVE SMOOTH",
"-605 1813 LINE",
"-650 1820 OFFCURVE",
"-695 1824 OFFCURVE",
"-740 1824 CURVE SMOOTH",
"-900 1824 OFFCURVE",
"-1007 1804 OFFCURVE",
"-1060 1764 CURVE SMOOTH",
"-1113 1723 OFFCURVE",
"-1140 1679 OFFCURVE",
"-1140 1631 CURVE SMOOTH",
"-1140 1537 OFFCURVE",
"-1107 1490 OFFCURVE",
"-1040 1490 CURVE SMOOTH",
"-170 1490 LINE",
"-170 1653 LINE",
"-181 1660 OFFCURVE",
"-193 1666 OFFCURVE",
"-205 1672 CURVE"
);
},
{
closed = 1;
nodes = (
"-381 1748 OFFCURVE",
"-414 1762 OFFCURVE",
"-450 1771 CURVE",
"-458 1774 LINE",
"-455 1782 OFFCURVE",
"-449 1788 OFFCURVE",
"-440 1793 CURVE SMOOTH",
"-429 1798 OFFCURVE",
"-417 1801 OFFCURVE",
"-402 1801 CURVE SMOOTH",
"-363 1801 OFFCURVE",
"-344 1790 OFFCURVE",
"-344 1767 CURVE SMOOTH",
"-344 1752 OFFCURVE",
"-346 1739 OFFCURVE",
"-351 1729 CURVE"
);
},
{
closed = 1;
nodes = (
"-660 1696 OFFCURVE",
"-521 1686 OFFCURVE",
"-452 1639 CURVE",
"-860 1639 LINE",
"-860 1667 OFFCURVE",
"-807 1696 OFFCURVE",
"-740 1696 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01220 1 5 3 11 1 1 0 2 76 0 4 0 5 0 4 5 105 0 3 6 1 0 1 3 0 105 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 1 0 37 35 25 23 19 17 14 12 4 3 0 8 1 6 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B9.a;
},
{
glyphname = uni17BA.a;
lastChange = "2020-01-29 15:00:31 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-470 1910 LINE",
"-668 1910 LINE",
"-668 1816 LINE",
"-692 1818 OFFCURVE",
"-716 1819 OFFCURVE",
"-740 1819 CURVE SMOOTH",
"-900 1819 OFFCURVE",
"-1007 1799 OFFCURVE",
"-1060 1759 CURVE SMOOTH",
"-1113 1719 OFFCURVE",
"-1140 1676 OFFCURVE",
"-1140 1629 CURVE SMOOTH",
"-1140 1536 OFFCURVE",
"-1107 1490 OFFCURVE",
"-1040 1490 CURVE SMOOTH",
"-170 1490 LINE",
"-170 1868 LINE",
"-398 1868 LINE",
"-398 1746 LINE",
"-415 1752 OFFCURVE",
"-432 1759 OFFCURVE",
"-450 1766 CURVE SMOOTH",
"-457 1769 OFFCURVE",
"-463 1771 OFFCURVE",
"-470 1773 CURVE"
);
},
{
closed = 1;
nodes = (
"-860 1636 LINE",
"-860 1664 OFFCURVE",
"-807 1692 OFFCURVE",
"-740 1692 CURVE SMOOTH",
"-660 1692 OFFCURVE",
"-521 1683 OFFCURVE",
"-452 1636 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01227 24 13 3 1 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 5 2 0 5 112 0 2 4 0 2 112 0 4 0 1 0 4 1 105 6 1 0 3 3 0 87 6 1 0 0 3 96 0 3 0 3 80 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 2 5 133 0 2 4 0 2 112 0 4 0 1 0 4 1 105 6 1 0 3 3 0 87 6 1 0 0 3 96 0 3 0 3 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 2 5 133 0 2 4 2 133 0 4 0 1 0 4 1 105 6 1 0 3 3 0 87 6 1 0 0 3 96 0 3 0 3 80 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 26 25 23 21 18 16 15 14 5 3 0 8 1 7 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BA.a;
},
{
glyphname = uni17C6.a;
lastChange = "2020-01-29 15:00:55 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-837 1885 OFFCURVE",
"-930 1818 OFFCURVE",
"-930 1685 CURVE SMOOTH",
"-930 1552 OFFCURVE",
"-837 1485 OFFCURVE",
"-650 1485 CURVE SMOOTH",
"-463 1485 OFFCURVE",
"-370 1552 OFFCURVE",
"-370 1685 CURVE SMOOTH",
"-370 1818 OFFCURVE",
"-463 1885 OFFCURVE",
"-650 1885 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-613 1725 OFFCURVE",
"-595 1712 OFFCURVE",
"-595 1685 CURVE SMOOTH",
"-595 1658 OFFCURVE",
"-613 1645 OFFCURVE",
"-650 1645 CURVE SMOOTH",
"-687 1645 OFFCURVE",
"-705 1658 OFFCURVE",
"-705 1685 CURVE SMOOTH",
"-705 1712 OFFCURVE",
"-687 1725 OFFCURVE",
"-650 1725 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 11 10 1 0 15 13 10 19 11 17 5 3 0 9 1 7 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17C6.a;
},
{
glyphname = uni17CE.a;
lastChange = "2020-01-29 15:01:33 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-485 1899 LINE",
"-815 1899 LINE",
"-815 1786 LINE",
"-955 1786 LINE",
"-955 1612 LINE",
"-815 1612 LINE",
"-815 1499 LINE",
"-485 1499 LINE",
"-485 1612 LINE",
"-345 1612 LINE",
"-345 1786 LINE",
"-485 1786 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0120 5 0 2 5 87 4 1 0 3 1 1 2 0 1 103 0 5 5 2 95 0 2 5 2 79 17 17 17 17 17 16 6 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17CE.a;
},
{
glyphname = uni17D0.a;
lastChange = "2020-01-29 15:02:06 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-730 1562 OFFCURVE",
"-596 1500 OFFCURVE",
"-329 1500 CURVE SMOOTH",
"17 1500 OFFCURVE",
"190 1633 OFFCURVE",
"190 1900 CURVE",
"-140 1900 LINE",
"-140 1742 OFFCURVE",
"-203 1663 OFFCURVE",
"-329 1663 CURVE SMOOTH",
"-376 1663 OFFCURVE",
"-400 1671 OFFCURVE",
"-400 1687 CURVE SMOOTH",
"-400 1714 OFFCURVE",
"-376 1728 OFFCURVE",
"-329 1728 CURVE",
"-329 1891 LINE",
"-596 1891 OFFCURVE",
"-730 1823 OFFCURVE",
"-730 1687 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 3 133 0 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01215 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 3 133 0 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 3 133 0 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 3 133 0 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 17 34 17 17 5 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D0.a;
},
{
glyphname = uni1789.a;
lastChange = "2020-01-29 15:02:39 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1058 1129 OFFCURVE",
"982 1160 OFFCURVE",
"877 1160 CURVE SMOOTH",
"800 1160 OFFCURVE",
"725 1119 OFFCURVE",
"650 1036 CURVE",
"576 1119 OFFCURVE",
"501 1160 OFFCURVE",
"425 1160 CURVE SMOOTH",
"215 1160 OFFCURVE",
"110 1051 OFFCURVE",
"110 833 CURVE SMOOTH",
"110 298 LINE SMOOTH",
"110 99 OFFCURVE",
"230 0 OFFCURVE",
"470 0 CURVE SMOOTH",
"600 0 LINE",
"600 228 LINE",
"530 228 LINE SMOOTH",
"495 228 OFFCURVE",
"478 251 OFFCURVE",
"478 298 CURVE SMOOTH",
"478 833 LINE SMOOTH",
"478 878 OFFCURVE",
"483 900 OFFCURVE",
"494 900 CURVE SMOOTH",
"505 900 OFFCURVE",
"537 869 OFFCURVE",
"591 806 CURVE SMOOTH",
"609 785 OFFCURVE",
"629 775 OFFCURVE",
"650 775 CURVE SMOOTH",
"671 775 OFFCURVE",
"691 785 OFFCURVE",
"709 806 CURVE SMOOTH",
"764 869 OFFCURVE",
"796 900 OFFCURVE",
"807 900 CURVE SMOOTH",
"817 900 OFFCURVE",
"822 878 OFFCURVE",
"822 833 CURVE SMOOTH",
"822 0 LINE",
"1190 0 LINE",
"1190 807 LINE SMOOTH",
"1190 890 OFFCURVE",
"1254 932 OFFCURVE",
"1382 932 CURVE SMOOTH",
"1450 932 OFFCURVE",
"1484 890 OFFCURVE",
"1484 807 CURVE SMOOTH",
"1484 0 LINE",
"1852 0 LINE",
"1852 807 LINE SMOOTH",
"1852 1042 OFFCURVE",
"1705 1160 OFFCURVE",
"1412 1160 CURVE SMOOTH",
"1303 1160 OFFCURVE",
"1201 1129 OFFCURVE",
"1104 1068 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01239 1 2 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 2 7 2 5 7 128 6 4 2 2 2 0 97 10 9 2 0 0 17 77 0 7 7 1 95 8 3 2 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 4 7 4 5 7 128 0 2 2 0 97 10 9 2 0 0 17 77 6 1 4 4 0 97 10 9 2 0 0 17 77 0 7 7 1 95 8 3 2 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01242 40 38 36 33 35 34 34 34 18 34 18 33 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1962;
}
);
note = uni1789.a;
},
{
glyphname = uni1794.a;
lastChange = "2020-01-29 15:03:11 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"478 714 LINE SMOOTH",
"478 746 OFFCURVE",
"435 805 OFFCURVE",
"348 890 CURVE",
"348 932 LINE",
"1190 932 LINE",
"1190 1160 LINE",
"258 1160 LINE SMOOTH",
"113 1160 OFFCURVE",
"40 1097 OFFCURVE",
"40 972 CURVE SMOOTH",
"40 847 LINE",
"110 714 LINE",
"110 323 LINE SMOOTH",
"110 108 OFFCURVE",
"257 0 OFFCURVE",
"550 0 CURVE SMOOTH",
"619 0 OFFCURVE",
"709 36 OFFCURVE",
"822 108 CURVE",
"822 -120 LINE",
"1190 -120 LINE",
"1190 820 LINE",
"822 820 LINE",
"822 413 LINE SMOOTH",
"822 290 OFFCURVE",
"677 228 OFFCURVE",
"550 228 CURVE SMOOTH",
"502 228 OFFCURVE",
"478 260 OFFCURVE",
"478 323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */\01223 16 2 1 5 15 1 0 1 10 1 3 0 3 76 0 1 0 2 1 2 99 0 5 5 4 95 0 4 4 17 77 0 0 0 3 97 0 3 3 19 3 78 17 37 34 17 19 33 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
}
);
note = uni1794.a;
},
{
glyphname = uni17D2179A.b;
lastChange = "2020-01-29 15:03:53 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"100 -480 LINE SMOOTH",
"100 -680 OFFCURVE",
"259 -780 OFFCURVE",
"578 -780 CURVE SMOOTH",
"897 -780 OFFCURVE",
"1056 -680 OFFCURVE",
"1056 -480 CURVE",
"688 -480 LINE",
"688 -527 OFFCURVE",
"651 -550 OFFCURVE",
"578 -550 CURVE SMOOTH",
"505 -550 OFFCURVE",
"468 -527 OFFCURVE",
"468 -480 CURVE SMOOTH",
"468 714 LINE SMOOTH",
"468 759 OFFCURVE",
"443 800 OFFCURVE",
"393 836 CURVE SMOOTH",
"318 890 LINE",
"318 932 LINE",
"518 932 LINE",
"518 1150 LINE",
"228 1150 LINE SMOOTH",
"89 1150 OFFCURVE",
"20 1091 OFFCURVE",
"20 972 CURVE SMOOTH",
"20 837 LINE",
"100 714 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01218 11 10 3 1 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01237 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 1 4 0 0 1 114 0 4 4 3 95 0 3 3 17 77 0 0 0 2 98 0 2 2 21 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 1 4 0 4 1 0 128 0 4 4 3 95 0 3 3 17 77 0 0 0 2 98 0 2 2 21 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 37 33 17 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni17D2179A.b;
},
{
glyphname = uni17B717CD;
lastChange = "2020-01-29 15:04:59 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-305 1640 OFFCURVE",
"-282 1650 OFFCURVE",
"-243 1650 CURVE SMOOTH",
"-41 1650 OFFCURVE",
"60 1733 OFFCURVE",
"60 1900 CURVE",
"-207 1900 LINE",
"-207 1853 OFFCURVE",
"-229 1830 OFFCURVE",
"-273 1830 CURVE SMOOTH",
"-420 1830 OFFCURVE",
"-519 1798 OFFCURVE",
"-570 1735 CURVE",
"-626 1752 OFFCURVE",
"-683 1760 OFFCURVE",
"-740 1760 CURVE SMOOTH",
"-920 1760 OFFCURVE",
"-1037 1732 OFFCURVE",
"-1090 1675 CURVE SMOOTH",
"-1143 1618 OFFCURVE",
"-1169 1557 OFFCURVE",
"-1170 1490 CURVE SMOOTH",
"-1171 1357 OFFCURVE",
"-1138 1290 OFFCURVE",
"-1070 1290 CURVE SMOOTH",
"-170 1290 LINE",
"-170 1520 LINE",
"-213 1555 OFFCURVE",
"-260 1589 OFFCURVE",
"-310 1621 CURVE"
);
},
{
closed = 1;
nodes = (
"-660 1580 OFFCURVE",
"-521 1567 OFFCURVE",
"-452 1500 CURVE",
"-860 1500 LINE",
"-860 1540 OFFCURVE",
"-807 1580 OFFCURVE",
"-740 1580 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01211 1 4 1 20 1 5 4 2 1 6 5 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 3 2 2 3 112 0 2 0 4 5 2 4 106 0 1 7 1 5 6 1 5 105 0 6 0 0 6 87 0 6 6 0 95 0 0 6 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 2 3 133 0 2 0 4 5 2 4 106 0 1 7 1 5 6 1 5 105 0 6 0 0 6 87 0 6 6 0 95 0 0 6 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01223 22 26 25 22 30 23 28 33 17 34 35 35 8 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B717CD;
},
{
glyphname = uni17BF.b;
lastChange = "2020-01-29 15:06:03 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"330 1830 LINE",
"102 1830 LINE",
"102 1656 LINE",
"85 1666 OFFCURVE",
"68 1676 OFFCURVE",
"50 1685 CURVE SMOOTH",
"43 1688 OFFCURVE",
"37 1692 OFFCURVE",
"30 1695 CURVE",
"30 1890 LINE",
"-168 1890 LINE",
"-168 1756 LINE",
"-192 1759 OFFCURVE",
"-216 1760 OFFCURVE",
"-240 1760 CURVE SMOOTH",
"-507 1760 OFFCURVE",
"-580 1623 OFFCURVE",
"-580 1490 CURVE SMOOTH",
"-580 1357 OFFCURVE",
"-547 1290 OFFCURVE",
"-480 1290 CURVE SMOOTH",
"57 1290 LINE",
"92 1267 OFFCURVE",
"110 1207 OFFCURVE",
"110 1110 CURVE SMOOTH",
"110 -560 LINE SMOOTH",
"110 -600 OFFCURVE",
"73 -620 OFFCURVE",
"0 -620 CURVE SMOOTH",
"-73 -620 OFFCURVE",
"-110 -600 OFFCURVE",
"-110 -560 CURVE SMOOTH",
"-110 -500 LINE",
"-478 -500 LINE",
"-478 -560 LINE SMOOTH",
"-478 -720 OFFCURVE",
"-319 -800 OFFCURVE",
"0 -800 CURVE SMOOTH",
"319 -800 OFFCURVE",
"478 -720 OFFCURVE",
"478 -560 CURVE SMOOTH",
"478 1110 LINE SMOOTH",
"478 1225 OFFCURVE",
"429 1308 OFFCURVE",
"330 1361 CURVE"
);
},
{
closed = 1;
nodes = (
"-300 1500 LINE",
"-300 1540 OFFCURVE",
"-280 1580 OFFCURVE",
"-240 1580 CURVE SMOOTH",
"-160 1580 OFFCURVE",
"-21 1567 OFFCURVE",
"48 1500 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01241 37 34 3 1 6 44 1 5 0 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 7 8 7 133 0 8 6 8 133 0 3 5 4 4 3 114 0 6 0 1 0 6 1 105 9 1 0 0 5 3 0 5 104 0 4 4 2 98 0 2 2 21 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 7 8 7 133 0 8 6 8 133 0 3 5 4 5 3 4 128 0 6 0 1 0 6 1 105 9 1 0 0 5 3 0 5 104 0 4 4 2 98 0 2 2 21 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0121 0 43 42 36 35 33 31 28 26 22 20 18 17 15 13 5 3 0 8 1 7 10 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17BF.b;
},
{
glyphname = uni17C0.b;
lastChange = "2020-01-29 15:07:08 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-478 1800 LINE",
"-478 1300 LINE",
"-170 1300 LINE",
"-130 1333 OFFCURVE",
"-67 1350 OFFCURVE",
"20 1350 CURVE SMOOTH",
"80 1350 OFFCURVE",
"110 1283 OFFCURVE",
"110 1150 CURVE SMOOTH",
"110 -560 LINE SMOOTH",
"110 -600 OFFCURVE",
"73 -620 OFFCURVE",
"0 -620 CURVE SMOOTH",
"-73 -620 OFFCURVE",
"-110 -600 OFFCURVE",
"-110 -560 CURVE SMOOTH",
"-110 -500 LINE",
"-478 -500 LINE",
"-478 -560 LINE SMOOTH",
"-478 -720 OFFCURVE",
"-319 -800 OFFCURVE",
"0 -800 CURVE SMOOTH",
"319 -800 OFFCURVE",
"478 -720 OFFCURVE",
"478 -560 CURVE SMOOTH",
"478 1150 LINE SMOOTH",
"478 1430 OFFCURVE",
"325 1570 OFFCURVE",
"20 1570 CURVE SMOOTH",
"-23 1570 OFFCURVE",
"-67 1551 OFFCURVE",
"-110 1512 CURVE",
"-110 1800 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0122 1 5 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 6 4 4 3 114 0 1 0 5 6 1 5 105 7 1 0 0 6 3 0 6 103 0 4 4 2 98 0 2 2 21 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 3 6 4 6 3 4 128 0 1 0 5 6 1 5 105 7 1 0 0 6 3 0 6 103 0 4 4 2 98 0 2 2 21 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\0121 0 24 23 22 20 17 15 13 12 10 8 5 3 0 26 1 25 8 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17C0.b;
},
{
glyphname = uni17B7.r;
lastChange = "2020-01-29 15:08:02 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-822 1357 OFFCURVE",
"-795 1290 OFFCURVE",
"-738 1290 CURVE SMOOTH",
"-30 1290 LINE",
"-30 1520 LINE",
"-77 1580 OFFCURVE",
"-146 1635 OFFCURVE",
"-236 1685 CURVE",
"-313 1735 OFFCURVE",
"-400 1760 OFFCURVE",
"-495 1760 CURVE SMOOTH",
"-752 1760 OFFCURVE",
"-820 1623 OFFCURVE",
"-820 1490 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-430 1580 OFFCURVE",
"-315 1567 OFFCURVE",
"-258 1500 CURVE",
"-594 1500 LINE",
"-594 1540 OFFCURVE",
"-550 1580 OFFCURVE",
"-495 1580 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0127 1 3 2 1 76 0 0 4 1 2 3 0 2 105 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 14 13 17 16 13 21 14 19 36 34 5 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B7.r;
},
{
glyphname = uni17B8.r;
lastChange = "2020-01-29 15:08:28 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-243 1656 LINE",
"-257 1666 OFFCURVE",
"-271 1676 OFFCURVE",
"-286 1685 CURVE SMOOTH",
"-364 1734 OFFCURVE",
"-434 1759 OFFCURVE",
"-495 1760 CURVE SMOOTH",
"-752 1763 OFFCURVE",
"-820 1623 OFFCURVE",
"-820 1490 CURVE SMOOTH",
"-820 1357 OFFCURVE",
"-793 1290 OFFCURVE",
"-738 1290 CURVE SMOOTH",
"-30 1290 LINE",
"-30 1830 LINE",
"-243 1830 LINE"
);
},
{
closed = 1;
nodes = (
"-430 1580 OFFCURVE",
"-315 1567 OFFCURVE",
"-258 1500 CURVE",
"-594 1500 LINE",
"-594 1540 OFFCURVE",
"-550 1580 OFFCURVE",
"-495 1580 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01222 1 0 4 1 76 0 2 4 2 133 0 4 5 1 0 1 4 0 105 0 1 3 3 1 87 0 1 1 3 96 0 3 1 3 80 1 0 19 17 14 12 11 10 4 3 0 8 1 6 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B8.r;
},
{
glyphname = uni17B9.r;
lastChange = "2020-01-29 15:08:48 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-51 1561 LINE SMOOTH",
"-34 1591 OFFCURVE",
"-27 1631 OFFCURVE",
"-30 1680 CURVE SMOOTH",
"-39 1813 OFFCURVE",
"-101 1880 OFFCURVE",
"-216 1880 CURVE SMOOTH",
"-273 1880 OFFCURVE",
"-330 1850 OFFCURVE",
"-359 1794 CURVE SMOOTH",
"-373 1766 OFFCURVE",
"-381 1749 OFFCURVE",
"-384 1744 CURVE",
"-421 1755 OFFCURVE",
"-458 1760 OFFCURVE",
"-495 1760 CURVE SMOOTH",
"-752 1760 OFFCURVE",
"-820 1623 OFFCURVE",
"-820 1490 CURVE SMOOTH",
"-821 1357 OFFCURVE",
"-794 1290 OFFCURVE",
"-738 1290 CURVE SMOOTH",
"-30 1290 LINE",
"-30 1520 LINE",
"-39 1529 OFFCURVE",
"-49 1538 OFFCURVE",
"-59 1547 CURVE"
);
},
{
closed = 1;
nodes = (
"-200 1647 OFFCURVE",
"-227 1666 OFFCURVE",
"-256 1685 CURVE SMOOTH",
"-258 1686 OFFCURVE",
"-260 1688 OFFCURVE",
"-263 1689 CURVE",
"-260 1700 OFFCURVE",
"-255 1709 OFFCURVE",
"-248 1716 CURVE SMOOTH",
"-239 1723 OFFCURVE",
"-229 1727 OFFCURVE",
"-216 1727 CURVE SMOOTH",
"-185 1727 OFFCURVE",
"-169 1711 OFFCURVE",
"-169 1680 CURVE SMOOTH",
"-169 1658 OFFCURVE",
"-171 1640 OFFCURVE",
"-174 1627 CURVE"
);
},
{
closed = 1;
nodes = (
"-430 1580 OFFCURVE",
"-315 1567 OFFCURVE",
"-258 1500 CURVE",
"-594 1500 LINE",
"-594 1540 OFFCURVE",
"-550 1580 OFFCURVE",
"-495 1580 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */\01220 1 5 3 40 1 0 5 30 11 2 1 0 3 76 0 4 0 5 0 4 5 105 0 3 6 1 0 1 3 0 105 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 1 0 36 35 25 23 19 17 14 12 4 3 0 8 1 6 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B9.r;
},
{
glyphname = uni17BA.r;
lastChange = "2020-01-29 15:09:16 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-273 1890 LINE",
"-436 1890 LINE",
"-436 1756 LINE",
"-455 1759 OFFCURVE",
"-475 1760 OFFCURVE",
"-495 1760 CURVE SMOOTH",
"-752 1760 OFFCURVE",
"-820 1623 OFFCURVE",
"-820 1490 CURVE SMOOTH",
"-820 1357 OFFCURVE",
"-793 1290 OFFCURVE",
"-738 1290 CURVE SMOOTH",
"-30 1290 LINE",
"-30 1830 LINE",
"-213 1830 LINE",
"-213 1656 LINE",
"-227 1666 OFFCURVE",
"-241 1676 OFFCURVE",
"-256 1685 CURVE SMOOTH",
"-261 1688 OFFCURVE",
"-267 1692 OFFCURVE",
"-273 1695 CURVE"
);
},
{
closed = 1;
nodes = (
"-594 1500 LINE",
"-594 1540 OFFCURVE",
"-550 1580 OFFCURVE",
"-495 1580 CURVE SMOOTH",
"-430 1580 OFFCURVE",
"-315 1567 OFFCURVE",
"-258 1500 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */\01227 24 13 3 1 4 1 76 0 5 2 5 133 0 2 4 2 133 0 4 0 1 0 4 1 105 6 1 0 3 3 0 87 6 1 0 0 3 96 0 3 0 3 80 1 0 26 25 23 21 18 16 15 14 5 3 0 8 1 7 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BA.r;
},
{
glyphname = uni17C6.r;
lastChange = "2020-01-29 15:10:18 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-551 1785 OFFCURVE",
"-654 1702 OFFCURVE",
"-654 1535 CURVE SMOOTH",
"-654 1368 OFFCURVE",
"-551 1285 OFFCURVE",
"-344 1285 CURVE SMOOTH",
"-137 1285 OFFCURVE",
"-34 1368 OFFCURVE",
"-34 1535 CURVE SMOOTH",
"-34 1702 OFFCURVE",
"-137 1785 OFFCURVE",
"-344 1785 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-294 1610 OFFCURVE",
"-269 1585 OFFCURVE",
"-269 1535 CURVE SMOOTH",
"-269 1485 OFFCURVE",
"-294 1460 OFFCURVE",
"-344 1460 CURVE SMOOTH",
"-394 1460 OFFCURVE",
"-419 1485 OFFCURVE",
"-419 1535 CURVE SMOOTH",
"-419 1585 OFFCURVE",
"-394 1610 OFFCURVE",
"-344 1610 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 11 10 1 0 15 13 10 19 11 17 5 3 0 9 1 7 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17C6.r;
},
{
glyphname = uni17C9.r;
lastChange = "2020-01-29 15:10:33 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-540 1300 LINE",
"-540 1700 LINE",
"-850 1700 LINE",
"-850 1300 LINE"
);
},
{
closed = 1;
nodes = (
"-110 1300 LINE",
"-110 1700 LINE",
"-420 1700 LINE",
"-420 1300 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0122 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17C9.r;
},
{
glyphname = uni17CD.r;
lastChange = "2020-01-29 15:11:12 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-472 1537 OFFCURVE",
"-442 1550 OFFCURVE",
"-383 1550 CURVE SMOOTH",
"-361 1550 LINE SMOOTH",
"-93 1550 OFFCURVE",
"41 1653 OFFCURVE",
"40 1860 CURVE",
"-287 1860 LINE",
"-287 1793 OFFCURVE",
"-312 1760 OFFCURVE",
"-361 1760 CURVE SMOOTH",
"-383 1760 LINE SMOOTH",
"-661 1760 OFFCURVE",
"-800 1677 OFFCURVE",
"-800 1510 CURVE SMOOTH",
"-800 1357 OFFCURVE",
"-677 1280 OFFCURVE",
"-432 1280 CURVE",
"-432 1470 LINE",
"-459 1470 OFFCURVE",
"-472 1483 OFFCURVE",
"-472 1510 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 2 2 3 112 0 2 0 4 0 2 4 106 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 2 3 133 0 2 0 4 0 2 4 106 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01249 17 50 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17CD.r;
},
{
glyphname = uni17B717CD.r;
lastChange = "2020-01-30 01:27:39 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-602 1580 LINE",
"-602 1580 LINE",
"-551 1580 OFFCURVE",
"-399 1550 OFFCURVE",
"-355 1500 QCURVE",
"-705 1500 LINE",
"-705 1530 OFFCURVE",
"-645 1580 OFFCURVE",
"-602 1580 QCURVE",
"-602 1580 LINE"
);
},
{
closed = 1;
nodes = (
"-224 1640 OFFCURVE",
"-204 1650 OFFCURVE",
"-171 1650 CURVE SMOOTH",
"0 1650 OFFCURVE",
"85 1733 OFFCURVE",
"85 1900 CURVE",
"-144 1900 LINE",
"-144 1853 OFFCURVE",
"-163 1830 OFFCURVE",
"-201 1830 CURVE SMOOTH",
"-328 1830 OFFCURVE",
"-413 1798 OFFCURVE",
"-457 1735 CURVE",
"-504 1752 OFFCURVE",
"-553 1760 OFFCURVE",
"-602 1760 CURVE SMOOTH",
"-843 1760 OFFCURVE",
"-950 1623 OFFCURVE",
"-950 1490 CURVE SMOOTH",
"-951 1357 OFFCURVE",
"-923 1290 OFFCURVE",
"-864 1290 CURVE SMOOTH",
"-108 1290 LINE",
"-108 1520 LINE",
"-145 1555 OFFCURVE",
"-186 1589 OFFCURVE",
"-229 1621 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01211 1 4 1 20 1 5 4 2 1 6 5 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 3 2 2 3 112 0 2 0 4 5 2 4 106 0 1 7 1 5 6 1 5 105 0 6 0 0 6 87 0 6 6 0 95 0 0 6 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 2 3 133 0 2 0 4 5 2 4 106 0 1 7 1 5 6 1 5 105 0 6 0 0 6 87 0 6 6 0 95 0 0 6 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01223 22 26 25 22 30 23 28 33 17 34 35 35 8 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17B717CD.r;
},
{
glyphname = uni17D2178A.n;
lastChange = "2020-01-30 01:28:44 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1807 -325 LINE SMOOTH",
"-1807 -428 OFFCURVE",
"-1715 -480 OFFCURVE",
"-1530 -480 CURVE SMOOTH",
"-1313 -480 LINE",
"-1313 -325 LINE",
"-1459 -325 LINE",
"-1459 -291 LINE SMOOTH",
"-1459 -238 OFFCURVE",
"-1402 -212 OFFCURVE",
"-1287 -212 CURVE SMOOTH",
"-1172 -212 OFFCURVE",
"-1115 -238 OFFCURVE",
"-1115 -291 CURVE SMOOTH",
"-1115 -480 LINE",
"-767 -480 LINE",
"-767 -291 LINE SMOOTH",
"-767 -130 OFFCURVE",
"-940 -50 OFFCURVE",
"-1287 -50 CURVE SMOOTH",
"-1634 -50 OFFCURVE",
"-1807 -130 OFFCURVE",
"-1807 -291 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 2 3 0 2 105 0 3 3 1 95 4 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 97 0 0 0 18 77 0 3 3 1 95 4 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 18 34 18 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178A.n;
},
{
glyphname = uni17D2178B.n;
lastChange = "2020-01-30 01:29:45 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1807 -480 LINE",
"-1447 -480 LINE",
"-1284 -419 LINE",
"-1121 -480 LINE",
"-761 -480 LINE",
"-761 -250 LINE",
"-672 -250 LINE",
"-672 -100 LINE",
"-761 -100 LINE",
"-761 -50 LINE",
"-1121 -50 LINE",
"-1121 -100 LINE",
"-1807 -100 LINE"
);
},
{
closed = 1;
nodes = (
"-1284 -275 LINE",
"-1447 -323 LINE",
"-1447 -250 LINE",
"-1121 -250 LINE",
"-1121 -323 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01217 16 13 10 4 4 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0122 1 0 6 1 3 4 0 3 103 0 1 1 4 95 5 1 4 4 20 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0122 1 0 6 1 3 4 0 3 103 0 1 1 18 77 5 1 4 4 20 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01218 18 17 17 17 17 16 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178B.n;
},
{
glyphname = uni17D2178C.n;
lastChange = "2020-01-30 01:30:59 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-768 -50 LINE",
"-1127 -50 LINE",
"-1288 -130 LINE",
"-1449 -50 LINE",
"-1808 -50 LINE",
"-1808 -225 LINE",
"-1449 -225 LINE",
"-1449 -164 LINE",
"-1288 -228 LINE",
"-1127 -164 LINE",
"-1127 -191 LINE SMOOTH",
"-1127 -232 OFFCURVE",
"-1354 -262 OFFCURVE",
"-1808 -283 CURVE",
"-1808 -480 LINE",
"-1439 -480 LINE",
"-1127 -435 LINE",
"-1127 -480 LINE",
"-768 -480 LINE",
"-768 -308 LINE",
"-1127 -308 LINE",
"-1127 -346 LINE",
"-1449 -390 LINE",
"-1449 -346 LINE",
"-994 -289 OFFCURVE",
"-767 -238 OFFCURVE",
"-768 -194 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01222 17 15 3 3 4 16 12 2 0 3 9 4 3 2 4 1 0 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0125 1 4 0 3 0 4 3 103 0 0 0 1 96 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 3 4 95 5 1 4 4 18 77 0 0 0 1 96 2 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01218 17 23 18 17 21 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178C.n;
},
{
glyphname = uni17D217A0.n;
lastChange = "2020-01-30 01:31:46 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1493 -317 OFFCURVE",
"-1509 -304 OFFCURVE",
"-1509 -278 CURVE SMOOTH",
"-1509 -50 LINE",
"-1837 -50 LINE",
"-1837 -278 LINE SMOOTH",
"-1837 -413 OFFCURVE",
"-1715 -480 OFFCURVE",
"-1470 -480 CURVE SMOOTH",
"-1265 -480 OFFCURVE",
"-1163 -413 OFFCURVE",
"-1163 -278 CURVE SMOOTH",
"-1163 -252 LINE SMOOTH",
"-1163 -226 OFFCURVE",
"-1147 -213 OFFCURVE",
"-1114 -213 CURVE SMOOTH",
"-1081 -213 OFFCURVE",
"-1065 -226 OFFCURVE",
"-1065 -252 CURVE SMOOTH",
"-1065 -480 LINE",
"-737 -480 LINE",
"-737 -252 LINE SMOOTH",
"-737 -117 OFFCURVE",
"-859 -50 OFFCURVE",
"-1104 -50 CURVE SMOOTH",
"-1309 -50 OFFCURVE",
"-1411 -117 OFFCURVE",
"-1411 -252 CURVE SMOOTH",
"-1411 -278 LINE SMOOTH",
"-1411 -304 OFFCURVE",
"-1427 -317 OFFCURVE",
"-1460 -317 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 1 1 0 3 0 1 3 105 6 1 0 0 2 98 4 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 3 1 97 5 1 1 1 18 77 6 1 0 0 2 98 4 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 21 20 18 16 13 11 9 8 6 4 0 25 1 23 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D217A0.n;
},
{
glyphname = uni17D2178A.r;
lastChange = "2020-01-30 01:32:23 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1020 -325 LINE SMOOTH",
"-1020 -428 OFFCURVE",
"-928 -480 OFFCURVE",
"-743 -480 CURVE SMOOTH",
"-526 -480 LINE",
"-526 -325 LINE",
"-672 -325 LINE",
"-672 -291 LINE SMOOTH",
"-672 -238 OFFCURVE",
"-615 -212 OFFCURVE",
"-500 -212 CURVE SMOOTH",
"-385 -212 OFFCURVE",
"-328 -238 OFFCURVE",
"-328 -291 CURVE SMOOTH",
"-328 -480 LINE",
"20 -480 LINE",
"20 -291 LINE SMOOTH",
"20 -130 OFFCURVE",
"-153 -50 OFFCURVE",
"-500 -50 CURVE SMOOTH",
"-847 -50 OFFCURVE",
"-1020 -130 OFFCURVE",
"-1020 -291 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 2 3 0 2 105 0 3 3 1 95 4 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 97 0 0 0 18 77 0 3 3 1 95 4 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 18 34 18 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D2178A.r;
},
{
glyphname = uni17D21797.r;
lastChange = "2020-01-30 01:32:56 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-682 -480 LINE",
"-682 -271 LINE SMOOTH",
"-682 -218 OFFCURVE",
"-625 -192 OFFCURVE",
"-510 -192 CURVE SMOOTH",
"-395 -192 OFFCURVE",
"-338 -218 OFFCURVE",
"-338 -271 CURVE SMOOTH",
"-338 -480 LINE",
"10 -480 LINE",
"10 -271 LINE SMOOTH",
"10 -124 OFFCURVE",
"-163 -50 OFFCURVE",
"-510 -50 CURVE SMOOTH",
"-857 -50 OFFCURVE",
"-1030 -124 OFFCURVE",
"-1030 -271 CURVE SMOOTH",
"-1030 -300 LINE",
"-1117 -300 LINE",
"-1117 -480 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 0 4 1 2 4 105 0 1 1 0 95 3 5 2 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 4 4 2 97 0 2 2 18 77 0 1 1 0 95 3 5 2 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 14 12 10 9 7 5 3 2 0 17 1 16 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21797.r;
},
{
glyphname = uni17D21798.r;
lastChange = "2020-01-30 01:33:32 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-286 -166 LINE",
"-950 -166 LINE",
"-950 -377 LINE",
"-286 -377 LINE",
"-286 -446 OFFCURVE",
"-208 -480 OFFCURVE",
"-53 -480 CURVE SMOOTH",
"102 -480 OFFCURVE",
"180 -427 OFFCURVE",
"180 -322 CURVE SMOOTH",
"180 -218 OFFCURVE",
"139 -166 OFFCURVE",
"57 -166 CURVE",
"57 -50 LINE",
"-286 -50 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 1 1 0 112 0 3 2 1 3 88 4 1 1 1 2 98 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 2 1 3 88 0 0 0 18 77 4 1 1 1 2 98 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 34 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21798.r;
},
{
glyphname = uni17BB.n;
lastChange = "2020-01-30 01:34:28 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1223 -70 LINE",
"-1223 -230 LINE",
"-1148 -230 LINE",
"-1148 -500 LINE",
"-780 -500 LINE",
"-780 -70 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0123 1 2 0 1 0 2 1 103 0 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 1 2 95 3 1 2 2 18 77 0 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01250 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 1 0 134 0 1 1 2 95 3 1 2 2 18 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 5 0 5 17 17 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BB.n;
},
{
glyphname = uni17BC.n;
lastChange = "2020-01-30 01:35:12 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1580 -70 LINE",
"-1580 -290 LINE SMOOTH",
"-1580 -430 OFFCURVE",
"-1447 -500 OFFCURVE",
"-1180 -500 CURVE SMOOTH",
"-913 -500 OFFCURVE",
"-780 -431 OFFCURVE",
"-780 -290 CURVE SMOOTH",
"-780 -70 LINE",
"-1108 -70 LINE",
"-1108 -290 LINE SMOOTH",
"-1108 -323 OFFCURVE",
"-1132 -340 OFFCURVE",
"-1180 -340 CURVE SMOOTH",
"-1228 -340 OFFCURVE",
"-1252 -323 OFFCURVE",
"-1252 -290 CURVE SMOOTH",
"-1252 -70 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0122 4 2 0 1 1 0 112 0 1 1 3 98 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 4 2 0 1 0 133 0 1 1 3 98 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 4 2 0 0 18 77 0 1 1 3 98 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01250 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0120 1 0 3 1 3 102 2 4 2 0 0 18 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0122 4 2 0 1 0 133 0 1 3 3 1 89 0 1 1 3 98 0 3 1 3 82 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 12 10 8 7 5 3 0 15 1 14 5 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BC.n;
},
{
glyphname = uni17BD.n;
lastChange = "2020-01-30 01:35:50 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1630 -500 LINE",
"-1280 -500 LINE",
"-1205 -400 LINE",
"-1130 -500 LINE",
"-780 -500 LINE",
"-780 -70 LINE",
"-1108 -70 LINE",
"-1108 -300 LINE",
"-1205 -200 LINE",
"-1302 -300 LINE",
"-1302 -70 LINE",
"-1630 -70 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\0129 4 3 2 4 2 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 13 values pushed */\0121 1 0 0 2 95 3 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 13 values pushed */\0121 1 0 0 18 77 3 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01250 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 13 values pushed */\0123 1 2 2 0 95 1 1 0 0 18 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0121 1 0 2 2 0 87 1 1 0 0 2 95 3 1 2 0 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 17 20 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BD.n;
},
{
glyphname = uni17BB.n2;
lastChange = "2020-01-30 01:36:28 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1128 -500 LINE",
"-1128 -800 LINE",
"-760 -800 LINE",
"-760 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0122 1 1 1 0 95 0 0 0 21 0 78 0 0 0 3 0 3 17 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BB.n2;
},
{
glyphname = uni17BC.n2;
lastChange = "2020-01-30 01:37:02 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1560 -500 LINE",
"-1560 -630 LINE SMOOTH",
"-1560 -743 OFFCURVE",
"-1427 -800 OFFCURVE",
"-1160 -800 CURVE SMOOTH",
"-893 -800 OFFCURVE",
"-760 -743 OFFCURVE",
"-760 -630 CURVE SMOOTH",
"-760 -500 LINE",
"-1098 -500 LINE",
"-1098 -630 LINE SMOOTH",
"-1098 -650 OFFCURVE",
"-1119 -660 OFFCURVE",
"-1160 -660 CURVE SMOOTH",
"-1201 -660 OFFCURVE",
"-1222 -650 OFFCURVE",
"-1222 -630 CURVE SMOOTH",
"-1222 -500 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0122 4 2 0 1 1 0 112 0 1 1 3 98 0 3 3 21 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 4 2 0 1 0 133 0 1 1 3 98 0 3 3 21 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01219 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0122 4 2 0 1 1 0 112 0 1 1 3 98 0 3 3 21 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0122 4 2 0 1 0 133 0 1 1 3 98 0 3 3 21 3 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 12 10 8 7 5 3 0 15 1 14 5 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BC.n2;
},
{
glyphname = uni17BD.n2;
lastChange = "2020-01-30 01:37:36 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-1570 -800 LINE",
"-1210 -800 LINE",
"-1165 -753 LINE",
"-1120 -800 LINE",
"-760 -800 LINE",
"-760 -500 LINE",
"-1098 -500 LINE",
"-1098 -647 LINE",
"-1165 -580 LINE",
"-1232 -647 LINE",
"-1232 -500 LINE",
"-1570 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\0129 4 3 2 4 2 0 1 76 1 1 0 0 2 95 3 1 2 2 21 2 78 18 17 20 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17BD.n2;
},
{
glyphname = uni17D21798.b;
lastChange = "2020-01-30 01:38:21 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-496 -517 LINE",
"-1130 -517 LINE",
"-1130 -711 LINE",
"-496 -711 LINE",
"-496 -770 OFFCURVE",
"-418 -800 OFFCURVE",
"-263 -800 CURVE SMOOTH",
"-108 -800 OFFCURVE",
"-30 -758 OFFCURVE",
"-30 -673 CURVE SMOOTH",
"-30 -569 OFFCURVE",
"-71 -517 OFFCURVE",
"-153 -517 CURVE",
"-153 -447 LINE",
"-496 -447 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 1 1 0 112 0 3 2 1 3 88 4 1 1 1 2 98 0 2 2 21 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 1 0 133 0 3 2 1 3 88 4 1 1 1 2 98 0 2 2 21 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 34 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D21798.b;
},
{
glyphname = uni17D217A0.b;
lastChange = "2020-01-30 01:38:24 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-856 -687 OFFCURVE",
"-872 -678 OFFCURVE",
"-872 -659 CURVE SMOOTH",
"-872 -500 LINE",
"-1200 -500 LINE",
"-1200 -659 LINE SMOOTH",
"-1200 -753 OFFCURVE",
"-1078 -800 OFFCURVE",
"-833 -800 CURVE SMOOTH",
"-628 -800 OFFCURVE",
"-526 -753 OFFCURVE",
"-526 -659 CURVE SMOOTH",
"-526 -641 LINE SMOOTH",
"-526 -622 OFFCURVE",
"-510 -613 OFFCURVE",
"-477 -613 CURVE SMOOTH",
"-444 -613 OFFCURVE",
"-428 -622 OFFCURVE",
"-428 -641 CURVE SMOOTH",
"-428 -800 LINE",
"-100 -800 LINE",
"-100 -641 LINE SMOOTH",
"-100 -547 OFFCURVE",
"-222 -500 OFFCURVE",
"-467 -500 CURVE SMOOTH",
"-672 -500 OFFCURVE",
"-774 -547 OFFCURVE",
"-774 -641 CURVE SMOOTH",
"-774 -659 LINE SMOOTH",
"-774 -678 OFFCURVE",
"-790 -687 OFFCURVE",
"-823 -687 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0125 1 1 0 3 0 1 3 105 6 1 0 0 2 98 4 1 2 2 21 2 78 1 0 21 20 18 16 13 11 9 8 6 4 0 25 1 23 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni17D217A0.b;
},
{
glyphname = uni17B4;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"98 1130 LINE",
"98 1130 LINE",
"-210 1130 LINE",
"-210 932 LINE",
"38 932 LINE SMOOTH",
"140 932 OFFCURVE",
"140 807 QCURVE SMOOTH",
"140 0 LINE",
"448 0 LINE",
"448 807 LINE SMOOTH",
"448 1130 OFFCURVE",
"98 1130 QCURVE",
"98 1130 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0120 2 2 0 95 3 1 0 0 17 77 0 1 1 19 1 78 1 0 8 6 4 3 0 11 1 9 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17B4;
unicode = 17B4;
},
{
glyphname = uni17B5;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"98 1130 LINE",
"98 1130 LINE",
"-210 1130 LINE",
"-210 932 LINE",
"38 932 LINE SMOOTH",
"140 932 OFFCURVE",
"140 807 QCURVE SMOOTH",
"140 0 LINE",
"448 0 LINE",
"448 807 LINE SMOOTH",
"448 1130 OFFCURVE",
"98 1130 QCURVE",
"98 1130 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0120 2 2 0 95 3 1 0 0 17 77 0 1 1 19 1 78 1 0 8 6 4 3 0 11 1 9 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uni17B5;
unicode = 17B5;
},
{
glyphname = uni17DC;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"866 0 OFFCURVE",
"1130 96 OFFCURVE",
"1277 279 OFFCURVE",
"1277 412 QCURVE SMOOTH",
"1277 496 OFFCURVE",
"1195 621 OFFCURVE",
"1062 711 OFFCURVE",
"902 768 OFFCURVE",
"825 786 QCURVE SMOOTH",
"741 807 OFFCURVE",
"628 844 OFFCURVE",
"575 915 OFFCURVE",
"575 985 QCURVE SMOOTH",
"575 1079 OFFCURVE",
"689 1176 OFFCURVE",
"769 1176 QCURVE SMOOTH",
"839 1176 OFFCURVE",
"923 1139 OFFCURVE",
"923 1104 QCURVE SMOOTH",
"923 1077 OFFCURVE",
"898 1057 OFFCURVE",
"882 1057 QCURVE",
"882 858 LINE",
"927 858 OFFCURVE",
"1056 881 OFFCURVE",
"1181 936 OFFCURVE",
"1265 1032 OFFCURVE",
"1265 1108 QCURVE SMOOTH",
"1265 1188 OFFCURVE",
"1150 1321 OFFCURVE",
"921 1401 OFFCURVE",
"751 1401 QCURVE SMOOTH",
"599 1401 OFFCURVE",
"351 1307 OFFCURVE",
"204 1128 OFFCURVE",
"204 999 QCURVE SMOOTH",
"204 885 OFFCURVE",
"335 713 OFFCURVE",
"544 602 OFFCURVE",
"661 575 QCURVE SMOOTH",
"761 553 OFFCURVE",
"870 500 OFFCURVE",
"909 434 OFFCURVE",
"909 391 QCURVE SMOOTH",
"909 315 OFFCURVE",
"790 225 OFFCURVE",
"687 225 QCURVE SMOOTH",
"612 225 OFFCURVE",
"521 262 OFFCURVE",
"521 295 QCURVE SMOOTH",
"521 352 OFFCURVE",
"581 352 QCURVE",
"581 537 LINE",
"519 537 OFFCURVE",
"386 522 OFFCURVE",
"274 473 OFFCURVE",
"204 379 OFFCURVE",
"204 299 QCURVE SMOOTH",
"204 219 OFFCURVE",
"310 82 OFFCURVE",
"523 0 OFFCURVE",
"687 0 QCURVE",
"687 0 LINE"
);
}
);
width = 1482;
}
);
note = uni17DC;
unicode = 17DC;
},
{
glyphname = uni17DD;
lastChange = "2020-01-28 15:22:34 +0000";
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-438 1202 LINE",
"-438 1202 LINE",
"-155 1202 LINE",
"-155 1506 OFFCURVE",
"-650 1506 QCURVE SMOOTH",
"-1145 1506 OFFCURVE",
"-1145 1202 QCURVE",
"-865 1202 LINE",
"-865 1319 OFFCURVE",
"-651 1319 QCURVE SMOOTH",
"-438 1319 OFFCURVE",
"-438 1202 QCURVE",
"-438 1202 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 0 0 1 113 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 0 0 1 113 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 33 17 33 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17DD;
unicode = 17DD;
},
{
glyphname = uni17F0;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"528 -14 OFFCURVE",
"680 92 OFFCURVE",
"745 260 OFFCURVE",
"745 350 QCURVE SMOOTH",
"745 442 OFFCURVE",
"680 608 OFFCURVE",
"528 715 OFFCURVE",
"399 715 QCURVE SMOOTH",
"270 715 OFFCURVE",
"120 608 OFFCURVE",
"57 442 OFFCURVE",
"57 350 QCURVE SMOOTH",
"57 260 OFFCURVE",
"120 92 OFFCURVE",
"270 -14 OFFCURVE",
"399 -14 QCURVE",
"399 -14 LINE"
);
},
{
closed = 1;
nodes = (
"364 213 OFFCURVE",
"317 289 OFFCURVE",
"317 350 QCURVE SMOOTH",
"317 412 OFFCURVE",
"364 487 OFFCURVE",
"399 487 QCURVE SMOOTH",
"434 487 OFFCURVE",
"479 412 OFFCURVE",
"479 350 QCURVE SMOOTH",
"479 287 OFFCURVE",
"434 213 OFFCURVE",
"399 213 QCURVE",
"399 213 LINE"
);
}
);
width = 802;
}
);
note = uni17F0;
unicode = 17F0;
},
{
glyphname = uni17F1;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"290 0 LINE",
"448 451 LINE",
"608 0 LINE",
"874 0 LINE",
"632 700 LINE",
"264 700 LINE",
"24 0 LINE",
"24 0 LINE"
);
}
);
width = 899;
}
);
note = uni17F1;
unicode = 17F1;
},
{
glyphname = uni17F2;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"309 0 LINE",
"309 700 LINE",
"43 700 LINE",
"43 0 LINE",
"43 0 LINE"
);
}
);
width = 352;
}
);
note = uni17F2;
unicode = 17F2;
},
{
glyphname = uni17F3;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"936 700 LINE",
"784 260 LINE",
"633 700 LINE",
"264 700 LINE",
"45 0 LINE",
"311 0 LINE",
"448 451 LINE",
"608 0 LINE",
"963 0 LINE",
"1120 451 LINE",
"1259 0 LINE",
"1526 0 LINE",
"1305 700 LINE",
"1305 700 LINE"
);
}
);
width = 1570;
}
);
note = uni17F3;
unicode = 17F3;
},
{
glyphname = uni17F4;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"634 0 LINE",
"874 700 LINE",
"608 700 LINE",
"450 250 LINE",
"290 700 LINE",
"24 700 LINE",
"266 0 LINE",
"266 0 LINE"
);
}
);
width = 899;
}
);
note = uni17F4;
unicode = 17F4;
},
{
glyphname = uni17F5;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"491 -39 OFFCURVE",
"638 18 OFFCURVE",
"726 127 OFFCURVE",
"726 201 QCURVE SMOOTH",
"726 258 OFFCURVE",
"661 387 OFFCURVE",
"544 473 QCURVE",
"780 700 LINE",
"513 700 LINE",
"399 596 LINE",
"292 700 LINE",
"26 700 LINE",
"253 473 LINE",
"151 387 OFFCURVE",
"73 262 OFFCURVE",
"73 201 QCURVE SMOOTH",
"73 127 OFFCURVE",
"161 18 OFFCURVE",
"311 -39 OFFCURVE",
"401 -39 QCURVE",
"401 -39 LINE"
);
},
{
closed = 1;
nodes = (
"323 233 OFFCURVE",
"360 287 OFFCURVE",
"399 332 QCURVE",
"438 289 OFFCURVE",
"477 231 OFFCURVE",
"477 197 QCURVE SMOOTH",
"477 168 OFFCURVE",
"432 133 OFFCURVE",
"399 131 QCURVE SMOOTH",
"366 131 OFFCURVE",
"323 168 OFFCURVE",
"323 201 QCURVE",
"323 201 LINE"
);
}
);
width = 806;
}
);
note = uni17F5;
unicode = 17F5;
},
{
glyphname = uni17F6;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"536 0 LINE",
"292 700 LINE",
"26 700 LINE",
"270 0 LINE",
"270 0 LINE"
);
}
);
width = 550;
}
);
note = uni17F6;
unicode = 17F6;
},
{
glyphname = uni17F7;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"311 0 LINE",
"485 453 LINE",
"702 0 LINE",
"1073 0 LINE",
"1323 700 LINE",
"1057 700 LINE",
"889 254 LINE",
"680 700 LINE",
"285 700 LINE",
"45 0 LINE",
"45 0 LINE"
);
}
);
width = 1368;
}
);
note = uni17F7;
unicode = 17F7;
},
{
glyphname = uni17F8;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"286 0 LINE",
"530 700 LINE",
"264 700 LINE",
"24 0 LINE",
"24 0 LINE"
);
}
);
width = 555;
}
);
note = uni17F8;
unicode = 17F8;
},
{
glyphname = uni17F9;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"818 -350 OFFCURVE",
"818 -119 QCURVE SMOOTH",
"818 -55 OFFCURVE",
"755 43 OFFCURVE",
"654 100 OFFCURVE",
"599 100 QCURVE SMOOTH",
"362 100 LINE",
"767 391 LINE",
"624 567 LINE",
"40 113 LINE",
"79 -61 LINE",
"454 -61 LINE SMOOTH",
"509 -61 OFFCURVE",
"552 -94 OFFCURVE",
"552 -119 QCURVE SMOOTH",
"552 -141 OFFCURVE",
"511 -168 OFFCURVE",
"458 -178 OFFCURVE",
"439 -178 QCURVE",
"439 -350 LINE",
"439 -350 LINE"
);
}
);
width = 860;
}
);
note = uni17F9;
unicode = 17F9;
},
{
glyphname = uni19E0;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 903 OFFCURVE",
"1255 1284 QCURVE SMOOTH",
"1255 1722 LINE SMOOTH",
"1255 2103 OFFCURVE",
"713 2103 QCURVE SMOOTH",
"172 2103 OFFCURVE",
"172 1722 QCURVE SMOOTH",
"172 1284 LINE SMOOTH",
"172 903 OFFCURVE",
"713 903 QCURVE",
"713 903 LINE"
);
},
{
closed = 1;
nodes = (
"543 1133 OFFCURVE",
"543 1284 QCURVE SMOOTH",
"543 1722 LINE SMOOTH",
"543 1874 OFFCURVE",
"713 1874 QCURVE SMOOTH",
"887 1874 OFFCURVE",
"887 1722 QCURVE SMOOTH",
"887 1284 LINE SMOOTH",
"887 1133 OFFCURVE",
"713 1133 QCURVE",
"713 1133 LINE"
);
},
{
closed = 1;
nodes = (
"483 -590 LINE",
"715 -420 LINE",
"946 -590 LINE",
"1257 -590 LINE",
"1257 27 LINE SMOOTH",
"1257 82 OFFCURVE",
"1237 160 OFFCURVE",
"1163 201 OFFCURVE",
"1081 201 QCURVE SMOOTH",
"784 201 LINE",
"784 -29 LINE",
"836 -29 LINE SMOOTH",
"862 -29 OFFCURVE",
"887 -49 OFFCURVE",
"887 -90 QCURVE SMOOTH",
"887 -252 LINE",
"715 -117 LINE",
"543 -254 LINE",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE",
"1255 291 LINE",
"1255 872 LINE",
"887 872 LINE",
"887 557 LINE",
"790 610 OFFCURVE",
"606 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 -590 LINE",
"172 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19E0;
unicode = 19E0;
},
{
glyphname = uni19E1;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 799 OFFCURVE",
"1255 1118 QCURVE SMOOTH",
"1255 1679 LINE SMOOTH",
"1255 1999 OFFCURVE",
"712 1999 QCURVE SMOOTH",
"171 1999 OFFCURVE",
"171 1679 QCURVE SMOOTH",
"171 1559 LINE SMOOTH",
"171 1454 OFFCURVE",
"253 1350 OFFCURVE",
"393 1315 OFFCURVE",
"479 1315 QCURVE SMOOTH",
"712 1315 LINE",
"712 1581 LINE",
"622 1581 LINE SMOOTH",
"563 1581 OFFCURVE",
"542 1634 OFFCURVE",
"542 1661 QCURVE SMOOTH",
"542 1679 LINE SMOOTH",
"542 1769 OFFCURVE",
"712 1769 QCURVE SMOOTH",
"886 1769 OFFCURVE",
"886 1679 QCURVE SMOOTH",
"886 1118 LINE SMOOTH",
"886 1028 OFFCURVE",
"712 1028 QCURVE SMOOTH",
"542 1028 OFFCURVE",
"542 1120 QCURVE",
"171 1120 LINE",
"171 799 OFFCURVE",
"712 799 QCURVE",
"712 799 LINE"
);
},
{
closed = 1;
nodes = (
"1093 -590 LINE",
"1093 610 LINE",
"722 610 LINE",
"716 520 OFFCURVE",
"657 369 OFFCURVE",
"563 274 OFFCURVE",
"503 274 QCURVE SMOOTH",
"460 274 OFFCURVE",
"460 309 QCURVE SMOOTH",
"460 344 OFFCURVE",
"495 344 QCURVE SMOOTH",
"505 344 LINE",
"505 610 LINE",
"425 610 LINE SMOOTH",
"311 610 OFFCURVE",
"169 535 OFFCURVE",
"108 410 OFFCURVE",
"108 332 QCURVE SMOOTH",
"108 233 OFFCURVE",
"214 94 OFFCURVE",
"364 23 OFFCURVE",
"434 23 QCURVE SMOOTH",
"514 23 OFFCURVE",
"616 51 OFFCURVE",
"688 104 OFFCURVE",
"722 139 QCURVE",
"722 -590 LINE",
"722 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19E1;
unicode = 19E1;
},
{
glyphname = uni19E2;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1742 801 OFFCURVE",
"1742 1200 QCURVE SMOOTH",
"1742 2001 LINE",
"1372 2001 LINE",
"1253 1915 LINE",
"1144 2001 LINE",
"763 2001 LINE",
"763 1401 LINE",
"1173 1401 LINE",
"1173 1630 LINE",
"1144 1630 LINE",
"1144 1741 LINE",
"1253 1659 LINE",
"1372 1741 LINE",
"1372 1200 LINE SMOOTH",
"1372 1030 OFFCURVE",
"1021 1030 QCURVE SMOOTH",
"667 1030 OFFCURVE",
"667 1200 QCURVE SMOOTH",
"667 2126 LINE SMOOTH",
"667 2183 OFFCURVE",
"624 2251 OFFCURVE",
"546 2251 QCURVE SMOOTH",
"196 2251 LINE",
"196 2021 LINE",
"296 2021 LINE",
"296 1200 LINE SMOOTH",
"296 801 OFFCURVE",
"1021 801 QCURVE",
"1021 801 LINE"
);
},
{
closed = 1;
nodes = (
"1370 -590 LINE",
"1370 610 LINE",
"999 610 LINE",
"993 520 OFFCURVE",
"933 369 OFFCURVE",
"839 274 OFFCURVE",
"780 274 QCURVE SMOOTH",
"737 274 OFFCURVE",
"737 309 QCURVE SMOOTH",
"737 344 OFFCURVE",
"771 344 QCURVE SMOOTH",
"782 344 LINE",
"782 610 LINE",
"702 610 LINE SMOOTH",
"587 610 OFFCURVE",
"446 535 OFFCURVE",
"384 410 OFFCURVE",
"384 332 QCURVE SMOOTH",
"384 233 OFFCURVE",
"491 94 OFFCURVE",
"640 23 OFFCURVE",
"710 23 QCURVE SMOOTH",
"790 23 OFFCURVE",
"892 51 OFFCURVE",
"964 104 OFFCURVE",
"999 139 QCURVE",
"999 -590 LINE",
"999 -590 LINE"
);
}
);
width = 1751;
}
);
note = uni19E2;
unicode = 19E2;
},
{
glyphname = uni19E3;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"623 801 LINE",
"623 1030 LINE",
"543 1030 LINE",
"543 1667 LINE SMOOTH",
"543 1772 OFFCURVE",
"651 1772 QCURVE SMOOTH",
"760 1772 OFFCURVE",
"760 1667 QCURVE SMOOTH",
"760 801 LINE",
"1128 801 LINE",
"1128 1667 LINE SMOOTH",
"1128 1772 OFFCURVE",
"1239 1772 QCURVE SMOOTH",
"1348 1772 OFFCURVE",
"1348 1667 QCURVE SMOOTH",
"1348 801 LINE",
"1716 801 LINE",
"1716 1640 LINE SMOOTH",
"1716 2001 OFFCURVE",
"1239 2001 QCURVE SMOOTH",
"1040 2001 OFFCURVE",
"944 1911 QCURVE",
"848 2001 OFFCURVE",
"651 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1651 QCURVE SMOOTH",
"172 801 LINE",
"172 801 LINE"
);
},
{
closed = 1;
nodes = (
"1376 -590 LINE",
"1376 610 LINE",
"1006 610 LINE",
"999 520 OFFCURVE",
"940 369 OFFCURVE",
"846 274 OFFCURVE",
"786 274 QCURVE SMOOTH",
"743 274 OFFCURVE",
"743 309 QCURVE SMOOTH",
"743 344 OFFCURVE",
"778 344 QCURVE SMOOTH",
"788 344 LINE",
"788 610 LINE",
"709 610 LINE SMOOTH",
"594 610 OFFCURVE",
"453 535 OFFCURVE",
"391 410 OFFCURVE",
"391 332 QCURVE SMOOTH",
"391 233 OFFCURVE",
"498 94 OFFCURVE",
"647 23 OFFCURVE",
"717 23 QCURVE SMOOTH",
"797 23 OFFCURVE",
"899 51 OFFCURVE",
"971 104 OFFCURVE",
"1006 139 QCURVE",
"1006 -590 LINE",
"1006 -590 LINE"
);
}
);
width = 1763;
}
);
note = uni19E3;
unicode = 19E3;
},
{
glyphname = uni19E4;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1322 801 LINE",
"1392 983 LINE",
"1251 1298 LINE",
"1251 1470 LINE",
"1376 1470 LINE",
"1376 1739 LINE",
"1263 1739 LINE SMOOTH",
"1163 1739 OFFCURVE",
"989 1724 OFFCURVE",
"884 1665 OFFCURVE",
"884 1602 QCURVE SMOOTH",
"884 1249 LINE",
"1062 1030 LINE",
"833 1030 LINE SMOOTH",
"663 1030 OFFCURVE",
"663 1200 QCURVE SMOOTH",
"663 2111 LINE SMOOTH",
"663 2187 OFFCURVE",
"591 2261 OFFCURVE",
"509 2261 QCURVE SMOOTH",
"192 2261 LINE",
"192 2032 LINE",
"292 2032 LINE",
"292 1200 LINE SMOOTH",
"292 801 OFFCURVE",
"833 801 QCURVE",
"833 801 LINE"
);
},
{
closed = 1;
nodes = (
"1187 -590 LINE",
"1187 610 LINE",
"817 610 LINE",
"810 520 OFFCURVE",
"751 369 OFFCURVE",
"657 274 OFFCURVE",
"598 274 QCURVE SMOOTH",
"554 274 OFFCURVE",
"554 309 QCURVE SMOOTH",
"554 344 OFFCURVE",
"589 344 QCURVE SMOOTH",
"600 344 LINE",
"600 610 LINE",
"520 610 LINE SMOOTH",
"405 610 OFFCURVE",
"264 535 OFFCURVE",
"202 410 OFFCURVE",
"202 332 QCURVE SMOOTH",
"202 233 OFFCURVE",
"309 94 OFFCURVE",
"458 23 OFFCURVE",
"528 23 QCURVE SMOOTH",
"608 23 OFFCURVE",
"710 51 OFFCURVE",
"782 104 OFFCURVE",
"817 139 QCURVE",
"817 -590 LINE",
"817 -590 LINE"
);
}
);
width = 1404;
}
);
note = uni19E4;
unicode = 19E4;
},
{
glyphname = uni19E5;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1194 803 LINE",
"1265 985 LINE",
"1128 1200 LINE",
"1128 1335 LINE",
"1249 1335 LINE",
"1249 1604 LINE",
"946 1604 LINE SMOOTH",
"845 1604 OFFCURVE",
"757 1518 OFFCURVE",
"757 1403 QCURVE SMOOTH",
"757 1171 LINE",
"915 1032 LINE",
"706 1032 LINE SMOOTH",
"536 1032 OFFCURVE",
"536 1133 QCURVE SMOOTH",
"536 1561 LINE SMOOTH",
"536 1620 OFFCURVE",
"563 1710 OFFCURVE",
"579 1729 QCURVE",
"634 1702 OFFCURVE",
"735 1671 OFFCURVE",
"813 1671 QCURVE SMOOTH",
"1040 1671 OFFCURVE",
"1251 1855 OFFCURVE",
"1251 2011 QCURVE SMOOTH",
"1251 2265 LINE",
"880 2265 LINE",
"880 1968 LINE SMOOTH",
"880 1923 OFFCURVE",
"837 1884 OFFCURVE",
"817 1880 QCURVE SMOOTH",
"798 1876 OFFCURVE",
"745 1884 OFFCURVE",
"708 1898 QCURVE",
"725 1925 OFFCURVE",
"753 1989 OFFCURVE",
"753 2048 QCURVE SMOOTH",
"753 2097 OFFCURVE",
"694 2191 OFFCURVE",
"583 2255 OFFCURVE",
"508 2255 QCURVE SMOOTH",
"419 2255 OFFCURVE",
"303 2183 OFFCURVE",
"243 2081 OFFCURVE",
"243 2032 QCURVE SMOOTH",
"243 1966 OFFCURVE",
"278 1901 OFFCURVE",
"303 1868 QCURVE",
"213 1808 OFFCURVE",
"165 1663 OFFCURVE",
"165 1561 QCURVE SMOOTH",
"165 1133 LINE SMOOTH",
"165 803 OFFCURVE",
"706 803 QCURVE",
"706 803 LINE"
);
},
{
closed = 1;
nodes = (
"1087 -590 LINE",
"1087 610 LINE",
"716 610 LINE",
"710 520 OFFCURVE",
"651 369 OFFCURVE",
"557 274 OFFCURVE",
"497 274 QCURVE SMOOTH",
"454 274 OFFCURVE",
"454 309 QCURVE SMOOTH",
"454 344 OFFCURVE",
"489 344 QCURVE SMOOTH",
"499 344 LINE",
"499 610 LINE",
"419 610 LINE SMOOTH",
"305 610 OFFCURVE",
"163 535 OFFCURVE",
"102 410 OFFCURVE",
"102 332 QCURVE SMOOTH",
"102 233 OFFCURVE",
"208 94 OFFCURVE",
"358 23 OFFCURVE",
"428 23 QCURVE SMOOTH",
"508 23 OFFCURVE",
"610 51 OFFCURVE",
"682 104 OFFCURVE",
"716 139 QCURVE",
"716 -590 LINE",
"716 -590 LINE"
);
}
);
width = 1304;
}
);
note = uni19E5;
unicode = 19E5;
},
{
glyphname = uni19E6;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1257 801 OFFCURVE",
"1257 1200 QCURVE SMOOTH",
"1257 1602 LINE SMOOTH",
"1257 1800 OFFCURVE",
"999 2030 OFFCURVE",
"774 2030 QCURVE SMOOTH",
"683 2030 OFFCURVE",
"567 1976 OFFCURVE",
"542 1948 QCURVE",
"542 2263 LINE",
"171 2263 LINE",
"171 1661 LINE",
"542 1661 LINE",
"557 1716 OFFCURVE",
"630 1772 OFFCURVE",
"712 1772 QCURVE SMOOTH",
"796 1772 OFFCURVE",
"886 1683 OFFCURVE",
"886 1602 QCURVE SMOOTH",
"886 1282 LINE SMOOTH",
"886 1194 OFFCURVE",
"800 1092 OFFCURVE",
"712 1092 QCURVE SMOOTH",
"628 1092 OFFCURVE",
"542 1161 OFFCURVE",
"542 1217 QCURVE SMOOTH",
"542 1247 OFFCURVE",
"565 1311 OFFCURVE",
"630 1354 OFFCURVE",
"696 1354 QCURVE SMOOTH",
"763 1354 LINE",
"763 1583 LINE",
"614 1583 LINE SMOOTH",
"393 1583 OFFCURVE",
"171 1378 OFFCURVE",
"171 1210 QCURVE SMOOTH",
"171 1096 OFFCURVE",
"292 911 OFFCURVE",
"532 801 OFFCURVE",
"712 801 QCURVE",
"712 801 LINE"
);
},
{
closed = 1;
nodes = (
"1093 -590 LINE",
"1093 610 LINE",
"722 610 LINE",
"716 520 OFFCURVE",
"657 369 OFFCURVE",
"563 274 OFFCURVE",
"503 274 QCURVE SMOOTH",
"460 274 OFFCURVE",
"460 309 QCURVE SMOOTH",
"460 344 OFFCURVE",
"495 344 QCURVE SMOOTH",
"505 344 LINE",
"505 610 LINE",
"425 610 LINE SMOOTH",
"311 610 OFFCURVE",
"169 535 OFFCURVE",
"108 410 OFFCURVE",
"108 332 QCURVE SMOOTH",
"108 233 OFFCURVE",
"214 94 OFFCURVE",
"364 23 OFFCURVE",
"434 23 QCURVE SMOOTH",
"514 23 OFFCURVE",
"616 51 OFFCURVE",
"688 104 OFFCURVE",
"722 139 QCURVE",
"722 -590 LINE",
"722 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19E6;
unicode = 19E6;
},
{
glyphname = uni19E7;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"614 801 LINE",
"614 1030 LINE",
"543 1030 LINE",
"543 1669 LINE SMOOTH",
"543 1690 OFFCURVE",
"553 1726 OFFCURVE",
"567 1726 QCURVE SMOOTH",
"580 1726 OFFCURVE",
"608 1696 OFFCURVE",
"633 1665 QCURVE SMOOTH",
"657 1634 OFFCURVE",
"688 1634 QCURVE SMOOTH",
"717 1634 OFFCURVE",
"745 1665 QCURVE SMOOTH",
"762 1683 OFFCURVE",
"795 1726 OFFCURVE",
"809 1726 QCURVE SMOOTH",
"834 1726 OFFCURVE",
"834 1669 QCURVE SMOOTH",
"834 1092 LINE SMOOTH",
"834 1018 OFFCURVE",
"926 885 OFFCURVE",
"1108 801 OFFCURVE",
"1243 801 QCURVE SMOOTH",
"1376 801 OFFCURVE",
"1558 883 OFFCURVE",
"1649 1014 OFFCURVE",
"1649 1092 QCURVE SMOOTH",
"1649 2263 LINE",
"1278 2263 LINE",
"1278 1073 LINE SMOOTH",
"1278 1057 OFFCURVE",
"1262 1030 OFFCURVE",
"1241 1030 QCURVE SMOOTH",
"1221 1030 OFFCURVE",
"1204 1057 OFFCURVE",
"1204 1073 QCURVE SMOOTH",
"1204 1624 LINE SMOOTH",
"1204 1772 OFFCURVE",
"1130 1935 OFFCURVE",
"1012 2001 OFFCURVE",
"944 2001 QCURVE SMOOTH",
"856 2001 OFFCURVE",
"741 1939 OFFCURVE",
"688 1876 QCURVE",
"635 1939 OFFCURVE",
"520 2001 OFFCURVE",
"420 2001 QCURVE SMOOTH",
"360 2001 OFFCURVE",
"246 1937 OFFCURVE",
"172 1788 OFFCURVE",
"172 1659 QCURVE SMOOTH",
"172 801 LINE",
"172 801 LINE"
);
},
{
closed = 1;
nodes = (
"1294 -590 LINE",
"1294 610 LINE",
"924 610 LINE",
"917 520 OFFCURVE",
"858 369 OFFCURVE",
"764 274 OFFCURVE",
"704 274 QCURVE SMOOTH",
"661 274 OFFCURVE",
"661 309 QCURVE SMOOTH",
"661 344 OFFCURVE",
"696 344 QCURVE SMOOTH",
"707 344 LINE",
"707 610 LINE",
"627 610 LINE SMOOTH",
"512 610 OFFCURVE",
"371 535 OFFCURVE",
"309 410 OFFCURVE",
"309 332 QCURVE SMOOTH",
"309 233 OFFCURVE",
"416 94 OFFCURVE",
"565 23 OFFCURVE",
"635 23 QCURVE SMOOTH",
"715 23 OFFCURVE",
"817 51 OFFCURVE",
"889 104 OFFCURVE",
"924 139 QCURVE",
"924 -590 LINE",
"924 -590 LINE"
);
}
);
width = 1691;
}
);
note = uni19E7;
unicode = 19E7;
},
{
glyphname = uni19E8;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"483 801 LINE",
"714 971 LINE",
"946 801 LINE",
"1257 801 LINE",
"1257 1417 LINE SMOOTH",
"1257 1473 OFFCURVE",
"1236 1550 OFFCURVE",
"1163 1591 OFFCURVE",
"1081 1591 QCURVE SMOOTH",
"784 1591 LINE",
"784 1362 LINE",
"835 1362 LINE SMOOTH",
"862 1362 OFFCURVE",
"886 1341 OFFCURVE",
"886 1300 QCURVE SMOOTH",
"886 1139 LINE",
"714 1274 LINE",
"542 1137 LINE",
"542 1681 LINE SMOOTH",
"542 1772 OFFCURVE",
"712 1772 QCURVE SMOOTH",
"886 1772 OFFCURVE",
"886 1681 QCURVE",
"1255 1681 LINE",
"1255 2263 LINE",
"886 2263 LINE",
"886 1948 LINE",
"790 2001 OFFCURVE",
"606 2001 QCURVE SMOOTH",
"171 2001 OFFCURVE",
"171 1681 QCURVE SMOOTH",
"171 801 LINE",
"171 801 LINE"
);
},
{
closed = 1;
nodes = (
"1093 -590 LINE",
"1093 610 LINE",
"722 610 LINE",
"716 520 OFFCURVE",
"657 369 OFFCURVE",
"563 274 OFFCURVE",
"503 274 QCURVE SMOOTH",
"460 274 OFFCURVE",
"460 309 QCURVE SMOOTH",
"460 344 OFFCURVE",
"495 344 QCURVE SMOOTH",
"505 344 LINE",
"505 610 LINE",
"425 610 LINE SMOOTH",
"311 610 OFFCURVE",
"169 535 OFFCURVE",
"108 410 OFFCURVE",
"108 332 QCURVE SMOOTH",
"108 233 OFFCURVE",
"214 94 OFFCURVE",
"364 23 OFFCURVE",
"434 23 QCURVE SMOOTH",
"514 23 OFFCURVE",
"616 51 OFFCURVE",
"688 104 OFFCURVE",
"722 139 QCURVE",
"722 -590 LINE",
"722 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19E8;
unicode = 19E8;
},
{
glyphname = uni19E9;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"985 801 OFFCURVE",
"1234 965 OFFCURVE",
"1234 1094 QCURVE SMOOTH",
"1234 1210 OFFCURVE",
"1077 1331 OFFCURVE",
"888 1331 QCURVE SMOOTH",
"737 1331 LINE",
"737 1165 LINE",
"761 1165 LINE SMOOTH",
"806 1165 OFFCURVE",
"866 1141 OFFCURVE",
"866 1106 QCURVE SMOOTH",
"866 1063 OFFCURVE",
"774 1030 OFFCURVE",
"696 1030 QCURVE SMOOTH",
"626 1030 OFFCURVE",
"542 1065 OFFCURVE",
"542 1100 QCURVE SMOOTH",
"542 1280 LINE SMOOTH",
"542 1341 OFFCURVE",
"616 1393 OFFCURVE",
"667 1393 QCURVE SMOOTH",
"1013 1393 LINE",
"1013 1622 LINE",
"618 1622 LINE SMOOTH",
"587 1622 OFFCURVE",
"538 1651 OFFCURVE",
"538 1692 QCURVE SMOOTH",
"538 1747 OFFCURVE",
"643 1794 OFFCURVE",
"716 1794 QCURVE SMOOTH",
"802 1794 OFFCURVE",
"872 1761 OFFCURVE",
"886 1743 QCURVE",
"1255 1743 LINE",
"1255 2263 LINE",
"886 2263 LINE",
"886 1962 LINE",
"860 1980 OFFCURVE",
"737 2021 OFFCURVE",
"624 2021 QCURVE SMOOTH",
"399 2021 OFFCURVE",
"171 1855 OFFCURVE",
"171 1720 QCURVE SMOOTH",
"171 1638 OFFCURVE",
"251 1538 OFFCURVE",
"346 1516 QCURVE",
"251 1493 OFFCURVE",
"171 1364 OFFCURVE",
"171 1255 QCURVE SMOOTH",
"171 1130 LINE SMOOTH",
"171 983 OFFCURVE",
"442 801 OFFCURVE",
"712 801 QCURVE",
"712 801 LINE"
);
},
{
closed = 1;
nodes = (
"1093 -590 LINE",
"1093 610 LINE",
"722 610 LINE",
"716 520 OFFCURVE",
"657 369 OFFCURVE",
"563 274 OFFCURVE",
"503 274 QCURVE SMOOTH",
"460 274 OFFCURVE",
"460 309 QCURVE SMOOTH",
"460 344 OFFCURVE",
"495 344 QCURVE SMOOTH",
"505 344 LINE",
"505 610 LINE",
"425 610 LINE SMOOTH",
"311 610 OFFCURVE",
"169 535 OFFCURVE",
"108 410 OFFCURVE",
"108 332 QCURVE SMOOTH",
"108 233 OFFCURVE",
"214 94 OFFCURVE",
"364 23 OFFCURVE",
"434 23 QCURVE SMOOTH",
"514 23 OFFCURVE",
"616 51 OFFCURVE",
"688 104 OFFCURVE",
"722 139 QCURVE",
"722 -590 LINE",
"722 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19E9;
unicode = 19E9;
},
{
glyphname = uni19EA;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 801 OFFCURVE",
"1255 1120 QCURVE SMOOTH",
"1255 1681 LINE SMOOTH",
"1255 2001 OFFCURVE",
"713 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1681 QCURVE SMOOTH",
"172 1561 LINE SMOOTH",
"172 1456 OFFCURVE",
"254 1352 OFFCURVE",
"393 1317 OFFCURVE",
"479 1317 QCURVE SMOOTH",
"713 1317 LINE",
"713 1583 LINE",
"623 1583 LINE SMOOTH",
"563 1583 OFFCURVE",
"543 1636 OFFCURVE",
"543 1663 QCURVE SMOOTH",
"543 1681 LINE SMOOTH",
"543 1772 OFFCURVE",
"713 1772 QCURVE SMOOTH",
"887 1772 OFFCURVE",
"887 1681 QCURVE SMOOTH",
"887 1120 LINE SMOOTH",
"887 1030 OFFCURVE",
"713 1030 QCURVE SMOOTH",
"543 1030 OFFCURVE",
"543 1122 QCURVE",
"172 1122 LINE",
"172 801 OFFCURVE",
"713 801 QCURVE",
"713 801 LINE"
);
},
{
closed = 1;
nodes = (
"2554 801 OFFCURVE",
"2554 1182 QCURVE SMOOTH",
"2554 1620 LINE SMOOTH",
"2554 2001 OFFCURVE",
"2011 2001 QCURVE SMOOTH",
"1470 2001 OFFCURVE",
"1470 1620 QCURVE SMOOTH",
"1470 1182 LINE SMOOTH",
"1470 801 OFFCURVE",
"2011 801 QCURVE",
"2011 801 LINE"
);
},
{
closed = 1;
nodes = (
"1841 1030 OFFCURVE",
"1841 1182 QCURVE SMOOTH",
"1841 1620 LINE SMOOTH",
"1841 1772 OFFCURVE",
"2011 1772 QCURVE SMOOTH",
"2185 1772 OFFCURVE",
"2185 1620 QCURVE SMOOTH",
"2185 1182 LINE SMOOTH",
"2185 1030 OFFCURVE",
"2011 1030 QCURVE",
"2011 1030 LINE"
);
},
{
closed = 1;
nodes = (
"1694 -590 LINE",
"1694 610 LINE",
"1323 610 LINE",
"1317 520 OFFCURVE",
"1257 369 OFFCURVE",
"1163 274 OFFCURVE",
"1104 274 QCURVE SMOOTH",
"1061 274 OFFCURVE",
"1061 309 QCURVE SMOOTH",
"1061 344 OFFCURVE",
"1096 344 QCURVE SMOOTH",
"1106 344 LINE",
"1106 610 LINE",
"1026 610 LINE SMOOTH",
"911 610 OFFCURVE",
"770 535 OFFCURVE",
"709 410 OFFCURVE",
"709 332 QCURVE SMOOTH",
"709 233 OFFCURVE",
"815 94 OFFCURVE",
"965 23 OFFCURVE",
"1034 23 QCURVE SMOOTH",
"1114 23 OFFCURVE",
"1216 51 OFFCURVE",
"1288 104 OFFCURVE",
"1323 139 QCURVE",
"1323 -590 LINE",
"1323 -590 LINE"
);
}
);
width = 2600;
}
);
note = uni19EA;
unicode = 19EA;
},
{
glyphname = uni19EB;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 801 OFFCURVE",
"1255 1120 QCURVE SMOOTH",
"1255 1681 LINE SMOOTH",
"1255 2001 OFFCURVE",
"713 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1681 QCURVE SMOOTH",
"172 1561 LINE SMOOTH",
"172 1456 OFFCURVE",
"254 1352 OFFCURVE",
"393 1317 OFFCURVE",
"479 1317 QCURVE SMOOTH",
"713 1317 LINE",
"713 1583 LINE",
"623 1583 LINE SMOOTH",
"563 1583 OFFCURVE",
"543 1636 OFFCURVE",
"543 1663 QCURVE SMOOTH",
"543 1681 LINE SMOOTH",
"543 1772 OFFCURVE",
"713 1772 QCURVE SMOOTH",
"887 1772 OFFCURVE",
"887 1681 QCURVE SMOOTH",
"887 1120 LINE SMOOTH",
"887 1030 OFFCURVE",
"713 1030 QCURVE SMOOTH",
"543 1030 OFFCURVE",
"543 1122 QCURVE",
"172 1122 LINE",
"172 801 OFFCURVE",
"713 801 QCURVE",
"713 801 LINE"
);
},
{
closed = 1;
nodes = (
"2556 801 OFFCURVE",
"2556 1120 QCURVE SMOOTH",
"2556 1681 LINE SMOOTH",
"2556 2001 OFFCURVE",
"2013 2001 QCURVE SMOOTH",
"1472 2001 OFFCURVE",
"1472 1681 QCURVE SMOOTH",
"1472 1561 LINE SMOOTH",
"1472 1456 OFFCURVE",
"1554 1352 OFFCURVE",
"1694 1317 OFFCURVE",
"1780 1317 QCURVE SMOOTH",
"2013 1317 LINE",
"2013 1583 LINE",
"1923 1583 LINE SMOOTH",
"1864 1583 OFFCURVE",
"1843 1636 OFFCURVE",
"1843 1663 QCURVE SMOOTH",
"1843 1681 LINE SMOOTH",
"1843 1772 OFFCURVE",
"2013 1772 QCURVE SMOOTH",
"2187 1772 OFFCURVE",
"2187 1681 QCURVE SMOOTH",
"2187 1120 LINE SMOOTH",
"2187 1030 OFFCURVE",
"2013 1030 QCURVE SMOOTH",
"1843 1030 OFFCURVE",
"1843 1122 QCURVE",
"1472 1122 LINE",
"1472 801 OFFCURVE",
"2013 801 QCURVE",
"2013 801 LINE"
);
},
{
closed = 1;
nodes = (
"1694 -590 LINE",
"1694 610 LINE",
"1323 610 LINE",
"1317 520 OFFCURVE",
"1257 369 OFFCURVE",
"1163 274 OFFCURVE",
"1104 274 QCURVE SMOOTH",
"1061 274 OFFCURVE",
"1061 309 QCURVE SMOOTH",
"1061 344 OFFCURVE",
"1096 344 QCURVE SMOOTH",
"1106 344 LINE",
"1106 610 LINE",
"1026 610 LINE SMOOTH",
"911 610 OFFCURVE",
"770 535 OFFCURVE",
"709 410 OFFCURVE",
"709 332 QCURVE SMOOTH",
"709 233 OFFCURVE",
"815 94 OFFCURVE",
"965 23 OFFCURVE",
"1034 23 QCURVE SMOOTH",
"1114 23 OFFCURVE",
"1216 51 OFFCURVE",
"1288 104 OFFCURVE",
"1323 139 QCURVE",
"1323 -590 LINE",
"1323 -590 LINE"
);
}
);
width = 2600;
}
);
note = uni19EB;
unicode = 19EB;
},
{
glyphname = uni19EC;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 801 OFFCURVE",
"1255 1120 QCURVE SMOOTH",
"1255 1681 LINE SMOOTH",
"1255 2001 OFFCURVE",
"713 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1681 QCURVE SMOOTH",
"172 1561 LINE SMOOTH",
"172 1456 OFFCURVE",
"254 1352 OFFCURVE",
"393 1317 OFFCURVE",
"479 1317 QCURVE SMOOTH",
"713 1317 LINE",
"713 1583 LINE",
"623 1583 LINE SMOOTH",
"563 1583 OFFCURVE",
"543 1636 OFFCURVE",
"543 1663 QCURVE SMOOTH",
"543 1681 LINE SMOOTH",
"543 1772 OFFCURVE",
"713 1772 QCURVE SMOOTH",
"887 1772 OFFCURVE",
"887 1681 QCURVE SMOOTH",
"887 1120 LINE SMOOTH",
"887 1030 OFFCURVE",
"713 1030 QCURVE SMOOTH",
"543 1030 OFFCURVE",
"543 1122 QCURVE",
"172 1122 LINE",
"172 801 OFFCURVE",
"713 801 QCURVE",
"713 801 LINE"
);
},
{
closed = 1;
nodes = (
"2949 801 OFFCURVE",
"2949 1200 QCURVE SMOOTH",
"2949 2001 LINE",
"2578 2001 LINE",
"2460 1915 LINE",
"2351 2001 LINE",
"1970 2001 LINE",
"1970 1401 LINE",
"2380 1401 LINE",
"2380 1630 LINE",
"2351 1630 LINE",
"2351 1741 LINE",
"2460 1659 LINE",
"2578 1741 LINE",
"2578 1200 LINE SMOOTH",
"2578 1030 OFFCURVE",
"2228 1030 QCURVE SMOOTH",
"1874 1030 OFFCURVE",
"1874 1200 QCURVE SMOOTH",
"1874 2126 LINE SMOOTH",
"1874 2183 OFFCURVE",
"1831 2251 OFFCURVE",
"1753 2251 QCURVE SMOOTH",
"1403 2251 LINE",
"1403 2021 LINE",
"1503 2021 LINE",
"1503 1200 LINE SMOOTH",
"1503 801 OFFCURVE",
"2228 801 QCURVE",
"2228 801 LINE"
);
},
{
closed = 1;
nodes = (
"1821 -590 LINE",
"1821 610 LINE",
"1450 610 LINE",
"1444 520 OFFCURVE",
"1384 369 OFFCURVE",
"1290 274 OFFCURVE",
"1231 274 QCURVE SMOOTH",
"1188 274 OFFCURVE",
"1188 309 QCURVE SMOOTH",
"1188 344 OFFCURVE",
"1223 344 QCURVE SMOOTH",
"1233 344 LINE",
"1233 610 LINE",
"1153 610 LINE SMOOTH",
"1038 610 OFFCURVE",
"897 535 OFFCURVE",
"836 410 OFFCURVE",
"836 332 QCURVE SMOOTH",
"836 233 OFFCURVE",
"942 94 OFFCURVE",
"1092 23 OFFCURVE",
"1161 23 QCURVE SMOOTH",
"1241 23 OFFCURVE",
"1343 51 OFFCURVE",
"1415 104 OFFCURVE",
"1450 139 QCURVE",
"1450 -590 LINE",
"1450 -590 LINE"
);
}
);
width = 3121;
}
);
note = uni19EC;
unicode = 19EC;
},
{
glyphname = uni19ED;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 801 OFFCURVE",
"1255 1120 QCURVE SMOOTH",
"1255 1681 LINE SMOOTH",
"1255 2001 OFFCURVE",
"713 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1681 QCURVE SMOOTH",
"172 1561 LINE SMOOTH",
"172 1456 OFFCURVE",
"254 1352 OFFCURVE",
"393 1317 OFFCURVE",
"479 1317 QCURVE SMOOTH",
"713 1317 LINE",
"713 1583 LINE",
"623 1583 LINE SMOOTH",
"563 1583 OFFCURVE",
"543 1636 OFFCURVE",
"543 1663 QCURVE SMOOTH",
"543 1681 LINE SMOOTH",
"543 1772 OFFCURVE",
"713 1772 QCURVE SMOOTH",
"887 1772 OFFCURVE",
"887 1681 QCURVE SMOOTH",
"887 1120 LINE SMOOTH",
"887 1030 OFFCURVE",
"713 1030 QCURVE SMOOTH",
"543 1030 OFFCURVE",
"543 1122 QCURVE",
"172 1122 LINE",
"172 801 OFFCURVE",
"713 801 QCURVE",
"713 801 LINE"
);
},
{
closed = 1;
nodes = (
"1921 801 LINE",
"1921 1030 LINE",
"1841 1030 LINE",
"1841 1667 LINE SMOOTH",
"1841 1772 OFFCURVE",
"1950 1772 QCURVE SMOOTH",
"2058 1772 OFFCURVE",
"2058 1667 QCURVE SMOOTH",
"2058 801 LINE",
"2427 801 LINE",
"2427 1667 LINE SMOOTH",
"2427 1772 OFFCURVE",
"2537 1772 QCURVE SMOOTH",
"2646 1772 OFFCURVE",
"2646 1667 QCURVE SMOOTH",
"2646 801 LINE",
"3015 801 LINE",
"3015 1640 LINE SMOOTH",
"3015 2001 OFFCURVE",
"2537 2001 QCURVE SMOOTH",
"2339 2001 OFFCURVE",
"2243 1911 QCURVE",
"2146 2001 OFFCURVE",
"1950 2001 QCURVE SMOOTH",
"1470 2001 OFFCURVE",
"1470 1651 QCURVE SMOOTH",
"1470 801 LINE",
"1470 801 LINE"
);
},
{
closed = 1;
nodes = (
"1905 -590 LINE",
"1905 610 LINE",
"1534 610 LINE",
"1528 520 OFFCURVE",
"1468 369 OFFCURVE",
"1374 274 OFFCURVE",
"1315 274 QCURVE SMOOTH",
"1272 274 OFFCURVE",
"1272 309 QCURVE SMOOTH",
"1272 344 OFFCURVE",
"1307 344 QCURVE SMOOTH",
"1317 344 LINE",
"1317 610 LINE",
"1237 610 LINE SMOOTH",
"1122 610 OFFCURVE",
"981 535 OFFCURVE",
"920 410 OFFCURVE",
"920 332 QCURVE SMOOTH",
"920 233 OFFCURVE",
"1026 94 OFFCURVE",
"1176 23 OFFCURVE",
"1245 23 QCURVE SMOOTH",
"1325 23 OFFCURVE",
"1427 51 OFFCURVE",
"1499 104 OFFCURVE",
"1534 139 QCURVE",
"1534 -590 LINE",
"1534 -590 LINE"
);
}
);
width = 3186;
}
);
note = uni19ED;
unicode = 19ED;
},
{
glyphname = uni19EE;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 801 OFFCURVE",
"1255 1120 QCURVE SMOOTH",
"1255 1681 LINE SMOOTH",
"1255 2001 OFFCURVE",
"713 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1681 QCURVE SMOOTH",
"172 1561 LINE SMOOTH",
"172 1456 OFFCURVE",
"254 1352 OFFCURVE",
"393 1317 OFFCURVE",
"479 1317 QCURVE SMOOTH",
"713 1317 LINE",
"713 1583 LINE",
"623 1583 LINE SMOOTH",
"563 1583 OFFCURVE",
"543 1636 OFFCURVE",
"543 1663 QCURVE SMOOTH",
"543 1681 LINE SMOOTH",
"543 1772 OFFCURVE",
"713 1772 QCURVE SMOOTH",
"887 1772 OFFCURVE",
"887 1681 QCURVE SMOOTH",
"887 1120 LINE SMOOTH",
"887 1030 OFFCURVE",
"713 1030 QCURVE SMOOTH",
"543 1030 OFFCURVE",
"543 1122 QCURVE",
"172 1122 LINE",
"172 801 OFFCURVE",
"713 801 QCURVE",
"713 801 LINE"
);
},
{
closed = 1;
nodes = (
"2527 801 LINE",
"2597 983 LINE",
"2456 1298 LINE",
"2456 1470 LINE",
"2580 1470 LINE",
"2580 1739 LINE",
"2468 1739 LINE SMOOTH",
"2367 1739 OFFCURVE",
"2193 1724 OFFCURVE",
"2089 1665 OFFCURVE",
"2089 1602 QCURVE SMOOTH",
"2089 1249 LINE",
"2267 1030 LINE",
"2038 1030 LINE SMOOTH",
"1868 1030 OFFCURVE",
"1868 1200 QCURVE SMOOTH",
"1868 2111 LINE SMOOTH",
"1868 2187 OFFCURVE",
"1796 2261 OFFCURVE",
"1714 2261 QCURVE SMOOTH",
"1397 2261 LINE",
"1397 2032 LINE",
"1497 2032 LINE",
"1497 1200 LINE SMOOTH",
"1497 801 OFFCURVE",
"2038 801 QCURVE",
"2038 801 LINE"
);
},
{
closed = 1;
nodes = (
"1810 -590 LINE",
"1810 610 LINE",
"1440 610 LINE",
"1434 520 OFFCURVE",
"1374 369 OFFCURVE",
"1280 274 OFFCURVE",
"1221 274 QCURVE SMOOTH",
"1178 274 OFFCURVE",
"1178 309 QCURVE SMOOTH",
"1178 344 OFFCURVE",
"1212 344 QCURVE SMOOTH",
"1223 344 LINE",
"1223 610 LINE",
"1143 610 LINE SMOOTH",
"1028 610 OFFCURVE",
"887 535 OFFCURVE",
"825 410 OFFCURVE",
"825 332 QCURVE SMOOTH",
"825 233 OFFCURVE",
"932 94 OFFCURVE",
"1081 23 OFFCURVE",
"1151 23 QCURVE SMOOTH",
"1231 23 OFFCURVE",
"1333 51 OFFCURVE",
"1405 104 OFFCURVE",
"1440 139 QCURVE",
"1440 -590 LINE",
"1440 -590 LINE"
);
}
);
width = 2768;
}
);
note = uni19EE;
unicode = 19EE;
},
{
glyphname = uni19EF;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1255 801 OFFCURVE",
"1255 1120 QCURVE SMOOTH",
"1255 1681 LINE SMOOTH",
"1255 2001 OFFCURVE",
"713 2001 QCURVE SMOOTH",
"172 2001 OFFCURVE",
"172 1681 QCURVE SMOOTH",
"172 1561 LINE SMOOTH",
"172 1456 OFFCURVE",
"254 1352 OFFCURVE",
"393 1317 OFFCURVE",
"479 1317 QCURVE SMOOTH",
"713 1317 LINE",
"713 1583 LINE",
"623 1583 LINE SMOOTH",
"563 1583 OFFCURVE",
"543 1636 OFFCURVE",
"543 1663 QCURVE SMOOTH",
"543 1681 LINE SMOOTH",
"543 1772 OFFCURVE",
"713 1772 QCURVE SMOOTH",
"887 1772 OFFCURVE",
"887 1681 QCURVE SMOOTH",
"887 1120 LINE SMOOTH",
"887 1030 OFFCURVE",
"713 1030 QCURVE SMOOTH",
"543 1030 OFFCURVE",
"543 1122 QCURVE",
"172 1122 LINE",
"172 801 OFFCURVE",
"713 801 QCURVE",
"713 801 LINE"
);
},
{
closed = 1;
nodes = (
"2519 801 LINE",
"2591 983 LINE",
"2453 1198 LINE",
"2453 1333 LINE",
"2574 1333 LINE",
"2574 1602 LINE",
"2271 1602 LINE SMOOTH",
"2171 1602 OFFCURVE",
"2083 1516 OFFCURVE",
"2083 1401 QCURVE SMOOTH",
"2083 1169 LINE",
"2240 1030 LINE",
"2032 1030 LINE SMOOTH",
"1862 1030 OFFCURVE",
"1862 1130 QCURVE SMOOTH",
"1862 1559 LINE SMOOTH",
"1862 1618 OFFCURVE",
"1888 1708 OFFCURVE",
"1905 1726 QCURVE",
"1960 1700 OFFCURVE",
"2060 1669 OFFCURVE",
"2138 1669 QCURVE SMOOTH",
"2365 1669 OFFCURVE",
"2576 1853 OFFCURVE",
"2576 2009 QCURVE SMOOTH",
"2576 2263 LINE",
"2206 2263 LINE",
"2206 1966 LINE SMOOTH",
"2206 1921 OFFCURVE",
"2163 1882 OFFCURVE",
"2142 1878 QCURVE SMOOTH",
"2124 1874 OFFCURVE",
"2070 1882 OFFCURVE",
"2034 1896 QCURVE",
"2050 1923 OFFCURVE",
"2079 1987 OFFCURVE",
"2079 2046 QCURVE SMOOTH",
"2079 2095 OFFCURVE",
"2019 2189 OFFCURVE",
"1909 2253 OFFCURVE",
"1833 2253 QCURVE SMOOTH",
"1745 2253 OFFCURVE",
"1628 2181 OFFCURVE",
"1569 2079 OFFCURVE",
"1569 2030 QCURVE SMOOTH",
"1569 1964 OFFCURVE",
"1604 1898 OFFCURVE",
"1628 1866 QCURVE",
"1538 1806 OFFCURVE",
"1491 1661 OFFCURVE",
"1491 1559 QCURVE SMOOTH",
"1491 1130 LINE SMOOTH",
"1491 801 OFFCURVE",
"2032 801 QCURVE",
"2032 801 LINE"
);
},
{
closed = 1;
nodes = (
"1810 -590 LINE",
"1810 610 LINE",
"1440 610 LINE",
"1434 520 OFFCURVE",
"1374 369 OFFCURVE",
"1280 274 OFFCURVE",
"1221 274 QCURVE SMOOTH",
"1178 274 OFFCURVE",
"1178 309 QCURVE SMOOTH",
"1178 344 OFFCURVE",
"1212 344 QCURVE SMOOTH",
"1223 344 LINE",
"1223 610 LINE",
"1143 610 LINE SMOOTH",
"1028 610 OFFCURVE",
"887 535 OFFCURVE",
"825 410 OFFCURVE",
"825 332 QCURVE SMOOTH",
"825 233 OFFCURVE",
"932 94 OFFCURVE",
"1081 23 OFFCURVE",
"1151 23 QCURVE SMOOTH",
"1231 23 OFFCURVE",
"1333 51 OFFCURVE",
"1405 104 OFFCURVE",
"1440 139 QCURVE",
"1440 -590 LINE",
"1440 -590 LINE"
);
}
);
width = 2615;
}
);
note = uni19EF;
unicode = 19EF;
},
{
glyphname = uni19F0;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"485 903 LINE",
"717 1073 LINE",
"948 903 LINE",
"1259 903 LINE",
"1259 1520 LINE SMOOTH",
"1259 1575 OFFCURVE",
"1239 1653 OFFCURVE",
"1165 1694 OFFCURVE",
"1083 1694 QCURVE SMOOTH",
"786 1694 LINE",
"786 1464 LINE",
"838 1464 LINE SMOOTH",
"864 1464 OFFCURVE",
"889 1444 OFFCURVE",
"889 1403 QCURVE SMOOTH",
"889 1241 LINE",
"717 1376 LINE",
"545 1239 LINE",
"545 1784 LINE SMOOTH",
"545 1874 OFFCURVE",
"715 1874 QCURVE SMOOTH",
"889 1874 OFFCURVE",
"889 1784 QCURVE",
"1257 1784 LINE",
"1257 2365 LINE",
"889 2365 LINE",
"889 2050 LINE",
"792 2103 OFFCURVE",
"608 2103 QCURVE SMOOTH",
"174 2103 OFFCURVE",
"174 1784 QCURVE SMOOTH",
"174 903 LINE",
"174 903 LINE"
);
},
{
closed = 1;
nodes = (
"485 -590 LINE",
"717 -420 LINE",
"948 -590 LINE",
"1259 -590 LINE",
"1259 27 LINE SMOOTH",
"1259 82 OFFCURVE",
"1239 160 OFFCURVE",
"1165 201 OFFCURVE",
"1083 201 QCURVE SMOOTH",
"786 201 LINE",
"786 -29 LINE",
"838 -29 LINE SMOOTH",
"864 -29 OFFCURVE",
"889 -49 OFFCURVE",
"889 -90 QCURVE SMOOTH",
"889 -252 LINE",
"717 -117 LINE",
"545 -254 LINE",
"545 291 LINE SMOOTH",
"545 381 OFFCURVE",
"715 381 QCURVE SMOOTH",
"889 381 OFFCURVE",
"889 291 QCURVE",
"1257 291 LINE",
"1257 872 LINE",
"889 872 LINE",
"889 557 LINE",
"792 610 OFFCURVE",
"608 610 QCURVE SMOOTH",
"174 610 OFFCURVE",
"174 291 QCURVE SMOOTH",
"174 -590 LINE",
"174 -590 LINE"
);
}
);
width = 1306;
}
);
note = uni19F0;
unicode = 19F0;
},
{
glyphname = uni19F1;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1093 801 LINE",
"1093 2001 LINE",
"722 2001 LINE",
"716 1911 OFFCURVE",
"657 1759 OFFCURVE",
"563 1665 OFFCURVE",
"503 1665 QCURVE SMOOTH",
"460 1665 OFFCURVE",
"460 1700 QCURVE SMOOTH",
"460 1735 OFFCURVE",
"495 1735 QCURVE SMOOTH",
"505 1735 LINE",
"505 2001 LINE",
"425 2001 LINE SMOOTH",
"311 2001 OFFCURVE",
"169 1925 OFFCURVE",
"108 1800 OFFCURVE",
"108 1722 QCURVE SMOOTH",
"108 1624 OFFCURVE",
"214 1485 OFFCURVE",
"364 1413 OFFCURVE",
"434 1413 QCURVE SMOOTH",
"514 1413 OFFCURVE",
"616 1442 OFFCURVE",
"688 1495 OFFCURVE",
"722 1530 QCURVE",
"722 801 LINE",
"722 801 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"712 610 QCURVE SMOOTH",
"171 610 OFFCURVE",
"171 291 QCURVE SMOOTH",
"171 170 LINE SMOOTH",
"171 66 OFFCURVE",
"253 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"712 -74 LINE",
"712 193 LINE",
"622 193 LINE SMOOTH",
"563 193 OFFCURVE",
"542 246 OFFCURVE",
"542 272 QCURVE SMOOTH",
"542 291 LINE SMOOTH",
"542 381 OFFCURVE",
"712 381 QCURVE SMOOTH",
"886 381 OFFCURVE",
"886 291 QCURVE SMOOTH",
"886 -270 LINE SMOOTH",
"886 -360 OFFCURVE",
"712 -360 QCURVE SMOOTH",
"542 -360 OFFCURVE",
"542 -268 QCURVE",
"171 -268 LINE",
"171 -590 OFFCURVE",
"712 -590 QCURVE",
"712 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19F1;
unicode = 19F1;
},
{
glyphname = uni19F2;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1229 903 LINE",
"1229 2103 LINE",
"858 2103 LINE",
"852 2013 OFFCURVE",
"792 1862 OFFCURVE",
"698 1767 OFFCURVE",
"639 1767 QCURVE SMOOTH",
"596 1767 OFFCURVE",
"596 1802 QCURVE SMOOTH",
"596 1837 OFFCURVE",
"631 1837 QCURVE SMOOTH",
"641 1837 LINE",
"641 2103 LINE",
"561 2103 LINE SMOOTH",
"446 2103 OFFCURVE",
"305 2028 OFFCURVE",
"244 1903 OFFCURVE",
"244 1825 QCURVE SMOOTH",
"244 1726 OFFCURVE",
"350 1587 OFFCURVE",
"500 1516 OFFCURVE",
"569 1516 QCURVE SMOOTH",
"649 1516 OFFCURVE",
"752 1544 OFFCURVE",
"823 1597 OFFCURVE",
"858 1632 QCURVE",
"858 903 LINE",
"858 903 LINE"
);
},
{
closed = 1;
nodes = (
"1763 -590 OFFCURVE",
"1763 -190 QCURVE SMOOTH",
"1763 610 LINE",
"1393 610 LINE",
"1274 524 LINE",
"1165 610 LINE",
"784 610 LINE",
"784 10 LINE",
"1194 10 LINE",
"1194 240 LINE",
"1165 240 LINE",
"1165 350 LINE",
"1274 268 LINE",
"1393 350 LINE",
"1393 -190 LINE SMOOTH",
"1393 -360 OFFCURVE",
"1042 -360 QCURVE SMOOTH",
"688 -360 OFFCURVE",
"688 -190 QCURVE SMOOTH",
"688 735 LINE SMOOTH",
"688 793 OFFCURVE",
"645 860 OFFCURVE",
"567 860 QCURVE SMOOTH",
"217 860 LINE",
"217 631 LINE",
"317 631 LINE",
"317 -190 LINE SMOOTH",
"317 -590 OFFCURVE",
"1042 -590 QCURVE",
"1042 -590 LINE"
);
}
);
width = 1792;
}
);
note = uni19F2;
unicode = 19F2;
},
{
glyphname = uni19F3;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1171 801 LINE",
"1171 2001 LINE",
"801 2001 LINE",
"795 1911 OFFCURVE",
"735 1759 OFFCURVE",
"641 1665 OFFCURVE",
"582 1665 QCURVE SMOOTH",
"539 1665 OFFCURVE",
"539 1700 QCURVE SMOOTH",
"539 1735 OFFCURVE",
"573 1735 QCURVE SMOOTH",
"584 1735 LINE",
"584 2001 LINE",
"504 2001 LINE SMOOTH",
"389 2001 OFFCURVE",
"248 1925 OFFCURVE",
"186 1800 OFFCURVE",
"186 1722 QCURVE SMOOTH",
"186 1624 OFFCURVE",
"293 1485 OFFCURVE",
"442 1413 OFFCURVE",
"512 1413 QCURVE SMOOTH",
"592 1413 OFFCURVE",
"694 1442 OFFCURVE",
"766 1495 OFFCURVE",
"801 1530 QCURVE",
"801 801 LINE",
"801 801 LINE"
);
},
{
closed = 1;
nodes = (
"623 -590 LINE",
"623 -360 LINE",
"543 -360 LINE",
"543 276 LINE SMOOTH",
"543 381 OFFCURVE",
"651 381 QCURVE SMOOTH",
"760 381 OFFCURVE",
"760 276 QCURVE SMOOTH",
"760 -590 LINE",
"1128 -590 LINE",
"1128 276 LINE SMOOTH",
"1128 381 OFFCURVE",
"1239 381 QCURVE SMOOTH",
"1348 381 OFFCURVE",
"1348 276 QCURVE SMOOTH",
"1348 -590 LINE",
"1716 -590 LINE",
"1716 250 LINE SMOOTH",
"1716 610 OFFCURVE",
"1239 610 QCURVE SMOOTH",
"1040 610 OFFCURVE",
"944 520 QCURVE",
"848 610 OFFCURVE",
"651 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 260 QCURVE SMOOTH",
"172 -590 LINE",
"172 -590 LINE"
);
}
);
width = 1763;
}
);
note = uni19F3;
unicode = 19F3;
},
{
glyphname = uni19F4;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1195 903 LINE",
"1195 2103 LINE",
"825 2103 LINE",
"818 2013 OFFCURVE",
"759 1862 OFFCURVE",
"665 1767 OFFCURVE",
"606 1767 QCURVE SMOOTH",
"562 1767 OFFCURVE",
"562 1802 QCURVE SMOOTH",
"562 1837 OFFCURVE",
"597 1837 QCURVE SMOOTH",
"608 1837 LINE",
"608 2103 LINE",
"528 2103 LINE SMOOTH",
"413 2103 OFFCURVE",
"272 2028 OFFCURVE",
"210 1903 OFFCURVE",
"210 1825 QCURVE SMOOTH",
"210 1726 OFFCURVE",
"317 1587 OFFCURVE",
"466 1516 OFFCURVE",
"536 1516 QCURVE SMOOTH",
"616 1516 OFFCURVE",
"718 1544 OFFCURVE",
"790 1597 OFFCURVE",
"825 1632 QCURVE",
"825 903 LINE",
"825 903 LINE"
);
},
{
closed = 1;
nodes = (
"1330 -590 LINE",
"1400 -408 LINE",
"1259 -92 LINE",
"1259 80 LINE",
"1384 80 LINE",
"1384 348 LINE",
"1271 348 LINE SMOOTH",
"1171 348 OFFCURVE",
"997 334 OFFCURVE",
"892 274 OFFCURVE",
"892 211 QCURVE SMOOTH",
"892 -141 LINE",
"1070 -360 LINE",
"841 -360 LINE SMOOTH",
"671 -360 OFFCURVE",
"671 -190 QCURVE SMOOTH",
"671 721 LINE SMOOTH",
"671 797 OFFCURVE",
"599 870 OFFCURVE",
"517 870 QCURVE SMOOTH",
"200 870 LINE",
"200 641 LINE",
"300 641 LINE",
"300 -190 LINE SMOOTH",
"300 -590 OFFCURVE",
"841 -590 QCURVE",
"841 -590 LINE"
);
}
);
width = 1421;
}
);
note = uni19F4;
unicode = 19F4;
},
{
glyphname = uni19F5;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1093 903 LINE",
"1093 2103 LINE",
"722 2103 LINE",
"716 2013 OFFCURVE",
"657 1862 OFFCURVE",
"563 1767 OFFCURVE",
"503 1767 QCURVE SMOOTH",
"460 1767 OFFCURVE",
"460 1802 QCURVE SMOOTH",
"460 1837 OFFCURVE",
"495 1837 QCURVE SMOOTH",
"505 1837 LINE",
"505 2103 LINE",
"425 2103 LINE SMOOTH",
"311 2103 OFFCURVE",
"169 2028 OFFCURVE",
"108 1903 OFFCURVE",
"108 1825 QCURVE SMOOTH",
"108 1726 OFFCURVE",
"214 1587 OFFCURVE",
"364 1516 OFFCURVE",
"434 1516 QCURVE SMOOTH",
"514 1516 OFFCURVE",
"616 1544 OFFCURVE",
"688 1597 OFFCURVE",
"722 1632 QCURVE",
"722 903 LINE",
"722 903 LINE"
);
},
{
closed = 1;
nodes = (
"1200 -590 LINE",
"1271 -408 LINE",
"1134 -193 LINE",
"1134 -57 LINE",
"1255 -57 LINE",
"1255 211 LINE",
"952 211 LINE SMOOTH",
"851 211 OFFCURVE",
"763 125 OFFCURVE",
"763 10 QCURVE SMOOTH",
"763 -221 LINE",
"921 -360 LINE",
"712 -360 LINE SMOOTH",
"542 -360 OFFCURVE",
"542 -260 QCURVE SMOOTH",
"542 168 LINE SMOOTH",
"542 227 OFFCURVE",
"569 317 OFFCURVE",
"585 336 QCURVE",
"640 309 OFFCURVE",
"741 279 OFFCURVE",
"819 279 QCURVE SMOOTH",
"1046 279 OFFCURVE",
"1257 463 OFFCURVE",
"1257 618 QCURVE SMOOTH",
"1257 872 LINE",
"886 872 LINE",
"886 575 LINE SMOOTH",
"886 530 OFFCURVE",
"843 492 OFFCURVE",
"823 487 QCURVE SMOOTH",
"804 483 OFFCURVE",
"751 492 OFFCURVE",
"714 506 QCURVE",
"731 532 OFFCURVE",
"759 596 OFFCURVE",
"759 655 QCURVE SMOOTH",
"759 705 OFFCURVE",
"700 799 OFFCURVE",
"589 862 OFFCURVE",
"514 862 QCURVE SMOOTH",
"425 862 OFFCURVE",
"309 791 OFFCURVE",
"249 688 OFFCURVE",
"249 639 QCURVE SMOOTH",
"249 573 OFFCURVE",
"284 508 OFFCURVE",
"309 475 QCURVE",
"219 416 OFFCURVE",
"171 270 OFFCURVE",
"171 168 QCURVE SMOOTH",
"171 -260 LINE SMOOTH",
"171 -590 OFFCURVE",
"712 -590 QCURVE",
"712 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19F5;
unicode = 19F5;
},
{
glyphname = uni19F6;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1093 903 LINE",
"1093 2103 LINE",
"722 2103 LINE",
"716 2013 OFFCURVE",
"657 1862 OFFCURVE",
"563 1767 OFFCURVE",
"503 1767 QCURVE SMOOTH",
"460 1767 OFFCURVE",
"460 1802 QCURVE SMOOTH",
"460 1837 OFFCURVE",
"495 1837 QCURVE SMOOTH",
"505 1837 LINE",
"505 2103 LINE",
"425 2103 LINE SMOOTH",
"311 2103 OFFCURVE",
"169 2028 OFFCURVE",
"108 1903 OFFCURVE",
"108 1825 QCURVE SMOOTH",
"108 1726 OFFCURVE",
"214 1587 OFFCURVE",
"364 1516 OFFCURVE",
"434 1516 QCURVE SMOOTH",
"514 1516 OFFCURVE",
"616 1544 OFFCURVE",
"688 1597 OFFCURVE",
"722 1632 QCURVE",
"722 903 LINE",
"722 903 LINE"
);
},
{
closed = 1;
nodes = (
"1257 -590 OFFCURVE",
"1257 -190 QCURVE SMOOTH",
"1257 211 LINE SMOOTH",
"1257 410 OFFCURVE",
"999 639 OFFCURVE",
"774 639 QCURVE SMOOTH",
"683 639 OFFCURVE",
"567 586 OFFCURVE",
"542 557 QCURVE",
"542 872 LINE",
"171 872 LINE",
"171 270 LINE",
"542 270 LINE",
"557 326 OFFCURVE",
"630 381 OFFCURVE",
"712 381 QCURVE SMOOTH",
"796 381 OFFCURVE",
"886 293 OFFCURVE",
"886 211 QCURVE SMOOTH",
"886 -109 LINE SMOOTH",
"886 -197 OFFCURVE",
"800 -299 OFFCURVE",
"712 -299 QCURVE SMOOTH",
"628 -299 OFFCURVE",
"542 -229 OFFCURVE",
"542 -174 QCURVE SMOOTH",
"542 -143 OFFCURVE",
"565 -80 OFFCURVE",
"630 -37 OFFCURVE",
"696 -37 QCURVE SMOOTH",
"763 -37 LINE",
"763 193 LINE",
"614 193 LINE SMOOTH",
"393 193 OFFCURVE",
"171 -12 OFFCURVE",
"171 -180 QCURVE SMOOTH",
"171 -295 OFFCURVE",
"292 -479 OFFCURVE",
"532 -590 OFFCURVE",
"712 -590 QCURVE",
"712 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19F6;
unicode = 19F6;
},
{
glyphname = uni19F7;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1093 903 LINE",
"1093 2103 LINE",
"722 2103 LINE",
"716 2013 OFFCURVE",
"657 1862 OFFCURVE",
"563 1767 OFFCURVE",
"503 1767 QCURVE SMOOTH",
"460 1767 OFFCURVE",
"460 1802 QCURVE SMOOTH",
"460 1837 OFFCURVE",
"495 1837 QCURVE SMOOTH",
"505 1837 LINE",
"505 2103 LINE",
"425 2103 LINE SMOOTH",
"311 2103 OFFCURVE",
"169 2028 OFFCURVE",
"108 1903 OFFCURVE",
"108 1825 QCURVE SMOOTH",
"108 1726 OFFCURVE",
"214 1587 OFFCURVE",
"364 1516 OFFCURVE",
"434 1516 QCURVE SMOOTH",
"514 1516 OFFCURVE",
"616 1544 OFFCURVE",
"688 1597 OFFCURVE",
"722 1632 QCURVE",
"722 903 LINE",
"722 903 LINE"
);
},
{
closed = 1;
nodes = (
"614 -590 LINE",
"614 -360 LINE",
"542 -360 LINE",
"542 279 LINE SMOOTH",
"542 299 OFFCURVE",
"552 336 OFFCURVE",
"567 336 QCURVE SMOOTH",
"579 336 OFFCURVE",
"608 305 OFFCURVE",
"632 274 QCURVE SMOOTH",
"657 244 OFFCURVE",
"688 244 QCURVE SMOOTH",
"716 244 OFFCURVE",
"745 274 QCURVE SMOOTH",
"761 293 OFFCURVE",
"794 336 OFFCURVE",
"808 336 QCURVE SMOOTH",
"833 336 OFFCURVE",
"833 279 QCURVE SMOOTH",
"833 -299 LINE SMOOTH",
"833 -373 OFFCURVE",
"925 -506 OFFCURVE",
"1107 -590 OFFCURVE",
"1243 -590 QCURVE SMOOTH",
"1376 -590 OFFCURVE",
"1558 -508 OFFCURVE",
"1648 -377 OFFCURVE",
"1648 -299 QCURVE SMOOTH",
"1648 872 LINE",
"1277 872 LINE",
"1277 -317 LINE SMOOTH",
"1277 -334 OFFCURVE",
"1261 -360 OFFCURVE",
"1241 -360 QCURVE SMOOTH",
"1220 -360 OFFCURVE",
"1204 -334 OFFCURVE",
"1204 -317 QCURVE SMOOTH",
"1204 233 LINE SMOOTH",
"1204 381 OFFCURVE",
"1130 545 OFFCURVE",
"1011 610 OFFCURVE",
"944 610 QCURVE SMOOTH",
"856 610 OFFCURVE",
"741 549 OFFCURVE",
"688 485 QCURVE",
"634 549 OFFCURVE",
"520 610 OFFCURVE",
"419 610 QCURVE SMOOTH",
"360 610 OFFCURVE",
"245 547 OFFCURVE",
"171 397 OFFCURVE",
"171 268 QCURVE SMOOTH",
"171 -590 LINE",
"171 -590 LINE"
);
}
);
width = 1691;
}
);
note = uni19F7;
unicode = 19F7;
},
{
glyphname = uni19F8;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1093 903 LINE",
"1093 2103 LINE",
"722 2103 LINE",
"716 2013 OFFCURVE",
"657 1862 OFFCURVE",
"563 1767 OFFCURVE",
"503 1767 QCURVE SMOOTH",
"460 1767 OFFCURVE",
"460 1802 QCURVE SMOOTH",
"460 1837 OFFCURVE",
"495 1837 QCURVE SMOOTH",
"505 1837 LINE",
"505 2103 LINE",
"425 2103 LINE SMOOTH",
"311 2103 OFFCURVE",
"169 2028 OFFCURVE",
"108 1903 OFFCURVE",
"108 1825 QCURVE SMOOTH",
"108 1726 OFFCURVE",
"214 1587 OFFCURVE",
"364 1516 OFFCURVE",
"434 1516 QCURVE SMOOTH",
"514 1516 OFFCURVE",
"616 1544 OFFCURVE",
"688 1597 OFFCURVE",
"722 1632 QCURVE",
"722 903 LINE",
"722 903 LINE"
);
},
{
closed = 1;
nodes = (
"483 -590 LINE",
"714 -420 LINE",
"946 -590 LINE",
"1257 -590 LINE",
"1257 27 LINE SMOOTH",
"1257 82 OFFCURVE",
"1236 160 OFFCURVE",
"1163 201 OFFCURVE",
"1081 201 QCURVE SMOOTH",
"784 201 LINE",
"784 -29 LINE",
"835 -29 LINE SMOOTH",
"862 -29 OFFCURVE",
"886 -49 OFFCURVE",
"886 -90 QCURVE SMOOTH",
"886 -252 LINE",
"714 -117 LINE",
"542 -254 LINE",
"542 291 LINE SMOOTH",
"542 381 OFFCURVE",
"712 381 QCURVE SMOOTH",
"886 381 OFFCURVE",
"886 291 QCURVE",
"1255 291 LINE",
"1255 872 LINE",
"886 872 LINE",
"886 557 LINE",
"790 610 OFFCURVE",
"606 610 QCURVE SMOOTH",
"171 610 OFFCURVE",
"171 291 QCURVE SMOOTH",
"171 -590 LINE",
"171 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19F8;
unicode = 19F8;
},
{
glyphname = uni19F9;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1093 903 LINE",
"1093 2103 LINE",
"722 2103 LINE",
"716 2013 OFFCURVE",
"657 1862 OFFCURVE",
"563 1767 OFFCURVE",
"503 1767 QCURVE SMOOTH",
"460 1767 OFFCURVE",
"460 1802 QCURVE SMOOTH",
"460 1837 OFFCURVE",
"495 1837 QCURVE SMOOTH",
"505 1837 LINE",
"505 2103 LINE",
"425 2103 LINE SMOOTH",
"311 2103 OFFCURVE",
"169 2028 OFFCURVE",
"108 1903 OFFCURVE",
"108 1825 QCURVE SMOOTH",
"108 1726 OFFCURVE",
"214 1587 OFFCURVE",
"364 1516 OFFCURVE",
"434 1516 QCURVE SMOOTH",
"514 1516 OFFCURVE",
"616 1544 OFFCURVE",
"688 1597 OFFCURVE",
"722 1632 QCURVE",
"722 903 LINE",
"722 903 LINE"
);
},
{
closed = 1;
nodes = (
"985 -590 OFFCURVE",
"1234 -426 OFFCURVE",
"1234 -297 QCURVE SMOOTH",
"1234 -180 OFFCURVE",
"1077 -59 OFFCURVE",
"888 -59 QCURVE SMOOTH",
"737 -59 LINE",
"737 -225 LINE",
"761 -225 LINE SMOOTH",
"806 -225 OFFCURVE",
"866 -250 OFFCURVE",
"866 -285 QCURVE SMOOTH",
"866 -328 OFFCURVE",
"774 -360 OFFCURVE",
"696 -360 QCURVE SMOOTH",
"626 -360 OFFCURVE",
"542 -326 OFFCURVE",
"542 -291 QCURVE SMOOTH",
"542 -111 LINE SMOOTH",
"542 -49 OFFCURVE",
"616 2 OFFCURVE",
"667 2 QCURVE SMOOTH",
"1013 2 LINE",
"1013 231 LINE",
"618 231 LINE SMOOTH",
"587 231 OFFCURVE",
"538 260 OFFCURVE",
"538 301 QCURVE SMOOTH",
"538 356 OFFCURVE",
"643 403 OFFCURVE",
"716 403 QCURVE SMOOTH",
"802 403 OFFCURVE",
"872 371 OFFCURVE",
"886 352 QCURVE",
"1255 352 LINE",
"1255 872 LINE",
"886 872 LINE",
"886 571 LINE",
"860 590 OFFCURVE",
"737 631 OFFCURVE",
"624 631 QCURVE SMOOTH",
"399 631 OFFCURVE",
"171 465 OFFCURVE",
"171 330 QCURVE SMOOTH",
"171 248 OFFCURVE",
"251 147 OFFCURVE",
"346 125 QCURVE",
"251 102 OFFCURVE",
"171 -27 OFFCURVE",
"171 -135 QCURVE SMOOTH",
"171 -260 LINE SMOOTH",
"171 -408 OFFCURVE",
"442 -590 OFFCURVE",
"712 -590 QCURVE",
"712 -590 LINE"
);
}
);
width = 1300;
}
);
note = uni19F9;
unicode = 19F9;
},
{
glyphname = uni19FA;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1694 801 LINE",
"1694 2001 LINE",
"1323 2001 LINE",
"1317 1911 OFFCURVE",
"1257 1759 OFFCURVE",
"1163 1665 OFFCURVE",
"1104 1665 QCURVE SMOOTH",
"1061 1665 OFFCURVE",
"1061 1700 QCURVE SMOOTH",
"1061 1735 OFFCURVE",
"1096 1735 QCURVE SMOOTH",
"1106 1735 LINE",
"1106 2001 LINE",
"1026 2001 LINE SMOOTH",
"911 2001 OFFCURVE",
"770 1925 OFFCURVE",
"709 1800 OFFCURVE",
"709 1722 QCURVE SMOOTH",
"709 1624 OFFCURVE",
"815 1485 OFFCURVE",
"965 1413 OFFCURVE",
"1034 1413 QCURVE SMOOTH",
"1114 1413 OFFCURVE",
"1216 1442 OFFCURVE",
"1288 1495 OFFCURVE",
"1323 1530 QCURVE",
"1323 801 LINE",
"1323 801 LINE"
);
},
{
closed = 1;
nodes = (
"2554 -590 OFFCURVE",
"2554 -209 QCURVE SMOOTH",
"2554 229 LINE SMOOTH",
"2554 610 OFFCURVE",
"2011 610 QCURVE SMOOTH",
"1470 610 OFFCURVE",
"1470 229 QCURVE SMOOTH",
"1470 -209 LINE SMOOTH",
"1470 -590 OFFCURVE",
"2011 -590 QCURVE",
"2011 -590 LINE"
);
},
{
closed = 1;
nodes = (
"1841 -360 OFFCURVE",
"1841 -209 QCURVE SMOOTH",
"1841 229 LINE SMOOTH",
"1841 381 OFFCURVE",
"2011 381 QCURVE SMOOTH",
"2185 381 OFFCURVE",
"2185 229 QCURVE SMOOTH",
"2185 -209 LINE SMOOTH",
"2185 -360 OFFCURVE",
"2011 -360 QCURVE",
"2011 -360 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"713 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 170 LINE SMOOTH",
"172 66 OFFCURVE",
"254 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"713 -74 LINE",
"713 193 LINE",
"623 193 LINE SMOOTH",
"563 193 OFFCURVE",
"543 246 OFFCURVE",
"543 272 QCURVE SMOOTH",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE SMOOTH",
"887 -270 LINE SMOOTH",
"887 -360 OFFCURVE",
"713 -360 QCURVE SMOOTH",
"543 -360 OFFCURVE",
"543 -268 QCURVE",
"172 -268 LINE",
"172 -590 OFFCURVE",
"713 -590 QCURVE",
"713 -590 LINE"
);
}
);
width = 2600;
}
);
note = uni19FA;
unicode = 19FA;
},
{
glyphname = uni19FB;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1694 801 LINE",
"1694 2001 LINE",
"1323 2001 LINE",
"1317 1911 OFFCURVE",
"1257 1759 OFFCURVE",
"1163 1665 OFFCURVE",
"1104 1665 QCURVE SMOOTH",
"1061 1665 OFFCURVE",
"1061 1700 QCURVE SMOOTH",
"1061 1735 OFFCURVE",
"1096 1735 QCURVE SMOOTH",
"1106 1735 LINE",
"1106 2001 LINE",
"1026 2001 LINE SMOOTH",
"911 2001 OFFCURVE",
"770 1925 OFFCURVE",
"709 1800 OFFCURVE",
"709 1722 QCURVE SMOOTH",
"709 1624 OFFCURVE",
"815 1485 OFFCURVE",
"965 1413 OFFCURVE",
"1034 1413 QCURVE SMOOTH",
"1114 1413 OFFCURVE",
"1216 1442 OFFCURVE",
"1288 1495 OFFCURVE",
"1323 1530 QCURVE",
"1323 801 LINE",
"1323 801 LINE"
);
},
{
closed = 1;
nodes = (
"2556 -590 OFFCURVE",
"2556 -270 QCURVE SMOOTH",
"2556 291 LINE SMOOTH",
"2556 610 OFFCURVE",
"2013 610 QCURVE SMOOTH",
"1472 610 OFFCURVE",
"1472 291 QCURVE SMOOTH",
"1472 170 LINE SMOOTH",
"1472 66 OFFCURVE",
"1554 -39 OFFCURVE",
"1694 -74 OFFCURVE",
"1780 -74 QCURVE SMOOTH",
"2013 -74 LINE",
"2013 193 LINE",
"1923 193 LINE SMOOTH",
"1864 193 OFFCURVE",
"1843 246 OFFCURVE",
"1843 272 QCURVE SMOOTH",
"1843 291 LINE SMOOTH",
"1843 381 OFFCURVE",
"2013 381 QCURVE SMOOTH",
"2187 381 OFFCURVE",
"2187 291 QCURVE SMOOTH",
"2187 -270 LINE SMOOTH",
"2187 -360 OFFCURVE",
"2013 -360 QCURVE SMOOTH",
"1843 -360 OFFCURVE",
"1843 -268 QCURVE",
"1472 -268 LINE",
"1472 -590 OFFCURVE",
"2013 -590 QCURVE",
"2013 -590 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"713 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 170 LINE SMOOTH",
"172 66 OFFCURVE",
"254 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"713 -74 LINE",
"713 193 LINE",
"623 193 LINE SMOOTH",
"563 193 OFFCURVE",
"543 246 OFFCURVE",
"543 272 QCURVE SMOOTH",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE SMOOTH",
"887 -270 LINE SMOOTH",
"887 -360 OFFCURVE",
"713 -360 QCURVE SMOOTH",
"543 -360 OFFCURVE",
"543 -268 QCURVE",
"172 -268 LINE",
"172 -590 OFFCURVE",
"713 -590 QCURVE",
"713 -590 LINE"
);
}
);
width = 2600;
}
);
note = uni19FB;
unicode = 19FB;
},
{
glyphname = uni19FC;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1694 924 LINE",
"1694 2124 LINE",
"1323 2124 LINE",
"1317 2034 OFFCURVE",
"1257 1882 OFFCURVE",
"1163 1788 OFFCURVE",
"1104 1788 QCURVE SMOOTH",
"1061 1788 OFFCURVE",
"1061 1823 QCURVE SMOOTH",
"1061 1858 OFFCURVE",
"1096 1858 QCURVE SMOOTH",
"1106 1858 LINE",
"1106 2124 LINE",
"1026 2124 LINE SMOOTH",
"911 2124 OFFCURVE",
"770 2048 OFFCURVE",
"709 1923 OFFCURVE",
"709 1845 QCURVE SMOOTH",
"709 1747 OFFCURVE",
"815 1608 OFFCURVE",
"965 1536 OFFCURVE",
"1034 1536 QCURVE SMOOTH",
"1114 1536 OFFCURVE",
"1216 1565 OFFCURVE",
"1288 1618 OFFCURVE",
"1323 1653 QCURVE",
"1323 924 LINE",
"1323 924 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"713 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 170 LINE SMOOTH",
"172 66 OFFCURVE",
"254 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"713 -74 LINE",
"713 193 LINE",
"623 193 LINE SMOOTH",
"563 193 OFFCURVE",
"543 246 OFFCURVE",
"543 272 QCURVE SMOOTH",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE SMOOTH",
"887 -270 LINE SMOOTH",
"887 -360 OFFCURVE",
"713 -360 QCURVE SMOOTH",
"543 -360 OFFCURVE",
"543 -268 QCURVE",
"172 -268 LINE",
"172 -590 OFFCURVE",
"713 -590 QCURVE",
"713 -590 LINE"
);
},
{
closed = 1;
nodes = (
"2947 -590 OFFCURVE",
"2947 -190 QCURVE SMOOTH",
"2947 610 LINE",
"2576 610 LINE",
"2458 524 LINE",
"2349 610 LINE",
"1968 610 LINE",
"1968 10 LINE",
"2378 10 LINE",
"2378 240 LINE",
"2349 240 LINE",
"2349 350 LINE",
"2458 268 LINE",
"2576 350 LINE",
"2576 -190 LINE SMOOTH",
"2576 -360 OFFCURVE",
"2226 -360 QCURVE SMOOTH",
"1872 -360 OFFCURVE",
"1872 -190 QCURVE SMOOTH",
"1872 735 LINE SMOOTH",
"1872 793 OFFCURVE",
"1829 860 OFFCURVE",
"1751 860 QCURVE SMOOTH",
"1401 860 LINE",
"1401 631 LINE",
"1501 631 LINE",
"1501 -190 LINE SMOOTH",
"1501 -590 OFFCURVE",
"2226 -590 QCURVE",
"2226 -590 LINE"
);
}
);
width = 2963;
}
);
note = uni19FC;
unicode = 19FC;
},
{
glyphname = uni19FD;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1694 801 LINE",
"1694 2001 LINE",
"1323 2001 LINE",
"1317 1911 OFFCURVE",
"1257 1759 OFFCURVE",
"1163 1665 OFFCURVE",
"1104 1665 QCURVE SMOOTH",
"1061 1665 OFFCURVE",
"1061 1700 QCURVE SMOOTH",
"1061 1735 OFFCURVE",
"1096 1735 QCURVE SMOOTH",
"1106 1735 LINE",
"1106 2001 LINE",
"1026 2001 LINE SMOOTH",
"911 2001 OFFCURVE",
"770 1925 OFFCURVE",
"709 1800 OFFCURVE",
"709 1722 QCURVE SMOOTH",
"709 1624 OFFCURVE",
"815 1485 OFFCURVE",
"965 1413 OFFCURVE",
"1034 1413 QCURVE SMOOTH",
"1114 1413 OFFCURVE",
"1216 1442 OFFCURVE",
"1288 1495 OFFCURVE",
"1323 1530 QCURVE",
"1323 801 LINE",
"1323 801 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"713 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 170 LINE SMOOTH",
"172 66 OFFCURVE",
"254 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"713 -74 LINE",
"713 193 LINE",
"623 193 LINE SMOOTH",
"563 193 OFFCURVE",
"543 246 OFFCURVE",
"543 272 QCURVE SMOOTH",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE SMOOTH",
"887 -270 LINE SMOOTH",
"887 -360 OFFCURVE",
"713 -360 QCURVE SMOOTH",
"543 -360 OFFCURVE",
"543 -268 QCURVE",
"172 -268 LINE",
"172 -590 OFFCURVE",
"713 -590 QCURVE",
"713 -590 LINE"
);
},
{
closed = 1;
nodes = (
"1921 -590 LINE",
"1921 -360 LINE",
"1841 -360 LINE",
"1841 276 LINE SMOOTH",
"1841 381 OFFCURVE",
"1950 381 QCURVE SMOOTH",
"2058 381 OFFCURVE",
"2058 276 QCURVE SMOOTH",
"2058 -590 LINE",
"2427 -590 LINE",
"2427 276 LINE SMOOTH",
"2427 381 OFFCURVE",
"2537 381 QCURVE SMOOTH",
"2646 381 OFFCURVE",
"2646 276 QCURVE SMOOTH",
"2646 -590 LINE",
"3015 -590 LINE",
"3015 250 LINE SMOOTH",
"3015 610 OFFCURVE",
"2537 610 QCURVE SMOOTH",
"2339 610 OFFCURVE",
"2243 520 QCURVE",
"2146 610 OFFCURVE",
"1950 610 QCURVE SMOOTH",
"1470 610 OFFCURVE",
"1470 260 QCURVE SMOOTH",
"1470 -590 LINE",
"1470 -590 LINE"
);
}
);
width = 3063;
}
);
note = uni19FD;
unicode = 19FD;
},
{
glyphname = uni19FE;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1694 903 LINE",
"1694 2103 LINE",
"1323 2103 LINE",
"1317 2013 OFFCURVE",
"1257 1862 OFFCURVE",
"1163 1767 OFFCURVE",
"1104 1767 QCURVE SMOOTH",
"1061 1767 OFFCURVE",
"1061 1802 QCURVE SMOOTH",
"1061 1837 OFFCURVE",
"1096 1837 QCURVE SMOOTH",
"1106 1837 LINE",
"1106 2103 LINE",
"1026 2103 LINE SMOOTH",
"911 2103 OFFCURVE",
"770 2028 OFFCURVE",
"709 1903 OFFCURVE",
"709 1825 QCURVE SMOOTH",
"709 1726 OFFCURVE",
"815 1587 OFFCURVE",
"965 1516 OFFCURVE",
"1034 1516 QCURVE SMOOTH",
"1114 1516 OFFCURVE",
"1216 1544 OFFCURVE",
"1288 1597 OFFCURVE",
"1323 1632 QCURVE",
"1323 903 LINE",
"1323 903 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"713 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 170 LINE SMOOTH",
"172 66 OFFCURVE",
"254 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"713 -74 LINE",
"713 193 LINE",
"623 193 LINE SMOOTH",
"563 193 OFFCURVE",
"543 246 OFFCURVE",
"543 272 QCURVE SMOOTH",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE SMOOTH",
"887 -270 LINE SMOOTH",
"887 -360 OFFCURVE",
"713 -360 QCURVE SMOOTH",
"543 -360 OFFCURVE",
"543 -268 QCURVE",
"172 -268 LINE",
"172 -590 OFFCURVE",
"713 -590 QCURVE",
"713 -590 LINE"
);
},
{
closed = 1;
nodes = (
"2529 -590 LINE",
"2599 -408 LINE",
"2458 -92 LINE",
"2458 80 LINE",
"2582 80 LINE",
"2582 348 LINE",
"2470 348 LINE SMOOTH",
"2370 348 OFFCURVE",
"2195 334 OFFCURVE",
"2091 274 OFFCURVE",
"2091 211 QCURVE SMOOTH",
"2091 -141 LINE",
"2269 -360 LINE",
"2040 -360 LINE SMOOTH",
"1870 -360 OFFCURVE",
"1870 -190 QCURVE SMOOTH",
"1870 721 LINE SMOOTH",
"1870 797 OFFCURVE",
"1798 870 OFFCURVE",
"1716 870 QCURVE SMOOTH",
"1399 870 LINE",
"1399 641 LINE",
"1499 641 LINE",
"1499 -190 LINE SMOOTH",
"1499 -590 OFFCURVE",
"2040 -590 QCURVE",
"2040 -590 LINE"
);
}
);
width = 2600;
}
);
note = uni19FE;
unicode = 19FE;
},
{
glyphname = uni19FF;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"1632 903 LINE",
"1632 2103 LINE",
"1262 2103 LINE",
"1255 2013 OFFCURVE",
"1196 1862 OFFCURVE",
"1102 1767 OFFCURVE",
"1042 1767 QCURVE SMOOTH",
"999 1767 OFFCURVE",
"999 1802 QCURVE SMOOTH",
"999 1837 OFFCURVE",
"1034 1837 QCURVE SMOOTH",
"1044 1837 LINE",
"1044 2103 LINE",
"965 2103 LINE SMOOTH",
"850 2103 OFFCURVE",
"709 2028 OFFCURVE",
"647 1903 OFFCURVE",
"647 1825 QCURVE SMOOTH",
"647 1726 OFFCURVE",
"754 1587 OFFCURVE",
"903 1516 OFFCURVE",
"973 1516 QCURVE SMOOTH",
"1053 1516 OFFCURVE",
"1155 1544 OFFCURVE",
"1227 1597 OFFCURVE",
"1262 1632 QCURVE",
"1262 903 LINE",
"1262 903 LINE"
);
},
{
closed = 1;
nodes = (
"1255 -590 OFFCURVE",
"1255 -270 QCURVE SMOOTH",
"1255 291 LINE SMOOTH",
"1255 610 OFFCURVE",
"713 610 QCURVE SMOOTH",
"172 610 OFFCURVE",
"172 291 QCURVE SMOOTH",
"172 170 LINE SMOOTH",
"172 66 OFFCURVE",
"254 -39 OFFCURVE",
"393 -74 OFFCURVE",
"479 -74 QCURVE SMOOTH",
"713 -74 LINE",
"713 193 LINE",
"623 193 LINE SMOOTH",
"563 193 OFFCURVE",
"543 246 OFFCURVE",
"543 272 QCURVE SMOOTH",
"543 291 LINE SMOOTH",
"543 381 OFFCURVE",
"713 381 QCURVE SMOOTH",
"887 381 OFFCURVE",
"887 291 QCURVE SMOOTH",
"887 -270 LINE SMOOTH",
"887 -360 OFFCURVE",
"713 -360 QCURVE SMOOTH",
"543 -360 OFFCURVE",
"543 -268 QCURVE",
"172 -268 LINE",
"172 -590 OFFCURVE",
"713 -590 QCURVE",
"713 -590 LINE"
);
},
{
closed = 1;
nodes = (
"2501 -590 LINE",
"2572 -408 LINE",
"2435 -193 LINE",
"2435 -57 LINE",
"2556 -57 LINE",
"2556 211 LINE",
"2253 211 LINE SMOOTH",
"2152 211 OFFCURVE",
"2064 125 OFFCURVE",
"2064 10 QCURVE SMOOTH",
"2064 -221 LINE",
"2222 -360 LINE",
"2013 -360 LINE SMOOTH",
"1843 -360 OFFCURVE",
"1843 -260 QCURVE SMOOTH",
"1843 168 LINE SMOOTH",
"1843 227 OFFCURVE",
"1870 317 OFFCURVE",
"1886 336 QCURVE",
"1941 309 OFFCURVE",
"2042 279 OFFCURVE",
"2120 279 QCURVE SMOOTH",
"2347 279 OFFCURVE",
"2558 463 OFFCURVE",
"2558 618 QCURVE SMOOTH",
"2558 872 LINE",
"2187 872 LINE",
"2187 575 LINE SMOOTH",
"2187 530 OFFCURVE",
"2144 492 OFFCURVE",
"2124 487 QCURVE SMOOTH",
"2105 483 OFFCURVE",
"2052 492 OFFCURVE",
"2015 506 QCURVE",
"2032 532 OFFCURVE",
"2060 596 OFFCURVE",
"2060 655 QCURVE SMOOTH",
"2060 705 OFFCURVE",
"2001 799 OFFCURVE",
"1890 862 OFFCURVE",
"1814 862 QCURVE SMOOTH",
"1726 862 OFFCURVE",
"1610 791 OFFCURVE",
"1550 688 OFFCURVE",
"1550 639 QCURVE SMOOTH",
"1550 573 OFFCURVE",
"1585 508 OFFCURVE",
"1610 475 QCURVE",
"1520 416 OFFCURVE",
"1472 270 OFFCURVE",
"1472 168 QCURVE SMOOTH",
"1472 -260 LINE SMOOTH",
"1472 -590 OFFCURVE",
"2013 -590 QCURVE",
"2013 -590 LINE"
);
}
);
width = 2744;
}
);
note = uni19FF;
unicode = 19FF;
},
{
glyphname = uni200C;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"-43 1286 LINE",
"-43 -272 LINE",
"43 -272 LINE",
"43 1286 LINE",
"43 1286 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200C;
unicode = 200C;
},
{
glyphname = uni200D;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"43 1096 LINE",
"170 969 LINE",
"223 1024 LINE",
"55 1192 LINE",
"223 1358 LINE",
"170 1413 LINE",
"0 1243 LINE",
"-170 1413 LINE",
"-223 1358 LINE",
"-55 1192 LINE",
"-223 1024 LINE",
"-170 969 LINE",
"-43 1096 LINE",
"-43 -272 LINE",
"43 -272 LINE",
"43 -272 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01214 13 12 11 10 9 8 7 6 5 4 3 2 13 0 74 0 0 0 118 16 1 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200D;
unicode = 200D;
},
{
glyphname = uni25CC;
layers = (
{
layerId = "060F58F1-3EA2-4F98-A18F-48F5C294967E";
paths = (
{
closed = 1;
nodes = (
"983 918 LINE",
"983 918 LINE",
"983 918 LINE",
"983 918 LINE",
"983 918 LINE",
"983 918 LINE",
"983 918 LINE",
"983 973 OFFCURVE",
"932 973 QCURVE SMOOTH",
"877 973 OFFCURVE",
"877 918 QCURVE SMOOTH",
"877 864 OFFCURVE",
"932 864 QCURVE SMOOTH",
"983 864 OFFCURVE",
"983 918 QCURVE",
"983 918 LINE"
);
},
{
closed = 1;
nodes = (
"836 1016 LINE",
"836 1016 LINE",
"836 1016 LINE",
"836 1016 LINE",
"836 1016 LINE",
"836 1016 LINE",
"836 1016 LINE",
"836 1071 OFFCURVE",
"784 1071 QCURVE SMOOTH",
"727 1071 OFFCURVE",
"727 1016 QCURVE SMOOTH",
"727 963 OFFCURVE",
"784 963 QCURVE SMOOTH",
"836 963 OFFCURVE",
"836 1016 QCURVE",
"836 1016 LINE"
);
},
{
closed = 1;
nodes = (
"1083 770 LINE",
"1083 770 LINE",
"1083 770 LINE",
"1083 770 LINE",
"1083 770 LINE",
"1083 770 LINE",
"1083 770 LINE",
"1083 823 OFFCURVE",
"1030 823 QCURVE SMOOTH",
"975 823 OFFCURVE",
"975 770 QCURVE SMOOTH",
"975 715 OFFCURVE",
"1028 715 QCURVE SMOOTH",
"1083 715 OFFCURVE",
"1083 770 QCURVE",
"1083 770 LINE"
);
},
{
closed = 1;
nodes = (
"1118 596 LINE",
"1118 596 LINE",
"1118 596 LINE",
"1118 596 LINE",
"1118 596 LINE",
"1118 596 LINE",
"1118 596 LINE",
"1118 649 OFFCURVE",
"1067 649 QCURVE SMOOTH",
"1012 649 OFFCURVE",
"1012 596 QCURVE SMOOTH",
"1012 543 OFFCURVE",
"1067 543 QCURVE SMOOTH",
"1118 543 OFFCURVE",
"1118 596 QCURVE",
"1118 596 LINE"
);
},
{
closed = 1;
nodes = (
"662 1053 LINE",
"662 1053 LINE",
"662 1053 LINE",
"662 1053 LINE",
"662 1053 LINE",
"662 1053 LINE",
"662 1053 LINE",
"662 1106 OFFCURVE",
"608 1106 QCURVE SMOOTH",
"555 1106 OFFCURVE",
"555 1053 QCURVE SMOOTH",
"555 997 OFFCURVE",
"608 997 QCURVE SMOOTH",
"662 997 OFFCURVE",
"662 1053 QCURVE",
"662 1053 LINE"
);
},
{
closed = 1;
nodes = (
"489 1016 LINE",
"489 1016 LINE",
"489 1016 LINE",
"489 1016 LINE",
"489 1016 LINE",
"489 1016 LINE",
"489 1016 LINE",
"489 1071 OFFCURVE",
"434 1071 QCURVE SMOOTH",
"381 1071 OFFCURVE",
"381 1016 QCURVE SMOOTH",
"381 963 OFFCURVE",
"434 963 QCURVE SMOOTH",
"489 963 OFFCURVE",
"489 1016 QCURVE",
"489 1016 LINE"
);
},
{
closed = 1;
nodes = (
"1083 422 LINE",
"1083 422 LINE",
"1083 422 LINE",
"1083 422 LINE",
"1083 422 LINE",
"1083 422 LINE",
"1083 422 LINE",
"1083 477 OFFCURVE",
"1028 477 QCURVE SMOOTH",
"975 477 OFFCURVE",
"975 422 QCURVE SMOOTH",
"975 369 OFFCURVE",
"1028 369 QCURVE SMOOTH",
"1083 369 OFFCURVE",
"1083 422 QCURVE",
"1083 422 LINE"
);
},
{
closed = 1;
nodes = (
"342 918 LINE",
"342 918 LINE",
"342 918 LINE",
"342 918 LINE",
"342 918 LINE",
"342 918 LINE",
"342 918 LINE",
"342 973 OFFCURVE",
"287 973 QCURVE SMOOTH",
"233 973 OFFCURVE",
"233 915 QCURVE SMOOTH",
"233 864 OFFCURVE",
"287 864 QCURVE SMOOTH",
"342 864 OFFCURVE",
"342 918 QCURVE",
"342 918 LINE"
);
},
{
closed = 1;
nodes = (
"983 272 LINE",
"983 272 LINE",
"983 272 LINE",
"983 272 LINE",
"983 272 LINE",
"983 272 LINE",
"983 272 LINE",
"983 328 OFFCURVE",
"932 328 QCURVE SMOOTH",
"877 328 OFFCURVE",
"877 272 QCURVE SMOOTH",
"877 219 OFFCURVE",
"932 219 QCURVE SMOOTH",
"983 219 OFFCURVE",
"983 272 QCURVE",
"983 272 LINE"
);
},
{
closed = 1;
nodes = (
"836 174 LINE",
"836 174 LINE",
"836 174 LINE",
"836 174 LINE",
"836 174 LINE",
"836 174 LINE",
"836 174 LINE",
"836 229 OFFCURVE",
"784 229 QCURVE SMOOTH",
"727 229 OFFCURVE",
"727 174 QCURVE SMOOTH",
"727 123 OFFCURVE",
"784 123 QCURVE SMOOTH",
"836 123 OFFCURVE",
"836 174 QCURVE",
"836 174 LINE"
);
},
{
closed = 1;
nodes = (
"242 770 LINE",
"242 770 LINE",
"242 770 LINE",
"242 770 LINE",
"242 770 LINE",
"242 770 LINE",
"242 770 LINE",
"242 823 OFFCURVE",
"188 823 QCURVE SMOOTH",
"133 823 OFFCURVE",
"133 770 QCURVE SMOOTH",
"133 715 OFFCURVE",
"190 715 QCURVE SMOOTH",
"242 715 OFFCURVE",
"242 770 QCURVE",
"242 770 LINE"
);
},
{
closed = 1;
nodes = (
"207 596 LINE",
"207 596 LINE",
"207 596 LINE",
"207 596 LINE",
"207 596 LINE",
"207 596 LINE",
"207 596 LINE",
"207 649 OFFCURVE",
"154 649 QCURVE SMOOTH",
"98 649 OFFCURVE",
"98 596 QCURVE SMOOTH",
"98 543 OFFCURVE",
"154 543 QCURVE SMOOTH",
"207 543 OFFCURVE",
"207 596 QCURVE",
"207 596 LINE"
);
},
{
closed = 1;
nodes = (
"662 141 LINE",
"662 141 LINE",
"662 141 LINE",
"662 141 LINE",
"662 141 LINE",
"662 141 LINE",
"662 141 LINE",
"662 195 OFFCURVE",
"608 195 QCURVE SMOOTH",
"555 195 OFFCURVE",
"555 141 QCURVE SMOOTH",
"555 86 OFFCURVE",
"608 86 QCURVE SMOOTH",
"662 86 OFFCURVE",
"662 141 QCURVE",
"662 141 LINE"
);
},
{
closed = 1;
nodes = (
"242 422 LINE",
"242 422 LINE",
"242 422 LINE",
"242 422 LINE",
"242 422 LINE",
"242 422 LINE",
"242 422 LINE",
"242 477 OFFCURVE",
"188 477 QCURVE SMOOTH",
"133 477 OFFCURVE",
"133 422 QCURVE SMOOTH",
"133 369 OFFCURVE",
"188 369 QCURVE SMOOTH",
"242 369 OFFCURVE",
"242 422 QCURVE",
"242 422 LINE"
);
},
{
closed = 1;
nodes = (
"489 178 LINE",
"489 178 LINE",
"489 178 LINE",
"489 178 LINE",
"489 178 LINE",
"489 178 LINE",
"489 178 LINE",
"489 229 OFFCURVE",
"434 229 QCURVE SMOOTH",
"381 229 OFFCURVE",
"381 174 QCURVE SMOOTH",
"381 123 OFFCURVE",
"434 123 QCURVE SMOOTH",
"489 123 OFFCURVE",
"489 178 QCURVE",
"489 178 LINE"
);
},
{
closed = 1;
nodes = (
"342 272 LINE",
"342 272 LINE",
"342 272 LINE",
"342 272 LINE",
"342 272 LINE",
"342 272 LINE",
"342 272 LINE",
"342 328 OFFCURVE",
"287 328 QCURVE SMOOTH",
"233 328 OFFCURVE",
"233 272 QCURVE SMOOTH",
"233 219 OFFCURVE",
"287 219 QCURVE SMOOTH",
"342 219 OFFCURVE",
"342 272 QCURVE",
"342 272 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 152 values pushed */\0120 9 0 8 1 9 8 105 11 1 3 10 1 2 0 3 2 105 15 1 1 14 1 0 5 1 0 105 21 1 5 20 1 4 7 5 4 105 23 1 7 22 1 6 13 7 6 105 27 1 13 26 1 12 17 13 12 105 31 1 17 30 1 16 25 17 16 105 0 25 18 24 25 89 29 1 19 28 1 18 24 19 18 105 0 25 25 24 97 0 24 25 24 81 232 230 228 226 217 215 213 211 202 200 198 196 187 185 183 181 172 170 168 166 157 155 153 151 142 140 138 136 127 125 123 121 112 110 108 106 97 95 93 91 82 80 78 76 67 65 41 34 41 34 41 34 41 34 33 32 6 31 \012CALL[ ]	/* CallFunction */";
};
width = 1217;
}
);
note = uni25CC;
unicode = 25CC;
}
);
instances = (
{
customParameters = (
{
name = postscriptFullName;
value = "Noto Sans Khmer Black";
}
);
interpolationWeight = 900;
instanceInterpolations = {
"060F58F1-3EA2-4F98-A18F-48F5C294967E" = 1;
};
name = Black;
weightClass = Black;
}
);
manufacturer = "Danh Hong";
manufacturerURL = "http://www.google.com/get/noto/";
unitsPerEm = 2048;
versionMajor = 2;
versionMinor = 0;
}
